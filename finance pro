


<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Business Expense Tracker</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="app-container">
        <!-- Sidebar -->
        <nav class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <div class="logo">💰</div>
                <div class="brand-text">Finance Pro</div>
            </div>
            
<div class="sidebar-menu">
    <button class="menu-item active" onclick="navigateTo('dashboard')">
        <svg class="menu-icon" viewBox="0 0 24 24" fill="currentColor">
            <path d="M3 13h8V3H3v10zm0 8h8v-6H3v6zm10 0h8V11h-8v10zm0-18v6h8V3h-8z"/>
        </svg>
        <span class="menu-text">Dashboard</span>
    </button>
    
    <button class="menu-item" onclick="navigateTo('transactions')">
        <svg class="menu-icon" viewBox="0 0 24 24" fill="currentColor">
            <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/>
        </svg>
        <span class="menu-text">Transaksi</span>
        <span class="badge" id="transactionBadge">0</span>
    </button>

    <!-- Penjualan -->
    <button class="menu-item" onclick="navigateTo('manageSales')">
        <svg class="menu-icon" viewBox="0 0 24 24" fill="currentColor">
            <path d="M7 18c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zM1 2v2h2l3.6 7.59-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h12v-2H7.42c-.14 0-.25-.11-.25-.25l.03-.12L8.1 13h7.45c.75 0 1.41-.41 1.75-1.03L21.7 4H5.21l-.94-2H1zm16 16c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/>
        </svg>
        <span class="menu-text">Penjualan</span>
    </button>

    <!-- Kelola Penjualan -->
    <button class="menu-item" onclick="navigateTo('manageSales')">
        <svg class="menu-icon" viewBox="0 0 24 24" fill="currentColor">
            <path d="M9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4zm2.5 2.25L15 15.75V4.5L9 1.5 3 4.5v11.25l6 3.75 6 3.75 6-3.75zM13.5 7.67L9 5.5 4.5 7.67V6.75L9 4.58l4.5 2.17v.92z"/>
        </svg>
        <span class="menu-text">Kelola Penjualan</span>
        <span class="badge" id="manageSalesBadge">0</span>
    </button>
    
    <!-- Tambah setelah menu "Kelola Penjualan" -->
<button class="menu-item" onclick="navigateTo('shipping')">
    <svg class="menu-icon" viewBox="0 0 24 24" fill="currentColor">
        <path d="M20 8h-3V4H3c-1.1 0-2 .9-2 2v11h2c0 1.66 1.34 3 3 3s3-1.34 3-3h6c0 1.66 1.34 3 3 3s3-1.34 3-3h2v-5l-3-4zM6 18.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zm13.5-9l1.96 2.5H17V9.5h2.5zm-1.5 9c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"/>
    </svg>
    <span class="menu-text">Pengiriman & Notifikasi</span>
    <span class="badge" id="shippingBadge">0</span>
</button>
    
    <!-- CRM Pelanggan -->
<button class="menu-item" onclick="navigateTo('crm')">
    <svg class="menu-icon" viewBox="0 0 24 24" fill="currentColor">
        <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
    </svg>
    <span class="menu-text">CRM Pelanggan</span>
    <span class="badge" id="crmBadge">0</span>
</button>

    <!-- Inventory -->
    <button class="menu-item" onclick="navigateTo('inventory')">
        <svg class="menu-icon" viewBox="0 0 24 24" fill="currentColor">
            <path d="M20.54 6.25l-8-4a1 1 0 00-.92 0l-8 4A1 1 0 003 7v10a1 1 0 00.54.88l8 4a1 1 0 00.92 0l8-4A1 1 0 0021 17V7a1 1 0 00-.46-.75zM12 4.23L18.06 7 12 9.77 5.94 7 12 4.23zM5 8.28l6 3v7.49L5 15.78V8.28zm8 10.49v-7.49l6-3v7.49l-6 3z"/>
        </svg>
        <span class="menu-text">Inventory</span>
        <span class="badge" id="inventoryBadge">0</span>
    </button>
    
    <button class="menu-item" onclick="navigateTo('debt')">
        <svg class="menu-icon" viewBox="0 0 24 24" fill="currentColor">
            <path d="M20 4H4c-1.11 0-2 .89-2 2v12c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm0 14H4v-6h16v6zm0-10H4V6h16v2z"/>
        </svg>
        <span class="menu-text">Manajemen Cicilan</span>
        <span class="badge" id="debtBadge">0</span>
    </button>
    
    <button class="menu-item" onclick="navigateTo('analytics')">
        <svg class="menu-icon" viewBox="0 0 24 24" fill="currentColor">
            <path d="M16 6l2.29 2.29-4.88 4.88-4-4L2 16.59 3.41 18l6-6 4 4 6.3-6.29L22 12V6z"/>
        </svg>
        <span class="menu-text">Analytics</span>
    </button>
    
    <button class="menu-item" onclick="navigateTo('categories')">
        <svg class="menu-icon" viewBox="0 0 24 24" fill="currentColor">
            <path d="M19.14,12.94c0.04-0.3,0.06-0.61,0.06-0.94c0-0.32-0.02-0.64-0.07-0.94l2.03-1.58c0.18-0.14,0.23-0.41,0.12-0.61 l-1.92-3.32c-0.12-0.22-0.37-0.29-0.59-0.22l-2.39,0.96c-0.5-0.38-1.03-0.7-1.62-0.94L14.4,2.81c-0.04-0.24-0.24-0.41-0.48-0.41 h-3.84c-0.24,0-0.43,0.17-0.47,0.41L9.25,5.35C8.66,5.59,8.12,5.92,7.63,6.29L5.24,5.33c-0.22-0.08-0.47,0-0.59,0.22L2.74,8.87 C2.62,9.08,2.66,9.34,2.86,9.48l2.03,1.58C4.84,11.36,4.82,11.69,4.82,12s0.02,0.64,0.07,0.94l-2.03,1.58 c-0.18,0.14-0.23,0.41-0.12,0.61l1.92,3.32c0.12,0.22,0.37,0.29,0.59,0.22l2.39-0.96c0.5,0.38,1.03,0.7,1.62,0.94l0.36,2.54 c0.05,0.24,0.24,0.41,0.48,0.41h3.84c0.24,0,0.44-0.17,0.47-0.41l0.36-2.54c0.59-0.24,1.13-0.56,1.62-0.94l2.39,0.96 c0.22,0.08,0.47,0,0.59-0.22l1.92-3.32c0.12-0.22,0.07-0.47-0.12-0.61L19.14,12.94z M12,15.6c-1.98,0-3.6-1.62-3.6-3.6 s1.62-3.6,3.6-3.6s3.6,1.62,3.6,3.6S13.98,15.6,12,15.6z"/>
        </svg>
        <span class="menu-text">Pengaturan Kategori</span>
    </button>
</div>
</nav>
        
        

        <!-- Main Content -->
        <main class="main-content">
            <!-- Top Bar -->
            <div class="top-bar">
                <div class="top-bar-left">
                    <button class="toggle-sidebar" onclick="toggleSidebar()">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/>
                        </svg>
                    </button>
                    <div class="page-title" id="currentPageTitle">Dashboard</div>
                </div>
                <div class="user-info">
                    <div class="balance-indicator" id="balanceDisplay">Saldo: Rp 0</div>
                    <span>Selamat datang, Admin</span>
                </div>
            </div>

            <!-- Content Area -->
            <div class="content-area">
                <div id="alertContainer"></div>

                <!-- Dashboard Page -->
                <div id="dashboard" class="page-content active">
                    <div class="page-header">
                        <h1 class="page-title">Dashboard Overview</h1>
                        <p class="page-subtitle">Monitor performa keuangan bisnis Anda secara real-time</p>
                    </div>

                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-header">
                                <div class="stat-title">Saldo Saat Ini</div>
                                <div class="stat-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                                    </svg>
                                </div>
                            </div>
                            <div id="currentBalance" class="stat-value stat-neutral">Rp 0</div>
                            <div class="stat-change">
                                <span>Total saldo tersedia</span>
                            </div>
                        </div>

                        <div class="stat-card">
                            <div class="stat-header">
                                <div class="stat-title">Pendapatan Bulan Ini</div>
                                <div class="stat-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M7 14l5-5 5 5z"/>
                                    </svg>
                                </div>
                            </div>
                            <div id="monthlyIncome" class="stat-value stat-positive">Rp 0</div>
                            <div class="stat-change change-positive">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M7 14l5-5 5 5z"/>
                                </svg>
                                <span id="incomeChange">+0%</span>
                            </div>
                        </div>

                        <div class="stat-card">
                            <div class="stat-header">
                                <div class="stat-title">Pengeluaran Bulan Ini</div>
                                <div class="stat-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M7 10l5 5 5-5z"/>
                                    </svg>
                                </div>
                            </div>
                            <div id="monthlyExpense" class="stat-value stat-negative">Rp 0</div>
                            <div class="stat-change change-negative">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M7 10l5 5 5-5z"/>
                                </svg>
                                <span id="expenseChange">+0%</span>
                            </div>
                        </div>

                        <div class="stat-card">
                            <div class="stat-header">
                                <div class="stat-title">Total Utang</div>
                                <div class="stat-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M11.8 10.9c-2.27-.59-3-1.2-3-2.15 0-1.09 1.01-1.85 2.7-1.85 1.78 0 2.44.85 2.5 2.1h2.21c-.07-1.72-1.12-3.3-3.21-3.81V3h-3v2.16c-1.94.42-3.5 1.68-3.5 3.61 0 2.31 1.91 3.46 4.7 4.13 2.5.6 3 1.48 3 2.41 0 .69-.49 1.79-2.7 1.79-2.06 0-2.87-.92-2.98-2.1h-2.2c.12 2.19 1.76 3.42 3.68 3.83V21h3v-2.15c1.95-.37 3.5-1.5 3.5-3.55 0-2.84-2.43-3.81-4.7-4.4z"/>
                                    </svg>
                                </div>
                            </div>
                            <div id="totalDebt" class="stat-value stat-negative">Rp 0</div>
                            <div class="stat-change">
                                <span id="debtCount">0 utang aktif</span>
                            </div>
                        </div>
                    </div>



                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Transaksi Terbaru</h3>
                        </div>
                        <div id="recentTransactions"></div>
                    </div>
                </div>

                <!-- Transactions Page -->
                <div id="transactions" class="page-content">
                    <div class="page-header">
                        <h1 class="page-title">Riwayat Transaksi</h1>
                        <p class="page-subtitle">Kelola semua transaksi pendapatan dan pengeluaran</p>
                    </div>

                    <div class="form-card collapsed" id="transactionFormCard">
                        <button class="toggle-form-btn" onclick="toggleTransactionForm()">
                            <div>
                                <div class="btn-text">Tambah Transaksi Baru</div>
                                <p style="color: #94a3b8; font-size: 14px; margin: 4px 0 0 0;">Klik untuk menambah pendapatan atau pengeluaran</p>
                            </div>
                            <svg class="toggle-icon" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M7 10l5 5 5-5z"/>
                            </svg>
                        </button>
                        <div class="card-content">
                            <form id="transactionForm">
                                <div class="form-grid">
                                    <div class="form-group">
                                        <label class="form-label">Tipe Transaksi</label>
                                        <select id="transactionType" class="form-control" onchange="toggleCategoryField()">
                                            <option value="income">Pendapatan</option>
                                            <option value="expense">Pengeluaran</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Jumlah (Rp)</label>
                                        <input type="number" id="transactionAmount" class="form-control" required min="0" step="0.01" placeholder="0">
                                    </div>
                                    <div class="form-group" id="categoryGroup" style="display: none;">
                                        <label class="form-label">Kategori</label>
                                        <select id="transactionCategory" class="form-control">
                                            <option value="">Pilih kategori...</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Tanggal</label>
                                        <input type="date" id="transactionDate" class="form-control" required>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Deskripsi</label>
                                    <textarea id="transactionDescription" class="form-control" rows="3" placeholder="Deskripsi transaksi..."></textarea>
                                </div>
                                <div style="display: flex; gap: 12px;">
                                    <button type="submit" class="btn btn-primary">
                                        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                            <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                                        </svg>
                                        Tambah Transaksi
                                    </button>
                                    <button type="button" class="btn btn-secondary" onclick="toggleTransactionForm()">
                                        Batal
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>

                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Daftar Transaksi</h3>
                            <div class="search-filters">
                                <input type="text" id="searchTransaction" class="form-control" placeholder="Cari transaksi...">
                                <select id="filterType" class="form-control">
                                    <option value="">Semua Tipe</option>
                                    <option value="income">Pendapatan</option>
                                    <option value="expense">Pengeluaran</option>
                                </select>
                                <select id="filterCategory" class="form-control">
                                    <option value="">Semua Kategori</option>
                                </select>
                            </div>
                        </div>
                        <div id="transactionsList"></div>
                    </div>
                </div>

                <!-- Sales Page -->
<div id="sales" class="page-content">
    <div class="page-header">
        <h1 class="page-title">Dashboard Transaksi</h1>
        <p class="page-subtitle">Kelola Transaksi Mitra Dengan Mudah & Smart</p>
    </div>

    <!-- Main Transaction Form -->
    <div style="background: linear-gradient(135deg, #2563eb, #60a5fa); padding: 24px; border-radius: 16px; text-align: center; margin-bottom: 24px;">
        <div style="font-size: 24px; color: white; font-weight: bold; margin-bottom: 8px;">📊 Input Transaksi Baru</div>
        <p style="color: rgba(255,255,255,0.8); margin: 0;">Tambahkan transaksi dengan mudah dan cepat</p>
    </div>

    <!-- Step Indicators -->
    <div style="display: flex; justify-content: center; gap: 40px; margin-bottom: 32px;">
        <div style="text-align: center;">
            <div style="width: 50px; height: 50px; background: #3b82f6; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin: 0 auto 8px; color: white; font-weight: bold;">1</div>
            <div style="color: #e2e8f0; font-size: 14px;">Informasi Dasar</div>
        </div>
        <div style="text-align: center;">
            <div style="width: 50px; height: 50px; background: #334155; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin: 0 auto 8px; color: #94a3b8; font-weight: bold;">2</div>
            <div style="color: #94a3b8; font-size: 14px;">Detail Produk</div>
        </div>
        <div style="text-align: center;">
            <div style="width: 50px; height: 50px; background: #334155; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin: 0 auto 8px; color: #94a3b8; font-weight: bold;">3</div>
            <div style="color: #94a3b8; font-size: 14px;">Pembayaran</div>
        </div>
        <div style="text-align: center;">
            <div style="width: 50px; height: 50px; background: #334155; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin: 0 auto 8px; color: #94a3b8; font-weight: bold;">4</div>
            <div style="color: #94a3b8; font-size: 14px;">Konfirmasi</div>
        </div>
    </div>

    <form id="saleForm" style="background: #1e293b; padding: 32px; border-radius: 16px; border: 1px solid #334155;">
        
        
        
        <!-- Section 1: Informasi Dasar Transaksi -->
<div style="border-left: 4px solid #3b82f6; padding-left: 16px; margin-bottom: 32px;">
    <h3 style="color: #e2e8f0; margin-bottom: 16px; display: flex; align-items: center; gap: 8px;">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="white">
            <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/>
        </svg>
        Informasi Dasar Transaksi
    </h3>
    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px;">
        <div>
            <label style="display: block; color: #e2e8f0; margin-bottom: 8px;">Tanggal Transaksi *</label>
            <input type="date" id="saleDate" style="width: 100%; padding: 12px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;" required>
        </div>
        <div>
            <label style="display: block; color: #e2e8f0; margin-bottom: 8px;">Platform *</label>
            <select id="salePlatform" style="width: 100%; padding: 12px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;" required>
                <option value="">-- Pilih Platform --</option>
                <option value="tiktokshop">TikTok Shop</option>
                <option value="shopee">Shopee</option>
                <option value="tokopedia">Tokopedia</option>
                <option value="other">Marketplace Lain</option>
            </select>
        </div>
    </div>
    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px;">
        <div>
            <label style="display: block; color: #e2e8f0; margin-bottom: 8px;">No. Pesanan</label>
            <input type="text" id="orderNumber" style="width: 100%; padding: 12px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;" placeholder="SPX123456789">
        </div>
        <div>
            <label style="display: block; color: #e2e8f0; margin-bottom: 8px;">No. Resi</label>
            <input type="text" id="trackingNumber" style="width: 100%; padding: 12px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;" placeholder="JNE123456789">
        </div>
    </div>
    <div>
        <label style="display: block; color: #e2e8f0; margin-bottom: 8px;">Expedisi</label>
        <select id="expedisi" style="width: 100%; padding: 12px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;">
            <option value="">-- Pilih Expedisi --</option>
            <option value="jne">JNE</option>
            <option value="jnt">J&T Express</option>
            <option value="sicepat">SiCepat</option>
            <option value="anteraja">AnterAja</option>
            <option value="spx">Shopee Express</option>
            <option value="gosend">GoSend</option>
            <option value="grab">GrabExpress</option>
            <option value="pickup">Pickup/COD</option>
        </select>
    </div>
</div>
        
        <!-- Section 2: Data Customer -->
<div style="border-left: 4px solid #10b981; padding-left: 16px; margin-bottom: 32px;">
    <h3 style="color: #e2e8f0; margin-bottom: 16px; display: flex; align-items: center; gap: 8px;">
    <svg width="20" height="20" viewBox="0 0 24 24" fill="white">
        <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
    </svg>
    Data Customer
</h3>
    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px;">
        <div>
            <label style="display: block; color: #e2e8f0; margin-bottom: 8px;">Nama Customer *</label>
            <input type="text" id="customerName" style="width: 100%; padding: 12px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;" required placeholder="Nama lengkap customer">
        </div>
        <div>
            <label style="display: block; color: #e2e8f0; margin-bottom: 8px;">No. Telepon *</label>
            <input type="tel" id="customerPhone" style="width: 100%; padding: 12px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;" required placeholder="08xxxxxxxxx">
        </div>
    </div>
    <div>
        <label style="display: block; color: #e2e8f0; margin-bottom: 8px;">Alamat Lengkap *</label>
        <textarea id="customerAddress" style="width: 100%; padding: 12px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0; height: 100px; resize: none;" required placeholder="Alamat lengkap: Jalan, RT/RW, Kelurahan, Kecamatan, Kota, Provinsi, Kode Pos"></textarea>
    </div>
</div>

       <!-- Section 2: Detail Produk (Multi-Product) -->
<div style="border-left: 4px solid #f59e0b; padding-left: 16px; margin-bottom: 32px;">
    <h3 style="color: #e2e8f0; margin-bottom: 16px; display: flex; align-items: center; gap: 8px;">
        🛒 Daftar Produk & Jumlah
    </h3>
    
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
        <p style="color: #94a3b8; margin: 0;">Tambahkan produk ke dalam transaksi</p>
        <button type="button" onclick="addProductToList()" style="padding: 10px 20px; background: #3b82f6; color: white; border: none; border-radius: 8px; cursor: pointer; display: flex; align-items: center; gap: 8px;">
            <span>+</span> Tambah Produk
        </button>
    </div>
    
    <div id="selectedProductsList" style="background: #334155; border-radius: 8px; padding: 16px; min-height: 60px;">
        <p style="color: #94a3b8; text-align: center; margin: 0;">Belum ada produk dipilih</p>
    </div>
</div>
        
 
       <!-- Section 4: Informasi Pembayaran -->
<div style="border-left: 4px solid #ef4444; padding-left: 16px; margin-bottom: 32px;">
    <h3 style="color: #e2e8f0; margin-bottom: 16px; display: flex; align-items: center; gap: 8px;">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="white">
            <path d="M20 4H4c-1.11 0-2 .89-2 2v12c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm0 14H4v-6h16v6zm0-10H4V6h16v2z"/>
        </svg>
        Informasi Pembayaran
    </h3>
    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
        <div>
            <label style="display: block; color: #e2e8f0; margin-bottom: 8px;">Metode Pembayaran *</label>
            <select id="paymentMethod" style="width: 100%; padding: 12px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;" required>
                <option value="">-- Pilih Metode --</option>
                <option value="cod">💰 COD (Cash on Delivery)</option>
                <option value="transfer">🏦 Transfer Bank</option>
                <option value="ewallet">📱 E-Wallet (OVO/DANA/GoPay)</option>
                <option value="qris">📲 QRIS</option>
                <option value="marketplace_wallet">🛒 Saldo Marketplace</option>
            </select>
        </div>
        <div>
            <label style="display: block; color: #e2e8f0; margin-bottom: 8px;">Status Pembayaran *</label>
            <select id="paymentStatus" style="width: 100%; padding: 12px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;" required>
                <option value="pending">⏳ Pending</option>
                <option value="paid">✅ Paid</option>
                <option value="failed">❌ Failed</option>
            </select>
        </div>
    </div>
</div>

        <!-- Section 4: Konfirmasi -->
        <div style="border-left: 4px solid #8b5cf6; padding-left: 16px; margin-bottom: 32px;">
            <h3 style="color: #e2e8f0; margin-bottom: 16px; display: flex; align-items: center; gap: 8px;">
                📝 Catatan & Konfirmasi
            </h3>
            <div>
                <label style="display: block; color: #e2e8f0; margin-bottom: 8px;">Catatan Tambahan (Opsional)</label>
                <textarea id="saleDescription" style="width: 100%; padding: 12px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0; height: 80px; resize: none;" placeholder="Tambahkan catatan, instruksi khusus, atau informasi penting lainnya..."></textarea>
            </div>
        </div>

        <!-- Action Buttons -->
        <div style="display: flex; justify-content: center; gap: 16px; padding-top: 24px; border-top: 1px solid #334155;">
            <button type="button" onclick="resetSalesForm()" style="padding: 12px 24px; background: #ef4444; color: white; border: none; border-radius: 8px; cursor: pointer;">🔄 Reset Form</button>
            <button type="button" onclick="openPreview()" style="padding: 12px 24px; background: #6366f1; color: white; border: none; border-radius: 8px; cursor: pointer;">👁️ Preview</button>
            <button type="button" onclick="saveManagedSale()" style="padding: 12px 24px; background: #10b981; color: white; border: none; border-radius: 8px; cursor: pointer;">✅ Simpan Transaksi</button>
        </div>
    </form>
</div>

                <!-- Inventory Page -->
<div id="inventory" class="page-content">
    <div class="page-header">
        <h1 class="page-title">Inventaris Produk</h1>
        <p class="page-subtitle">Kelola stok produk dan detailnya</p>
    </div>

<!-- GANTI BAGIAN INI -->
<div class="modern-inventory-tabs">
    <div class="modern-tabs-grid">
        <button class="modern-tab active" onclick="switchInventoryTab('master')" id="inventoryTab-master">Master Produk</button>
        <button class="modern-tab" onclick="switchInventoryTab('movement')" id="inventoryTab-movement">Stock Movement</button>
        <button class="modern-tab" onclick="switchInventoryTab('report')" id="inventoryTab-report">Laporan</button>
        <button class="modern-tab" onclick="switchInventoryTab('analytics')" id="inventoryTab-analytics">Analytics</button>
    </div>
</div>

    <!-- Master Produk tab content -->
    <div id="inventoryTabContent-master">
        

        <div class="card">
            <div style="display: flex; justify-content: space-between; align-items: center; padding: 20px 24px; border-bottom: 1px solid #334155;">
    <h3 style="color: #e2e8f0; font-size: 18px; font-weight: 600;">Daftar Produk</h3>
    <div style="display: flex; gap: 12px; align-items: center;">
        <button onclick="openProductModal()" class="btn btn-primary">+ Tambah Produk</button>
        <input type="text" id="searchInventory" class="form-control" placeholder="Cari produk..." style="width: 250px;">
    </div>
</div>
            <div style="overflow-x: auto; border-radius: 12px; border: 1px solid #334155;">
                <table style="width: 100%; border-collapse: collapse; background: #1e293b;">
                    <thead>
                        <tr style="background: #334155; border-bottom: 1px solid #475569;">
                            <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px;">SKU</th>
                            <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px;">NAMA BARANG</th>
                            <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px;">STOK AWAL</th>
                            <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px;">HPP</th>
                            <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px;">HARGA JUAL</th>
                            <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px;">ACTION</th>
                        </tr>
                    </thead>
                    <tbody id="inventoryList">
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Stock Movement tab content -->
    <div id="inventoryTabContent-movement" style="display:none;">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Pergerakan Stok</h3>
                <div style="display: flex; gap: 12px;">
                    <button class="btn btn-secondary" onclick="refreshStockMovement()">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 6px;">
                            <path d="M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z"/>
                        </svg>
                        Refresh
                    </button>
                    <button class="btn btn-primary" onclick="openStockMovementModal()">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 6px;">
                            <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                        </svg>
                        Tambah Movement
                    </button>
                </div>
            </div>
            <div style="overflow-x: auto; border-radius: 12px; border: 1px solid #334155;">
                <table style="width: 100%; border-collapse: collapse; background: #1e293b;">
                    <thead>
                        <tr style="background: #334155; border-bottom: 1px solid #475569;">
                            <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px;">TANGGAL</th>
                            <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px;">SKU</th>
                            <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px;">NAMA PRODUK</th>
                            <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px;">TYPE</th>
                            <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px;">QTY</th>
                            <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px;">NOTES</th>
                            <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px;">ACTION</th>
                        </tr>
                    </thead>
                    <tbody id="stockMovementList">
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Report tab content -->
    <div id="inventoryTabContent-report" style="display:none;">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Laporan Stock</h3>
                <div style="display: flex; gap: 12px;">
                    <button class="btn btn-secondary" onclick="refreshReport()">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 6px;">
                            <path d="M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z"/>
                        </svg>
                        Refresh
                    </button>
                    <button class="btn btn-primary" onclick="exportReport()">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 6px;">
                            <path d="M19 12v7H5v-7H3v7c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zm-6 .67l2.59-2.58L17 11.5l-5 5-5-5 1.41-1.41L11 12.67V3h2z"/>
                        </svg>
                        Export
                    </button>
                </div>
            </div>
            <div style="overflow-x: auto; border-radius: 12px; border: 1px solid #334155;">
                <table style="width: 100%; border-collapse: collapse; background: #1e293b;">
                    <thead>
                        <tr style="background: #334155; border-bottom: 1px solid #475569;">
                            <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px; white-space: nowrap;">KODE</th>
<th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px; white-space: nowrap;">NAMA BARANG</th>
<th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px; white-space: nowrap;">UNIT</th>
<th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px; white-space: nowrap;">STOK AWAL</th>
<th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px; white-space: nowrap;">BARANG MASUK</th>
<th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px; white-space: nowrap;">BARANG KELUAR</th>
<th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px; white-space: nowrap;">STOK AKHIR</th>
                        </tr>
                    </thead>
                    <tbody id="inventoryReportContent">
                    </tbody>
                </table>
            </div>
        </div>
    </div>

   <!-- Analytics tab content -->
    <div id="inventoryTabContent-analytics" style="display:none;">
        <div style="display: grid; grid-template-columns: 1fr 1fr; grid-template-rows: 1fr 1fr; gap: 20px; margin-bottom: 30px;">
            <!-- Total Produk -->
            <div style="background: linear-gradient(135deg, #1e293b 0%, #334155 100%); padding: 24px; border-radius: 16px; border: 1px solid #334155;">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
                    <div style="font-size: 14px; color: #94a3b8; text-transform: uppercase; letter-spacing: 0.5px; font-weight: 600;">TOTAL PRODUK</div>
                    <div style="width: 40px; height: 40px; background: rgba(16, 185, 129, 0.2); border-radius: 10px; display: flex; align-items: center; justify-content: center; color: #10b981;">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M20 6h-2c0-2.21-1.79-4-4-4S10 3.79 10 6H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zM14 6c0-1.1-.9-2-2-2s-2 .9-2 2h4z"/>
                        </svg>
                    </div>
                </div>
                <div style="font-size: 32px; font-weight: 700; margin-bottom: 8px; line-height: 1; color: #10b981;" id="totalProductCount">0</div>
                <div style="color: #94a3b8; font-size: 13px;">Produk dalam inventory</div>
            </div>

            <!-- Low Stock -->
            <div style="background: linear-gradient(135deg, #1e293b 0%, #334155 100%); padding: 24px; border-radius: 16px; border: 1px solid #334155;">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
                    <div style="font-size: 14px; color: #94a3b8; text-transform: uppercase; letter-spacing: 0.5px; font-weight: 600;">LOW STOCK</div>
                    <div style="width: 40px; height: 40px; background: rgba(239, 68, 68, 0.2); border-radius: 10px; display: flex; align-items: center; justify-content: center; color: #ef4444;">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 2L1 21h22M12 6l7.53 13H4.47M11 10v4h2v-4M11 16v2h2v-2"/>
                        </svg>
                    </div>
                </div>
                <div style="font-size: 32px; font-weight: 700; margin-bottom: 8px; line-height: 1; color: #ef4444;" id="lowStockCount">0</div>
                <div style="color: #94a3b8; font-size: 13px;">Produk perlu restock</div>
            </div>

            <!-- Total Value -->
            <div style="background: linear-gradient(135deg, #1e293b 0%, #334155 100%); padding: 24px; border-radius: 16px; border: 1px solid #334155;">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
                    <div style="font-size: 14px; color: #94a3b8; text-transform: uppercase; letter-spacing: 0.5px; font-weight: 600;">TOTAL VALUE</div>
                    <div style="width: 40px; height: 40px; background: rgba(59, 130, 246, 0.2); border-radius: 10px; display: flex; align-items: center; justify-content: center; color: #3b82f6;">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm.31-8.86c-1.77-.45-2.34-.94-2.34-1.67 0-.84.79-1.43 2.1-1.43 1.38 0 1.9.66 1.94 1.64h1.71c-.05-1.34-.87-2.57-2.49-2.97V5H11.5v1.69c-1.51.32-2.72 1.3-2.72 2.81 0 1.79 1.49 2.69 3.66 3.21 1.95.46 2.34 1.15 2.34 1.87 0 .53-.39 1.39-2.1 1.39-1.6 0-2.23-.72-2.32-1.64H8.65c.09 1.71 1.36 2.66 2.85 2.97V19h1.33v-1.68c1.52-.29 2.72-1.16 2.73-2.77-.01-2.2-1.9-2.96-3.25-3.41z"/>
                        </svg>
                    </div>
                </div>
                <div style="font-size: 32px; font-weight: 700; margin-bottom: 8px; line-height: 1; color: #3b82f6;" id="totalInventoryValue">Rp 0</div>
                <div style="color: #94a3b8; font-size: 13px;">Nilai inventory saat ini</div>
            </div>

            <!-- Movement -->
            <div style="background: linear-gradient(135deg, #1e293b 0%, #334155 100%); padding: 24px; border-radius: 16px; border: 1px solid #334155;">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
                    <div style="font-size: 14px; color: #94a3b8; text-transform: uppercase; letter-spacing: 0.5px; font-weight: 600;">MOVEMENT</div>
                    <div style="width: 40px; height: 40px; background: rgba(245, 158, 11, 0.2); border-radius: 10px; display: flex; align-items: center; justify-content: center; color: #f59e0b;">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8z"/>
                        </svg>
                    </div>
                </div>
                <div style="font-size: 32px; font-weight: 700; margin-bottom: 8px; line-height: 1; color: #f59e0b;" id="monthlyMovement">0</div>
                <div style="color: #94a3b8; font-size: 13px;">Movement bulan ini</div>
            </div>
        </div>

        <!-- Bottom Cards -->
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 32px;">
            <!-- Fast Moving Items -->
            <div style="background: #1e293b; border-radius: 16px; border: 1px solid #334155; padding: 24px;">
                <div style="display: flex; align-items: center; gap: 12px; margin-bottom: 16px;">
                    <div style="width: 36px; height: 36px; background: rgba(245, 158, 11, 0.2); border-radius: 8px; display: flex; align-items: center; justify-content: center; color: #f59e0b;">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                        </svg>
                    </div>
                    <div style="font-size: 16px; font-weight: 600; color: #e2e8f0;">Fast Moving Items</div>
                </div>
                <div id="fastMovingItems" style="color: #94a3b8; line-height: 1.6;">
    <!-- Data akan dirender oleh JavaScript -->
</div>
            </div>

            <!-- Low Stock Alert -->
            <div style="background: #1e293b; border-radius: 16px; border: 1px solid #334155; padding: 24px;">
                <div style="display: flex; align-items: center; gap: 12px; margin-bottom: 16px;">
                    <div style="width: 36px; height: 36px; background: rgba(239, 68, 68, 0.2); border-radius: 8px; display: flex; align-items: center; justify-content: center; color: #ef4444;">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 2L1 21h22M12 6l7.53 13H4.47M11 10v4h2v-4M11 16v2h2v-2"/>
                        </svg>
                    </div>
                    <div style="font-size: 16px; font-weight: 600; color: #e2e8f0;">Low Stock Alert</div>
                </div>
                <div id="lowStockAlert" style="color: #94a3b8; line-height: 1.6;">
                    Produk yang perlu diisi ulang
                </div>
            </div>
        </div>

 <!-- Chart Grid - sama seperti Analytics -->
<div class="chart-grid">
    <div class="chart-card">
        <div class="chart-header">
            <h3 class="chart-title">Stock Distribution</h3>
            <span style="color: #94a3b8; font-size: 14px;">Per Produk</span>
        </div>
        <div class="chart-canvas">
            <canvas id="stockDistributionChart"></canvas>
        </div>
    </div>

    <div class="chart-card">
        <div class="chart-header">
            <h3 class="chart-title">Stok Sekarang vs Batas Aman</h3>
<span style="color: #94a3b8; font-size: 14px;">Status Ketersediaan</span>
        </div>
        <div class="chart-canvas">
            <canvas id="stockComparisonChart"></canvas>
        </div>
    </div>
</div>

<div class="chart-container">
    <div style="width: 100%;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
            <h3 style="color: #e2e8f0; font-size: 18px; font-weight: 600;">Stock Movement Timeline</h3>
            <span style="color: #94a3b8; font-size: 14px;">30 Hari Terakhir</span>
        </div>
        <canvas id="stockMovementChart" style="max-height: 350px;"></canvas>
    </div>
</div>

                </div>
                </div>
                <!-- Debt Page -->
                <div id="debt" class="page-content">
                    <div class="page-header">
                        <h1 class="page-title">Manajemen Utang & Cicilan</h1>
                        <p class="page-subtitle">Kelola dan pantau semua utang bisnis & cicilan pribadi</p>
                    </div>

                    <!-- Debt Stats -->
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-header">
                                <div class="stat-title">Sisa Utang</div>
                                <div class="stat-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z"/>
                                    </svg>
                                </div>
                            </div>
                            <div id="remainingDebt" class="stat-value stat-negative">Rp 0</div>
                            <div class="stat-change">
                                <span>Belum terbayar</span>
                            </div>
                        </div>

                        <div class="stat-card">
                            <div class="stat-header">
                                <div class="stat-title">Total Utang</div>
                                <div class="stat-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M11.8 10.9c-2.27-.59-3-1.2-3-2.15 0-1.09 1.01-1.85 2.7-1.85 1.78 0 2.44.85 2.5 2.1h2.21c-.07-1.72-1.12-3.3-3.21-3.81V3h-3v2.16c-1.94.42-3.5 1.68-3.5 3.61 0 2.31 1.91 3.46 4.7 4.13 2.5.6 3 1.48 3 2.41 0 .69-.49 1.79-2.7 1.79-2.06 0-2.87-.92-2.98-2.1h-2.2c.12 2.19 1.76 3.42 3.68 3.83V21h3v-2.15c1.95-.37 3.5-1.5 3.5-3.55 0-2.84-2.43-3.81-4.7-4.4z"/>
                                    </svg>
                                </div>
                            </div>
                            <div id="totalOriginalDebt" class="stat-value stat-neutral">Rp 0</div>
                            <div class="stat-change">
                                <span>Utang awal</span>
                            </div>
                        </div>

                        <div class="stat-card">
                            <div class="stat-header">
                                <div class="stat-title">Sudah Dibayar</div>
                                <div class="stat-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                                    </svg>
                                </div>
                            </div>
                            <div id="totalPaidAmount" class="stat-value stat-positive">Rp 0</div>
                            <div class="stat-change">
                                <span id="paymentProgress">0% lunas</span>
                            </div>
                        </div>

                        <div class="stat-card">
                            <div class="stat-header">
                                <div class="stat-title">Utang Aktif</div>
                                <div class="stat-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/>
                                    </svg>
                                </div>
                            </div>
                            <div id="activeDebtCount" class="stat-value stat-neutral">0</div>
                            <div class="stat-change">
                                <span id="overdueCount">0 jatuh tempo</span>
                            </div>
                        </div>
                    </div>

                    <!-- Import Cicilan Section -->
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Import Jadwal Cicilan</h3>
                        </div>
                        <div class="card-content">
                            <div class="import-section" id="importSection">
                                <svg width="48" height="48" viewBox="0 0 24 24" fill="currentColor" style="color: #3b82f6; margin-bottom: 12px;">
                                    <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
                                </svg>
                                <h4 style="color: #e2e8f0; margin-bottom: 8px;">Upload File CSV Cicilan</h4>
                                <p style="color: #94a3b8; margin-bottom: 16px;">
                                    Drag & drop file CSV atau klik untuk browse.<br>
                                    <small>Format: Tanggal Jatuh Tempo, Nominal Cicilan, Keterangan</small>
                                </p>
                                <input type="file" id="cicilanFileInput" class="file-input" accept=".csv" onchange="handleCicilanImport(event)">
                                <button class="import-btn" onclick="document.getElementById('cicilanFileInput').click()">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M9 16h6v-6h4l-7-7-7 7h4zm-4 2h14v2H5z"/>
                                    </svg>
                                    Pilih File CSV
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Manual Debt Form -->
                    <div class="form-card collapsed" id="debtFormCard">
                        <button class="toggle-form-btn" onclick="toggleDebtForm()">
                            <div>
                                <div class="btn-text">Tambah Utang Manual</div>
                                <p style="color: #94a3b8; font-size: 14px; margin: 4px 0 0 0;">Klik untuk menambah utang individual</p>
                            </div>
                            <svg class="toggle-icon" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M7 10l5 5 5-5z"/>
                            </svg>
                        </button>
                        <div class="card-content">
                            <form id="debtForm">
                                <div class="form-grid">
                                    <div class="form-group">
                                        <label class="form-label">Jumlah per Cicilan (Rp)</label>
                                        <input type="number" id="debtAmount" class="form-control" required min="0" step="0.01" placeholder="0">
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Kepada</label>
                                        <input type="text" id="debtTo" class="form-control" required placeholder="Nama kreditor">
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Tanggal Mulai</label>
                                        <input type="date" id="debtDueDate" class="form-control">
                                    </div>
                                </div>
                                
                                <!-- Recurring Options -->
                                <div class="form-group">
                                    <label class="form-label" style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
                                        <input type="checkbox" id="isRecurring" class="form-checkbox" onchange="toggleRecurringOptions()">
                                        Cicilan Berulang
                                    </label>
                                </div>

                                <div id="recurringOptions" style="display: none;">
                                    <div class="form-grid">
                                        <div class="form-group">
                                            <label class="form-label">Jumlah Cicilan</label>
                                            <select id="cicilanCount" class="form-control">
                                                <option value="2">2x Cicilan</option>
                                                <option value="3">3x Cicilan</option>
                                                <option value="6">6x Cicilan</option>
                                                <option value="12" selected>12x Cicilan</option>
                                                <option value="24">24x Cicilan</option>
                                                <option value="36">36x Cicilan</option>
                                                <option value="custom">Custom...</option>
                                            </select>
                                        </div>
                                        <div class="form-group" id="customCountGroup" style="display: none;">
                                            <label class="form-label">Jumlah Custom</label>
                                            <input type="number" id="customCount" class="form-control" min="1" max="120" placeholder="Masukkan jumlah">
                                        </div>
                                        <div class="form-group">
                                            <label class="form-label">Interval</label>
                                            <select id="cicilanInterval" class="form-control">
                                                <option value="weekly">Mingguan</option>
                                                <option value="monthly" selected>Bulanan</option>
                                                <option value="quarterly">3 Bulanan</option>
                                            </select>
                                        </div>
                                    </div>
                                    
                                    <div class="preview-box">
                                        <div class="preview-title">Preview Cicilan:</div>
                                        <div id="cicilanPreview" class="preview-content">
                                            12x cicilan bulanan mulai dari tanggal yang dipilih
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label class="form-label">Deskripsi</label>
                                    <textarea id="debtDescription" class="form-control" rows="3" placeholder="Deskripsi utang..."></textarea>
                                </div>
                                <div style="display: flex; gap: 12px;">
                                    <button type="submit" class="btn btn-primary">
                                        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                            <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                                        </svg>
                                        <span id="submitButtonText">Tambah Utang</span>
                                    </button>
                                    <button type="button" class="btn btn-secondary" onclick="toggleDebtForm()">
                                        Batal
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>

                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Daftar Utang & Cicilan</h3>
                            <div class="view-toggle">
                                <button class="view-toggle-btn active" onclick="switchDebtView('list')" id="listViewBtn">
                                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 6px;">
                                        <path d="M3 13h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm4 4h14v-2H7v2zm0 4h14v-2H7v2zM7 7v2h14V7H7z"/>
                                    </svg>
                                    List View
                                </button>
                                <button class="view-toggle-btn" onclick="switchDebtView('calendar')" id="calendarViewBtn">
                                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 6px;">
                                        <path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/>
                                    </svg>
                                    Calendar View
                                </button>
                            </div>
                        </div>
                        <div class="card-content">
                            <div id="debtListView">
                                <div id="debtsList"></div>
                            </div>
                            <div id="debtCalendarView" style="display: none;">
                                <div class="calendar-view" id="debtCalendar"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Analytics Page -->
<div id="analytics" class="page-content">
    <div class="page-header">
        <h1 class="page-title">Business Analytics</h1>
        <p class="page-subtitle">Insight mendalam untuk pengambilan keputusan bisnis</p>
    </div>
    
    <!-- Month Selector -->
    <div style="display: flex; gap: 12px; margin-bottom: 24px; align-items: center; padding: 0 4px;">
        <label style="color: #e2e8f0; font-weight: 500;">Pilih Periode:</label>
        <select id="analyticsMonth" style="padding: 8px 12px; background: #334155; border: 1px solid #475569; border-radius: 6px; color: #e2e8f0;">
        </select>
        <select id="analyticsYear" style="padding: 8px 12px; background: #334155; border: 1px solid #475569; border-radius: 6px; color: #e2e8f0;">
        </select>
        <button onclick="refreshAnalytics()" class="btn btn-primary btn-sm">Update</button>
    </div>

    <div class="stats-grid">
        <div class="stat-card">
            <div class="stat-header">
                <div class="stat-title">Profit Margin</div>
                <div class="stat-icon">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M16 6l2.29 2.29-4.88 4.88-4-4L2 16.59 3.41 18l6-6 4 4 6.3-6.29L22 12V6z"/>
                    </svg>
                </div>
            </div>
            <div id="profitMargin" class="stat-value stat-positive">0%</div>
            <div class="stat-change">
                <span>Margin keuntungan</span>
            </div>
        </div>

        <div class="stat-card">
            <div class="stat-header">
                <div class="stat-title">Avg Transaksi/Hari</div>
                <div class="stat-icon">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/>
                    </svg>
                </div>
            </div>
            <div id="avgTransactions" class="stat-value stat-neutral">0</div>
            <div class="stat-change">
                <span>Rata-rata harian</span>
            </div>
        </div>

        <div class="stat-card">
            <div class="stat-header">
                <div class="stat-title">Top Kategori Pengeluaran</div>
                <div class="stat-icon">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                    </svg>
                </div>
            </div>
            <div id="topCategory" class="stat-value stat-neutral">-</div>
            <div class="stat-change">
                <span id="topCategoryAmount">Rp 0</span>
            </div>
        </div>

        <div class="stat-card">
            <div class="stat-header">
                <div class="stat-title">Burn Rate</div>
                <div class="stat-icon">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M13.5.67s.74 2.65.74 4.8c0 2.06-1.35 3.73-3.41 3.73-2.07 0-3.63-1.67-3.63-3.73l.03-.36C5.21 7.51 4 10.62 4 14c0 4.42 3.58 8 8 8s8-3.58 8-8C20 8.61 17.41 3.8 13.5.67zM11.71 19c-1.78 0-3.22-1.4-3.22-3.14 0-1.62 1.05-2.76 2.81-3.12 1.77-.36 3.6-1.21 4.62-2.58.39 1.29.28 2.16.28 2.16-.5 2.5-2.3 4.68-4.49 6.68z"/>
                    </svg>
                </div>
            </div>
            <div id="burnRate" class="stat-value stat-negative">Rp 0</div>
            <div class="stat-change">
                <span>Per bulan</span>
            </div>
        </div>
    </div>

    <!-- Sales Analytics Section -->
    <div class="stats-grid" style="margin-top: 32px;">
        <div class="stat-card">
            <div class="stat-header">
                <div class="stat-title">Total Sales Revenue</div>
                <div class="stat-icon">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M7 4h-2l-3 7v2a5 5 0 005 5h7a5 5 0 005-5v-2l-3-7h-2"/>
                    </svg>
                </div>
            </div>
            <div id="totalSalesRevenue" class="stat-value stat-positive">Rp 0</div>
            <div class="stat-change">
                <span id="salesCount">0 transaksi</span>
            </div>
        </div>

        <div class="stat-card">
    <div class="stat-header">
        <div class="stat-title">Profit Penjualan</div>
        <div class="stat-icon">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
            </svg>
        </div>
    </div>
    <div id="totalSalesProfit" class="stat-value stat-positive">Rp 0</div>
    <div class="stat-change">
        <span>Net profit penjualan</span>
    </div>
</div>

        <div class="stat-card">
            <div class="stat-header">
                <div class="stat-title">Return Rate</div>
                <div class="stat-icon">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12 5V3L9 6l3 3V7c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8z"/>
                    </svg>
                </div>
            </div>
            <div id="returnRate" class="stat-value stat-negative">0%</div>
            <div class="stat-change">
                <span id="returnCount">0 return</span>
            </div>
        </div>

        <div class="stat-card">
            <div class="stat-header">
                <div class="stat-title">Top Platform</div>
                <div class="stat-icon">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                    </svg>
                </div>
            </div>
            <div id="topPlatform" class="stat-value stat-neutral">-</div>
            <div class="stat-change">
                <span id="topPlatformAmount">Rp 0</span>
            </div>
        </div>
    </div>

    <div class="chart-grid">
        <div class="chart-card">
            <div class="chart-header">
                <h3 class="chart-title">Breakdown Pengeluaran</h3>
                <span style="color: #94a3b8; font-size: 14px;">Per Kategori</span>
            </div>
            <div class="chart-canvas">
                <canvas id="categoryChart"></canvas>
            </div>
        </div>

        <div class="chart-card">
            <div class="chart-header">
                <h3 class="chart-title">Trend Bulanan</h3>
                <span style="color: #94a3b8; font-size: 14px;">Pendapatan vs Pengeluaran</span>
            </div>
            <div class="chart-canvas">
                <canvas id="trendChart"></canvas>
            </div>
        </div>
    </div>

    <div class="chart-container">
        <div style="width: 100%;">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                <h3 style="color: #e2e8f0; font-size: 18px; font-weight: 600;">Perbandingan Income vs Expense</h3>
                <span style="color: #94a3b8; font-size: 14px;">6 Bulan Terakhir</span>
            </div>
            <canvas id="comparisonChart" style="max-height: 350px;"></canvas>
        </div>
    </div>

    <div class="insights-grid">
        <div class="insight-card">
            <div class="insight-header">
                <div class="insight-icon">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M9 11H7v6h2v-6zm4 0h-2v6h2v-6zm4 0h-2v6h2v-6zM4 21h16c.55 0 1-.45 1-1s-.45-1-1-1H4c-.55 0-1 .45-1 1s.45 1 1 1zM4 3v2h16V3c0-.55-.45-1-1-1H5c-.55 0-1 .45-1 1z"/>
                    </svg>
                </div>
                <div class="insight-title">Tren Pengeluaran</div>
            </div>
            <div class="insight-content">
                <p id="expenseTrend">Analisis tren pengeluaran akan muncul setelah ada data transaksi.</p>
                <div class="progress-bar">
                    <div class="progress-fill" id="expenseTrendProgress" style="width: 0%"></div>
                </div>
            </div>
        </div>

        <div class="insight-card">
            <div class="insight-header">
                <div class="insight-icon">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                    </svg>
                </div>
                <div class="insight-title">Rekomendasi</div>
            </div>
            <div class="insight-content">
                <div id="recommendations">
                    <p>• Mulai catat transaksi untuk mendapatkan insight</p>
                    <p>• Set budget bulanan untuk kontrol pengeluaran</p>
                    <p>• Monitor cash flow secara regular</p>
                </div>
            </div>
        </div>

        <div class="insight-card">
            <div class="insight-header">
                <div class="insight-icon">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                    </svg>
                </div>
                <div class="insight-title">Health Score</div>
            </div>
            <div class="insight-content">
                <div class="stat-value stat-neutral" id="healthScore">-</div>
                <p id="healthScoreDesc">Skor kesehatan finansial bisnis Anda</p>
                <div class="progress-bar">
                    <div class="progress-fill" id="healthScoreProgress" style="width: 0%"></div>
                </div>
            </div>
        </div>
    </div>
</div>
                
                <!-- Kelola Penjualan Page -->
<div id="manageSales" class="page-content">
    <div class="page-header">
        <h1 class="page-title">Kelola Penjualan</h1>
        <p class="page-subtitle">Daftar lengkap transaksi penjualan dengan detail customer & produk</p>
    </div>

    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Daftar Transaksi Penjualan</h3>
            <div style="display: flex; gap: 12px;">
                <input type="text" id="searchManageSales" class="form-control" placeholder="Cari transaksi..." style="width: 250px;">
                <button class="btn btn-primary">+ Export Excel</button>
            </div>
        </div>
        
        <div style="overflow-x: auto;">
            <table style="width: 100%; border-collapse: collapse; background: #1e293b;">
                <thead>
                    <tr style="background: #334155; border-bottom: 1px solid #475569;">
                        <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600;">TANGGAL</th>
                        <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600;">CUSTOMER</th>
                        <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600;">PRODUK</th>
                        <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600;">PLATFORM</th>
                        <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600;">TOTAL</th>
                        <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600;">STATUS</th>
                        <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600;">ACTION</th>
                    </tr>
                </thead>
                <tbody id="manageSalesList">
                    <tr>
                        <td colspan="7" style="padding: 40px; text-align: center; color: #94a3b8;">
                            Belum ada transaksi penjualan.<br>
                            <small>Transaksi dari form penjualan akan muncul di sini</small>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>



                <!-- Categories Page -->
                <div id="categories" class="page-content">
                    <div class="page-header">
                        <h1 class="page-title">Kelola Kategori</h1>
                        <p class="page-subtitle">Atur kategori pengeluaran sesuai kebutuhan bisnis</p>
                    </div>

                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Tambah Kategori Baru</h3>
                        </div>
                        <div class="card-content">
                            <form id="categoryForm">
                                <div class="form-group">
                                    <label class="form-label">Nama Kategori</label>
                                    <input type="text" id="categoryName" class="form-control" required placeholder="Contoh: Bubble Wrap, Lakban Bening">
                                </div>
                                <button type="submit" class="btn btn-success">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                                    </svg>
                                    Tambah Kategori
                                </button>
                            </form>
                        </div>
                    </div>

                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Daftar Kategori</h3>
                        </div>
                        <div class="card-content">
                            <div class="category-grid" id="categoriesList"></div>
                        </div>
                    </div>
                </div>
                
                
<!-- Shipping Page -->
<div id="shipping" class="page-content">
    <div class="page-header">
        <h1 class="page-title">Pengiriman & Notifikasi</h1>
        <p class="page-subtitle">Update status pengiriman & kelola notifikasi WhatsApp otomatis</p>
    </div>

    <!-- Modern Tabs -->
<div class="modern-inventory-tabs">
    <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 8px; padding: 6px;">
        <button class="modern-tab active" onclick="switchShippingTab('tracking')" id="shippingTab-tracking">Status Tracking</button>
        <button class="modern-tab" onclick="switchShippingTab('whatsapp')" id="shippingTab-whatsapp">WhatsApp Settings</button>
        <button class="modern-tab" onclick="switchShippingTab('logs')" id="shippingTab-logs">Notification Log</button>
    </div>
</div>

    <!-- Tab 1: Status Tracking -->
<div id="shippingTabContent-tracking">
    <div class="card">
        <div style="display: flex; justify-content: space-between; align-items: center; padding: 20px 24px; border-bottom: 1px solid #334155;">
            <h3 style="color: #e2e8f0; font-size: 18px; font-weight: 600;">Daftar Pengiriman</h3>
            <div style="display: flex; gap: 12px; align-items: center;">
                <button onclick="refreshShippingList()" class="btn btn-secondary">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 6px;">
                        <path d="M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z"/>
                    </svg>
                    Refresh
                </button>
                <button onclick="syncAllShippingStatus()" class="btn btn-primary">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 6px;">
                        <path d="M4 12a8 8 0 0 1 8-8V2.5L16 6l-4 3.5V8a6 6 0 1 0 6 6h1.5a7.5 7.5 0 1 1-7.5-7.5z"/>
                    </svg>
                    Sync All
                </button>
                <input type="text" id="searchShipping" class="form-control" placeholder="Cari pengiriman..." style="width: 250px;">
            </div>
        </div>
        
        
        
        <div style="overflow-x: auto;">
            <table style="width: 100%; border-collapse: collapse; background: #1e293b;">
                <thead>
                    <tr style="background: #334155; border-bottom: 1px solid #475569;">
                        <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600;">TANGGAL</th>
                        <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600;">CUSTOMER</th>
                        <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600;">NO. RESI</th>
                        <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600;">PAYMENT</th>
                        <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600;">STATUS</th>
                        <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600;">ACTION</th>
                    </tr>
                </thead>
                <tbody id="shippingList">
                    <tr>
                        <td colspan="6" style="padding: 40px; text-align: center; color: #94a3b8;">
                            Loading shipping data...
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

    <!-- Tab 2: WhatsApp Settings -->
<div id="shippingTabContent-whatsapp" style="display: none;">
    
    <!-- API Configuration -->
    <div class="card" style="margin-bottom: 20px;">
        <div class="card-header">
            <h3 class="card-title">Konfigurasi WhatsApp API</h3>
        </div>
        <div class="card-content">
            <form id="whatsappSettingsForm">
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px;">
                    <div class="form-group">
                        <label class="form-label">API Token Fonnte</label>
                        <input type="text" id="fontteApiKey" class="form-control" placeholder="Masukkan token API...">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Status</label>
                        <div style="display: flex; align-items: center; gap: 8px;">
                            <input type="checkbox" id="whatsappEnabled" class="form-checkbox">
                            <span>Aktifkan Notifikasi Otomatis</span>
                        </div>
                    </div>
                </div>
                
                <div style="display: flex; gap: 12px;">
                    <button type="button" onclick="testWhatsAppConnection()" class="btn btn-secondary">Test Connection</button>
                    <button type="submit" class="btn btn-primary">Simpan</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Message Templates -->
<div class="card">
    <div class="card-header">
        <h3 class="card-title">Template Pesan</h3>
    </div>
    <div class="card-content">
        
        <!-- Variable Buttons -->
        <div style="background: #334155; padding: 16px; border-radius: 8px; margin-bottom: 20px;">
            <h4 style="color: #e2e8f0; margin-bottom: 12px;">Klik untuk menambah variabel:</h4>
            <div style="display: flex; gap: 8px; flex-wrap: wrap;">
                <button type="button" onclick="insertVariable('customer_name')" class="btn btn-secondary btn-sm">👤 Nama Customer</button>
                <button type="button" onclick="insertVariable('products')" class="btn btn-secondary btn-sm">📦 Produk</button>
                <button type="button" onclick="insertVariable('tracking_number')" class="btn btn-secondary btn-sm">🏷️ No Resi</button>
                <button type="button" onclick="insertVariable('expedisi')" class="btn btn-secondary btn-sm">🚚 Ekspedisi</button>
            </div>
        </div>

        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
            <div>
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                    <label class="form-label">Template: Dikirim</label>
                    <button type="button" onclick="previewTemplate('shipped')" class="btn btn-secondary btn-sm">👁️ Preview</button>
                </div>
                <textarea id="templateShipped" class="form-control" rows="8"></textarea>
            </div>
            <div>
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                    <label class="form-label">Template: Sampai</label>
                    <button type="button" onclick="previewTemplate('delivered')" class="btn btn-secondary btn-sm">👁️ Preview</button>
                </div>
                <textarea id="templateDelivered" class="form-control" rows="8"></textarea>
            </div>
        </div>
        
        <div style="display: flex; justify-content: center; margin-top: 16px;">
    <button type="button" onclick="saveTemplates()" class="btn btn-primary" style="display: flex; align-items: center; gap: 8px;">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
            <path d="M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z"/>
        </svg>
        Simpan Templates
    </button>
</div>
    </div>
</div>



<!-- Tab 3: Notification Log -->
<div id="shippingTabContent-logs" style="display: none;">
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Log Notifikasi WhatsApp</h3>
            <button onclick="refreshNotificationLogs()" class="btn btn-secondary">
                Refresh
            </button>
        </div>
        <div style="overflow-x: auto;">
            <table style="width: 100%; border-collapse: collapse; background: #1e293b;">
                <thead>
                    <tr style="background: #334155; border-bottom: 1px solid #475569;">
                        <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600;">WAKTU</th>
                        <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600;">CUSTOMER</th>
                        <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600;">RESI</th>
                        <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600;">TIPE</th>
                        <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600;">STATUS</th>
                        <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600;">ACTION</th>
                    </tr>
                </thead>
                <tbody id="notificationLogsList">
                    <tr>
                        <td colspan="6" style="padding: 40px; text-align: center; color: #94a3b8;">
                            Loading notification logs...
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>
</div>

                <!-- CRM Pelanggan Page -->
                <div id="crm" class="page-content">
                    <div class="page-header">
                        <h1 class="page-title">CRM Pelanggan</h1>
                        <p class="page-subtitle">Kelola hubungan dengan pelanggan dan analisis perilaku belanja</p>
                    </div>

                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-header">
                                <div class="stat-title">Total Pelanggan</div>
                                <div class="stat-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
                                    </svg>
                                </div>
                            </div>
                            <div id="totalCustomers" class="stat-value stat-neutral">0</div>
                            <div class="stat-change">
                                <span>Registered customers</span>
                            </div>
                        </div>

                        <div class="stat-card">
                            <div class="stat-header">
                                <div class="stat-title">Repeat Customers</div>
                                <div class="stat-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z"/>
                                    </svg>
                                </div>
                            </div>
                            <div id="repeatCustomers" class="stat-value stat-positive">0</div>
                            <div class="stat-change">
                                <span id="repeatRate">0% repeat rate</span>
                            </div>
                        </div>

                        <div class="stat-card">
                            <div class="stat-header">
                                <div class="stat-title">Avg Order Value</div>
                                <div class="stat-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm.31-8.86c-1.77-.45-2.34-.94-2.34-1.67 0-.84.79-1.43 2.1-1.43 1.38 0 1.9.66 1.94 1.64h1.71c-.05-1.34-.87-2.57-2.49-2.97V5H11.5v1.69c-1.51.32-2.72 1.3-2.72 2.81 0 1.79 1.49 2.69 3.66 3.21 1.95.46 2.34 1.15 2.34 1.87 0 .53-.39 1.39-2.1 1.39-1.6 0-2.23-.72-2.32-1.64H8.65c.09 1.71 1.36 2.66 2.85 2.97V19h1.33v-1.68c1.52-.29 2.72-1.16 2.73-2.77-.01-2.2-1.9-2.96-3.25-3.41z"/>
                                    </svg>
                                </div>
                            </div>
                            <div id="avgOrderValue" class="stat-value stat-neutral">Rp 0</div>
                            <div class="stat-change">
                                <span>Per transaction</span>
                            </div>
                        </div>

                        <div class="stat-card">
                            <div class="stat-header">
                                <div class="stat-title">Total Revenue</div>
                                <div class="stat-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M7 18c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zM1 2v2h2l3.6 7.59-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h12v-2H7.42c-.14 0-.25-.11-.25-.25l.03-.12L8.1 13h7.45c.75 0 1.41-.41 1.75-1.03L21.7 4H5.21l-.94-2H1zm16 16c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/>
                                    </svg>
                                </div>
                            </div>
                            <div id="totalCustomerRevenue" class="stat-value stat-positive">Rp 0</div>
                            <div class="stat-change">
                                <span>From paid orders</span>
                            </div>
                        </div>
                    </div>

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Daftar Pelanggan</h3>
        <div style="display: flex; gap: 12px; align-items: center;">
            <input type="text" id="searchCustomers" class="form-control" placeholder="Cari pelanggan..." style="width: 250px;">
            <button class="btn btn-primary" style="white-space: nowrap;">Export Data</button>
        </div>
    </div>
    
    <div style="overflow-x: auto;">
        <table style="width: 100%; border-collapse: collapse; background: #1e293b;">
            <thead>
                <tr style="background: #334155; border-bottom: 1px solid #475569;">
                    <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600;">CUSTOMER</th>
                    <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600;">ORDERS</th>
                    <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600;">LIFETIME VALUE</th>
                    <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600;">LAST ORDER</th>
                    <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600;">STATUS</th>
                    <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600;">ACTION</th>
                </tr>
            </thead>
            <tbody id="customersList">
                <tr>
                    <td colspan="6" style="padding: 40px; text-align: center; color: #94a3b8;">
                        Loading customer data...
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>
                </div>
            </div>
        </main>
    </div>



    
   
    
    <!-- Modal Tambah Produk -->
<div id="productModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); z-index: 2000; align-items: center; justify-content: center;">
    <div style="background: #1e293b; border-radius: 16px; padding: 32px; width: 90%; max-width: 700px; border: 1px solid #334155; position: relative; max-height: 90vh; overflow-y: auto;">
        
        <!-- Header -->
        <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 32px;">
            <div style="display: flex; align-items: center; gap: 12px;">
                <div style="width: 24px; height: 24px; background: #3b82f6; border-radius: 6px; display: flex; align-items: center; justify-content: center;">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="white">
                        <path d="M20 6h-2c0-2.21-1.79-4-4-4S10 3.79 10 6H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zM14 6c0-1.1-.9-2-2-2s-2 .9-2 2h4z"/>
                    </svg>
                </div>
                <h3 style="color: #e2e8f0; font-size: 20px; font-weight: 600; margin: 0;">Tambah Produk Baru</h3>
            </div>
            <button onclick="closeProductModal()" style="background: none; border: none; color: #94a3b8; cursor: pointer; font-size: 24px; width: 32px; height: 32px; display: flex; align-items: center; justify-content: center; border-radius: 6px;" onmouseover="this.style.background='#374151'" onmouseout="this.style.background='none'">&times;</button>
        </div>

        <!-- Form -->
        <form id="productModalForm" onsubmit="handleProductSubmit(event)">
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px;">
                
                <!-- SKU -->
                <div>
                    <label style="display: block; color: #e2e8f0; font-weight: 500; margin-bottom: 8px;">SKU <span style="color: #ef4444;">*</span></label>
<input type="text" id="modalSKU" style="width: 100%; padding: 12px 16px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;" required placeholder="Ketik SKU sendiri, contoh: GLS420-001">                </div>

                <!-- Nama Barang -->
                <div>
                    <label style="display: block; color: #e2e8f0; font-weight: 500; margin-bottom: 8px;">Nama Barang <span style="color: #ef4444;">*</span></label>
                    <input type="text" id="modalNama" style="width: 100%; padding: 12px 16px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;" required placeholder="Gelas 420ml Tutup Kayu">
                </div>

                <!-- Unit -->
                <div>
                    <label style="display: block; color: #e2e8f0; font-weight: 500; margin-bottom: 8px;">Unit</label>
                    <select id="modalUnit" style="width: 100%; padding: 12px 16px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;">
                        <option value="pcs">pcs</option>
                        <option value="box">box</option>
                        <option value="pack">pack</option>
                        <option value="kg">kg</option>
                        <option value="ltr">ltr</option>
                    </select>
                </div>

                <!-- Stok Awal -->
                <div>
                    <label style="display: block; color: #e2e8f0; font-weight: 500; margin-bottom: 8px;">Stok Awal</label>
                    <input type="number" id="modalStok" style="width: 100%; padding: 12px 16px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;" min="0" placeholder="0">
                </div>

                <!-- Harga Modal -->
                <div>
                    <label style="display: block; color: #e2e8f0; font-weight: 500; margin-bottom: 8px;">Harga Modal (Rp)</label>
                    <input type="number" id="modalHargaModal" style="width: 100%; padding: 12px 16px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;" min="0" placeholder="0">
                </div>

                <!-- Harga Jual -->
                <div>
                    <label style="display: block; color: #e2e8f0; font-weight: 500; margin-bottom: 8px;">Harga Jual (Rp)</label>
                    <input type="number" id="modalHargaJual" style="width: 100%; padding: 12px 16px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;" min="0" placeholder="0">
                </div>
            </div>

            <!-- Min Stock Alert -->
            <div style="margin-bottom: 32px;">
                <label style="display: block; color: #e2e8f0; font-weight: 500; margin-bottom: 8px;">Min Stock Alert</label>
                <input type="number" id="modalMinStock" style="width: 100%; padding: 12px 16px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;" min="0" placeholder="5">
            </div>

            <!-- Buttons -->
            <div style="display: flex; gap: 12px;">
                <button type="submit" style="flex: 1; padding: 14px 24px; background: #3b82f6; color: white; border: none; border-radius: 8px; font-weight: 600; cursor: pointer; display: flex; align-items: center; justify-content: center; gap: 8px;" onmouseover="this.style.background='#2563eb'" onmouseout="this.style.background='#3b82f6'">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                    </svg>
                    Simpan Produk
                </button>
                <button type="button" onclick="closeProductModal()" style="flex: 1; padding: 14px 24px; background: #475569; color: white; border: none; border-radius: 8px; font-weight: 600; cursor: pointer;" onmouseover="this.style.background='#64748b'" onmouseout="this.style.background='#475569'">Batal</button>
            </div>
        </form>
    </div>
</div>

<!-- Modal Tambah Stock Movement - Responsif -->
<div id="stockMovementModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); z-index: 2000; align-items: center; justify-content: center;">
    <div style="background: #1e293b; border-radius: 16px; padding: 24px; width: 90%; max-width: 500px; border: 1px solid #334155; position: relative; max-height: 95vh; display: flex; flex-direction: column;">
        
        <!-- Header -->
        <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 24px; flex-shrink: 0;">
            <h3 style="color: #e2e8f0; font-size: 18px; font-weight: 600; margin: 0;">Tambah Stock Movement</h3>
            <button onclick="closeStockMovementModal()" style="background: none; border: none; color: #94a3b8; cursor: pointer; font-size: 20px; width: 28px; height: 28px; display: flex; align-items: center; justify-content: center; border-radius: 4px;" onmouseover="this.style.background='#374151'" onmouseout="this.style.background='none'">&times;</button>
        </div>

        <!-- Form - Scrollable Content -->
        <form id="stockMovementForm" onsubmit="handleStockMovementSubmit(event)" style="flex: 1; display: flex; flex-direction: column;">
            
            <!-- Form Fields -->
            <div style="flex: 1; overflow-y: auto; margin-bottom: 20px;">
                
                <!-- Pilih Produk -->
                <div style="margin-bottom: 16px;">
                    <label style="display: block; color: #e2e8f0; font-weight: 500; margin-bottom: 6px; font-size: 14px;">Pilih Produk</label>
                    <div style="position: relative;">
                        <input type="text" id="productSearch" autocomplete="off" style="width: 100%; padding: 10px 12px; background: #334155; border: 1px solid #475569; border-radius: 6px; color: #e2e8f0; font-size: 14px; outline: none;" placeholder="Ketik SKU atau nama produk..." required>
                        <div id="productSuggestionsDropdown" class="suggestions-list" style="display: none; position: absolute; left: 0; right: 0; top: calc(100% + 4px); background: #334155; border: 1px solid #475569; border-radius: 6px; max-height: 200px; overflow-y: auto; z-index: 1000;"></div>
                    </div>
                </div>

                <!-- Jenis Movement -->
                <div style="margin-bottom: 16px;">
                    <label style="display: block; color: #e2e8f0; font-weight: 500; margin-bottom: 6px; font-size: 14px;">Jenis Movement</label>
                    <select id="movementType" style="width: 100%; padding: 10px 12px; background: #334155; border: 1px solid #475569; border-radius: 6px; color: #e2e8f0; font-size: 14px;" required>
                        <option value="">-- Pilih Jenis --</option>
                        <option value="in">Stock In (Masuk)</option>
                        <option value="out">Stock Out (Keluar)</option>
                    </select>
                </div>

                <!-- Jumlah -->
                <div style="margin-bottom: 16px;">
                    <label style="display: block; color: #e2e8f0; font-weight: 500; margin-bottom: 6px; font-size: 14px;">Jumlah</label>
                    <input type="number" id="movementQty" style="width: 100%; padding: 10px 12px; background: #334155; border: 1px solid #475569; border-radius: 6px; color: #e2e8f0; font-size: 14px; outline: none;" min="1" required placeholder="0">
                </div>

                <!-- Keterangan -->
                <div style="margin-bottom: 16px;">
                    <label style="display: block; color: #e2e8f0; font-weight: 500; margin-bottom: 6px; font-size: 14px;">Keterangan</label>
                    <select id="movementReason" style="width: 100%; padding: 10px 12px; background: #334155; border: 1px solid #475569; border-radius: 6px; color: #e2e8f0; font-size: 14px;" required>
                        <option value="">-- Pilih Keterangan --</option>
                        <option value="Restock">Restock</option>
                        <option value="Penjualan">Penjualan</option>
                        <option value="Return">Return</option>
                        <option value="Rusak">Rusak/Hilang</option>
                        <option value="Adjustment">Stock Adjustment</option>
                        <option value="Initial Stock">Initial Stock</option>
                    </select>
                </div>

                <!-- Catatan Tambahan -->
                <div style="margin-bottom: 0;">
                    <label style="display: block; color: #e2e8f0; font-weight: 500; margin-bottom: 6px; font-size: 14px;">Catatan Tambahan</label>
                    <textarea id="movementNotes" style="width: 100%; padding: 10px 12px; background: #334155; border: 1px solid #475569; border-radius: 6px; color: #e2e8f0; height: 60px; resize: none; font-size: 14px;" placeholder="Catatan optional..."></textarea>
                </div>
                
            </div>

            <!-- Buttons - Fixed Bottom -->
            <div style="display: flex; gap: 10px; flex-shrink: 0;">
                <button type="button" onclick="closeStockMovementModal()" style="flex: 1; padding: 12px 20px; background: #475569; color: white; border: none; border-radius: 6px; font-weight: 500; cursor: pointer; font-size: 14px;" onmouseover="this.style.background='#64748b'" onmouseout="this.style.background='#475569'">
                    Batal
                </button>
                <button type="submit" style="flex: 1; padding: 12px 20px; background: #3b82f6; color: white; border: none; border-radius: 6px; font-weight: 500; cursor: pointer; display: flex; align-items: center; justify-content: center; gap: 6px; font-size: 14px;" onmouseover="this.style.background='#2563eb'" onmouseout="this.style.background='#3b82f6'">
                    <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                    </svg>
                    Simpan Movement
                </button>
            </div>
        </form>
    </div>
</div>



    <!-- Payment Modal -->
    <div id="paymentModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Bayar Utang</h3>
                <button class="close-modal" onclick="closePaymentModal()">&times;</button>
            </div>
            
            <!-- Debt Info Display -->
            <div class="debt-info-card">
                <div class="debt-info-title" id="paymentDebtInfo">
                    Utang ke: -
                </div>
                <div class="debt-info-details" id="paymentDebtDetails">
                    Sisa utang: Rp 0
                </div>
            </div>

            <!-- Payment Options -->
            <div class="payment-options">
                <button type="button" class="payment-option-btn" id="partialPayBtn" onclick="setPaymentType('partial')">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                    </svg>
                    Bayar Sebagian
                </button>
                <button type="button" class="payment-option-btn" id="fullPayBtn" onclick="setPaymentType('full')">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                    </svg>
                    Bayar Lunas
                </button>
            </div>

            <form id="paymentForm">
                <input type="hidden" id="paymentDebtId">
                <input type="hidden" id="paymentType" value="partial">
                
                <div class="form-group">
                    <label class="form-label">Jumlah Pembayaran (Rp)</label>
                    <input type="number" id="paymentAmount" class="form-control" required min="0" step="0.01" placeholder="Masukkan nominal">
                    <small class="input-helper" id="paymentHelper">
                        Masukkan nominal yang ingin dibayar
                    </small>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Tanggal Pembayaran</label>
                    <input type="date" id="paymentDate" class="form-control" required>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Catatan</label>
                    <textarea id="paymentNote" class="form-control" rows="2" placeholder="Catatan pembayaran (opsional)"></textarea>
                </div>
                
                <!-- Payment Summary -->
                <div class="payment-summary" id="paymentSummary">
                    <div class="summary-row">
                        <span class="summary-label">Jumlah Bayar:</span>
                        <span class="summary-value" style="color: #e2e8f0;" id="summaryAmount">Rp 0</span>
                    </div>
                    <div class="summary-row">
                        <span class="summary-label">Sisa Setelah Bayar:</span>
                        <span class="summary-value" style="color: #ef4444;" id="summaryRemaining">Rp 0</span>
                    </div>
                    <div class="summary-row" id="statusRow">
                        <span class="summary-label">Status:</span>
                        <span class="summary-value" id="summaryStatus">Masih Berhutang</span>
                    </div>
                </div>

                <div style="display: flex; gap: 12px; margin-top: 20px;">
                    <button type="submit" class="btn btn-success" style="flex: 1;">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                        </svg>
                        <span id="submitPaymentText">Konfirmasi Bayar</span>
                    </button>
                    <button type="button" class="btn btn-secondary" onclick="closePaymentModal()">
                        Batal
                    </button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Preview Modal -->
<div id="previewModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); z-index: 3000; align-items: center; justify-content: center;">
    <div style="background: linear-gradient(135deg, #1e293b, #334155); border-radius: 20px; padding: 32px; width: 90%; max-width: 700px; max-height: 90vh; overflow-y: auto; border: 1px solid #3b82f6; box-shadow: 0 20px 60px rgba(0,0,0,0.5);">
        
        <!-- Header -->
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 24px;">
            <h3 style="color: #e2e8f0; font-size: 24px; font-weight: 700; margin: 0;">Detail Transaksi</h3>
            <button onclick="closePreview()" style="background: #ef4444; border: none; color: white; cursor: pointer; font-size: 20px; width: 32px; height: 32px; border-radius: 50%;">&times;</button>
        </div>

        <!-- Content -->
        <div style="background: rgba(59, 130, 246, 0.1); border-radius: 12px; padding: 20px; text-align: center;">
            <h4 style="color: #3b82f6; margin: 0;">🚧 Modal Preview Premium</h4>
            <p style="color: #94a3b8; margin: 8px 0;">Coming soon...</p>
        </div>

    </div>
</div>

<!-- Customer Detail Modal -->
<div id="customerDetailModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); z-index: 3000; align-items: center; justify-content: center;">
    <div style="background: #1e293b; border-radius: 16px; padding: 32px; width: 90%; max-width: 900px; max-height: 90vh; overflow-y: auto; border: 1px solid #334155;">
        
        <!-- Header -->
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 24px;">
            <h3 style="color: #e2e8f0; font-size: 24px; font-weight: 700; margin: 0;">👤 Detail Customer</h3>
            <button onclick="closeCustomerDetail()" style="background: #ef4444; border: none; color: white; cursor: pointer; font-size: 20px; width: 32px; height: 32px; border-radius: 50%;">&times;</button>
        </div>

        <!-- Content akan di-populate via JavaScript -->
        <div id="customerDetailContent"></div>

    </div>
</div>

<!-- Update Status Modal -->
<div id="updateStatusModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); z-index: 3000; align-items: center; justify-content: center;">
    <div style="background: #1e293b; border-radius: 16px; padding: 32px; width: 90%; max-width: 500px; border: 1px solid #334155;">
        
        <!-- Header -->
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 24px;">
            <h3 style="color: #e2e8f0; margin: 0;">Update Status Pengiriman</h3>
            <button onclick="closeUpdateStatusModal()" style="background: none; border: none; color: #94a3b8; cursor: pointer; font-size: 24px;">&times;</button>
        </div>

        <!-- Info -->
        <div style="background: #334155; padding: 16px; border-radius: 8px; margin-bottom: 20px;">
            <div style="color: #94a3b8; font-size: 14px;">Resi:</div>
            <div style="color: #e2e8f0; font-weight: 600;" id="modalTrackingNumber">-</div>
            <div style="color: #94a3b8; font-size: 14px; margin-top: 8px;">Customer:</div>
            <div style="color: #e2e8f0; font-weight: 600;" id="modalCustomerName">-</div>
        </div>

        <!-- Status Options -->
        <div style="margin-bottom: 20px;">
            <label style="display: block; color: #e2e8f0; margin-bottom: 8px;">Pilih Status:</label>
            <select id="newShippingStatus" style="width: 100%; padding: 12px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;">
                <option value="pending">📦 Pending</option>
                <option value="shipped">🚚 Shipped (Dikirim)</option>
                <option value="delivered">✅ Delivered (Sampai)</option>
                <option value="returned">↩️ Returned (Dikembalikan)</option>
            </select>
        </div>

        <!-- Buttons -->
        <div style="display: flex; gap: 12px;">
            <button onclick="closeUpdateStatusModal()" style="flex: 1; padding: 12px; background: #475569; color: white; border: none; border-radius: 8px; cursor: pointer;">Batal</button>
            <button onclick="confirmStatusUpdate(currentShippingData.saleId)" style="flex: 1; padding: 12px; background: #3b82f6; color: white; border: none; border-radius: 8px; cursor: pointer;">Update</button>
        </div>
    </div>
</div>


<!-- Sale Detail Modal -->
<div id="saleDetailModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); z-index: 3000; align-items: center; justify-content: center;">
    <div style="background: #1e293b; border-radius: 16px; padding: 32px; width: 90%; max-width: 900px; max-height: 90vh; overflow-y: auto; border: 1px solid #334155;">
        
        <!-- Header -->
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 24px;">
            <h3 style="color: #e2e8f0; font-size: 24px; font-weight: 700; margin: 0;">📋 Detail Transaksi</h3>
            <button onclick="closeSaleDetail()" style="background: #ef4444; border: none; color: white; cursor: pointer; font-size: 20px; width: 32px; height: 32px; border-radius: 50%;">&times;</button>
        </div>

        <!-- Content akan di-populate via JavaScript -->
        <div id="saleDetailContent"></div>

        <!-- Close the modal card and wrapper -->
        </div>
    </div>

    <!-- Chart.js library -->
    <!-- Duplicate Chart.js import removed to prevent redundant loading -->

    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script>
        // Global functions - define immediately for HTML onclick handlers
        window.toggleDebtForm = function() {
            const formCard = document.getElementById('debtFormCard');
            formCard.classList.toggle('collapsed');
        };

        window.toggleTransactionForm = function() {
            const formCard = document.getElementById('transactionFormCard');
            formCard.classList.toggle('collapsed');
        };

        window.toggleRecurringOptions = function() {
            const checkbox = document.getElementById('isRecurring');
            const options = document.getElementById('recurringOptions');
            const submitButton = document.getElementById('submitButtonText');
            
            if (checkbox.checked) {
                options.style.display = 'block';
                submitButton.textContent = 'Buat Cicilan';
                window.updateCicilanPreview();
            } else {
                options.style.display = 'none';
                submitButton.textContent = 'Tambah Utang';
            }
        };

        window.updateCicilanPreview = function() {
            const count = document.getElementById('cicilanCount').value;
            const customCount = document.getElementById('customCount').value;
            const interval = document.getElementById('cicilanInterval').value;
            const startDate = document.getElementById('debtDueDate').value;
            const amount = document.getElementById('debtAmount').value;
            
            let finalCount = count === 'custom' ? (customCount || 1) : count;
            
            const intervalText = {
                'weekly': 'mingguan',
                'monthly': 'bulanan', 
                'quarterly': '3 bulanan'
            };
            
            let previewText = `${finalCount}x cicilan ${intervalText[interval]}`;
            
            if (startDate) {
                const start = new Date(startDate);
                previewText += ` mulai ${start.toLocaleDateString('id-ID', { 
                    day: 'numeric', 
                    month: 'short', 
                    year: 'numeric' 
                })}`;
            }
            
            if (amount) {
                const totalAmount = parseFloat(amount) * finalCount;
                const formattedAmount = new Intl.NumberFormat('id-ID', {
                    style: 'currency',
                    currency: 'IDR',
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                }).format(totalAmount);
                previewText += `<br><strong>Total: ${formattedAmount}</strong>`;
            }
            
            document.getElementById('cicilanPreview').innerHTML = previewText;
        };

        // Other global functions that might be called from HTML
        window.navigateTo = function(page) {
            // This will be defined later
        };

        window.toggleSidebar = function() {
            // This will be defined later
        };

        window.switchDebtView = function(view) {
            // This will be defined later
        };

        window.handleCicilanImport = function(event) {
            const file = event.target.files[0];
            if (file) {
                handleCicilanFile(file);
            }
        };

        window.openPaymentModal = function(debtId) {
            const debt = debts.find(d => d.id === debtId);
            
            // Set debt info
            document.getElementById('paymentDebtId').value = debtId;
            document.getElementById('paymentDebtInfo').textContent = `Utang ke: ${debt.to}`;
            document.getElementById('paymentDebtDetails').innerHTML = `
                <strong>Sisa utang: ${formatCurrency(debt.remainingAmount)}</strong><br>
                ${debt.description || 'Tanpa deskripsi'} ${debt.dueDate ? '• Jatuh tempo: ' + new Date(debt.dueDate).toLocaleDateString('id-ID') : ''}
            `;
            
            // Reset form and set partial payment as default
            document.getElementById('paymentForm').reset();
            document.getElementById('paymentDate').value = new Date().toISOString().split('T')[0];
            setPaymentType('partial');
            
            // Store debt data for calculations
            window.currentDebt = debt;
            
            document.getElementById('paymentModal').classList.add('active');
        };

        window.closePaymentModal = function() {
            document.getElementById('paymentModal').classList.remove('active');
            document.getElementById('paymentForm').reset();
            window.currentDebt = null;
        };

        // Set payment type (partial or full)
        window.setPaymentType = function(type) {
            const partialBtn = document.getElementById('partialPayBtn');
            const fullBtn = document.getElementById('fullPayBtn');
            const amountInput = document.getElementById('paymentAmount');
            const helper = document.getElementById('paymentHelper');
            const submitBtn = document.getElementById('submitPaymentText');
            
            document.getElementById('paymentType').value = type;
            
            if (type === 'partial') {
                // Partial payment style
                partialBtn.className = 'payment-option-btn active';
                fullBtn.className = 'payment-option-btn';
                
                amountInput.placeholder = 'Masukkan nominal';
                amountInput.value = '';
                amountInput.readOnly = false;
                helper.textContent = 'Masukkan nominal yang ingin dibayar';
                submitBtn.textContent = 'Bayar Sebagian';
                
            } else {
                // Full payment style
                partialBtn.className = 'payment-option-btn';
                fullBtn.className = 'payment-option-btn success';
                
                if (window.currentDebt) {
                    amountInput.value = window.currentDebt.remainingAmount;
                    amountInput.readOnly = true;
                    helper.innerHTML = `<strong>Bayar penuh sisa utang: ${formatCurrency(window.currentDebt.remainingAmount)}</strong>`;
                    submitBtn.textContent = 'Bayar Lunas';
                }
            }
            
            updatePaymentSummary();
        };
        
       // Array untuk nyimpan produk yang dipilih
let selectedProducts = [];  // ← TETAP (untuk UI form sementara)
let isAddingProduct = false; // ← TETAP (untuk UI state)

function addProductToList() {
    if (isAddingProduct) {
        // Kalau udah terbuka, tutup
        closeProductSelector();
        return;
    }
    
    // Buka product selector inline
    openProductSelector();
}

// Customer data management
let customerData = [];




// Global variables for modal
let currentShippingData = {};

// Show update status modal
window.updateShippingStatus = function(saleId, trackingNumber, currentStatus, customerName) {
    currentShippingData = { saleId, trackingNumber, currentStatus, customerName };
    
    document.getElementById('modalTrackingNumber').textContent = trackingNumber;
    document.getElementById('modalCustomerName').textContent = customerName;
    document.getElementById('newShippingStatus').value = currentStatus;
    
    document.getElementById('updateStatusModal').style.display = 'flex';
};

// Close modal
window.closeUpdateStatusModal = function() {
    document.getElementById('updateStatusModal').style.display = 'none';
};

// Confirm update
window.confirmStatusUpdate = function() {
    const newStatus = document.getElementById('newShippingStatus').value;
    updateStatusToAPI(currentShippingData.saleId, currentShippingData.trackingNumber, newStatus);
    closeUpdateStatusModal();
};

let currentTextarea = null;

function insertVariable(varName) {
    // Detect which textarea is focused or use shipped as default
    const shippedTextarea = document.getElementById('templateShipped');
    const deliveredTextarea = document.getElementById('templateDelivered');
    
    let targetTextarea = currentTextarea || shippedTextarea;
    
    const variable = `{${varName}}`;
    const cursorPos = targetTextarea.selectionStart;
    const textBefore = targetTextarea.value.substring(0, cursorPos);
    const textAfter = targetTextarea.value.substring(targetTextarea.selectionEnd);
    
    targetTextarea.value = textBefore + variable + textAfter;
    targetTextarea.focus();
    targetTextarea.setSelectionRange(cursorPos + variable.length, cursorPos + variable.length);
}

// Track which textarea is focused
document.addEventListener('DOMContentLoaded', function() {
    const shippedTextarea = document.getElementById('templateShipped');
    const deliveredTextarea = document.getElementById('templateDelivered');
    
    if (shippedTextarea) {
        shippedTextarea.addEventListener('focus', () => currentTextarea = shippedTextarea);
    }
    if (deliveredTextarea) {
        deliveredTextarea.addEventListener('focus', () => currentTextarea = deliveredTextarea);
    }
});

function previewTemplate(type) {
    const template = document.getElementById(`template${type.charAt(0).toUpperCase() + type.slice(1)}`).value;
    
    // Sample data for preview
    const sampleData = {
        customer_name: 'Budi Santoso',
        products: '• Toples Kaca x2\n• Gelas Plastik x1',
        tracking_number: 'JX1234567890',
        expedisi: 'J&T Express'
    };
    
    let preview = template;
    Object.keys(sampleData).forEach(key => {
        preview = preview.replace(new RegExp(`{${key}}`, 'g'), sampleData[key]);
    });
    
    alert('PREVIEW:\n\n' + preview);
}

// WhatsApp Settings Functions
async function loadWhatsAppSettings() {
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/shipping_api_php.php?action=get-settings');
        const result = await response.json();
        
        if (result.success) {
            const settings = result.data;
            document.getElementById('fontteApiKey').value = settings.fonnte_api_key || '';
            document.getElementById('whatsappEnabled').checked = settings.whatsapp_enabled === '1';
            document.getElementById('templateShipped').value = settings.template_shipped || '';
            document.getElementById('templateDelivered').value = settings.template_delivered || '';
        }
    } catch (error) {
        console.error('Error loading WhatsApp settings:', error);
    }
}

async function testWhatsAppConnection() {
    const apiKey = document.getElementById('fontteApiKey').value;
    if (!apiKey) {
        showToast('Masukkan API key dulu!', 'error');
        return;
    }
    
    showToast('Testing connection...', 'info');
    
    // Test dengan nomor dummy
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/shipping_api_php.php', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: `action=test-whatsapp&api_key=${encodeURIComponent(apiKey)}`
        });
        
        const result = await response.json();
        if (result.success) {
            showToast('Connection berhasil!', 'success');
        } else {
            showToast('Connection gagal: ' + result.message, 'error');
        }
    } catch (error) {
        showToast('Error testing connection!', 'error');
    }
}

document.getElementById('whatsappSettingsForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const apiKey = document.getElementById('fontteApiKey').value;
    const enabled = document.getElementById('whatsappEnabled').checked ? '1' : '0';
    
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/shipping_api_php.php', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: `action=update-settings&fonnte_api_key=${encodeURIComponent(apiKey)}&whatsapp_enabled=${enabled}`
        });
        
        const result = await response.json();
        if (result.success) {
            showToast('Settings berhasil disimpan!', 'success');
        } else {
            showToast('Error: ' + result.message, 'error');
        }
    } catch (error) {
        showToast('Error saving settings!', 'error');
    }
});

async function saveTemplates() {
    const templateShipped = document.getElementById('templateShipped').value;
    const templateDelivered = document.getElementById('templateDelivered').value;
    
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/shipping_api_php.php', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: `action=update-settings&template_shipped=${encodeURIComponent(templateShipped)}&template_delivered=${encodeURIComponent(templateDelivered)}`
        });
        
        const result = await response.json();
        if (result.success) {
            showToast('Templates berhasil disimpan!', 'success');
        } else {
            showToast('Error: ' + result.message, 'error');
        }
    } catch (error) {
        showToast('Error saving templates!', 'error');
    }
}

// Notification Logs Functions
async function loadNotificationLogs() {
    const tbody = document.getElementById('notificationLogsList');
    
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/shipping_api_php.php?action=get-whatsapp-logs');
        const result = await response.json();
        
        if (result.success && result.data.length > 0) {
            tbody.innerHTML = result.data.map(log => `
                <tr style="border-bottom: 1px solid #334155;">
                    <td style="padding: 16px 20px; color: #e2e8f0;">${new Date(log.sent_at).toLocaleDateString('id-ID')}</td>
                    <td style="padding: 16px 20px; color: #e2e8f0;">${log.customer_name || '-'}</td>
                    <td style="padding: 16px 20px; color: #3b82f6;">${log.tracking_number}</td>
                    <td style="padding: 16px 20px; color: #f59e0b;">${log.message_type}</td>
                    <td style="padding: 16px 20px;">
                        <span style="padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: 500; color: white; background: ${log.status === 'sent' ? '#10b981' : '#ef4444'};">
                            ${log.status}
                        </span>
                    </td>
                    <td style="padding: 16px 20px;">
                        <button onclick="viewMessage('${log.id}')" class="btn btn-primary btn-sm">View</button>
                    </td>
                </tr>
            `).join('');
        } else {
            tbody.innerHTML = '<tr><td colspan="6" style="padding: 40px; text-align: center; color: #94a3b8;">Belum ada log notifikasi</td></tr>';
        }
    } catch (error) {
        tbody.innerHTML = '<tr><td colspan="6" style="padding: 40px; text-align: center; color: #ef4444;">Error loading logs</td></tr>';
    }
}

window.refreshNotificationLogs = function() {
    loadNotificationLogs();
};

window.viewMessage = function(logId) {
    // TODO: Show message content in modal
    showToast('Feature coming soon!', 'info');
};

// Send update to API
async function updateStatusToAPI(saleId, trackingNumber, newStatus) {
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/shipping_api_php.php', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: `action=update-status&tracking_number=${trackingNumber}&shipping_status=${newStatus}`
        });
        
        const result = await response.json();
        
        if (result.success) {
            alert('Status berhasil diupdate!');
            loadShippingList(); // Refresh table
        } else {
            alert('Error: ' + result.message);
        }
    } catch (error) {
        alert('Error updating status');
        console.error(error);
    }
}

function getPaymentName(method) {
    const names = {
        'cod': 'Cash On Delivery',
        'transfer': 'Transfer Bank',
        'ewallet': 'E-Wallet',
        'qris': 'QRIS'
    };
    return names[method] || method || '-';
}

function getStatusName(status) {
    const names = {
        'pending': 'Pending',
        'shipped': 'Sedang Dikirim', 
        'delivered': 'Delivered',       // <- ubah ini
        'returned': 'Dikembalikan'
    };
    return names[status] || status || 'pending';
}

function getStatusColor(status) {
    const colors = {
        'pending': '#f59e0b',      // kuning
        'shipped': '#3b82f6',      // biru  
        'delivered': '#10b981',    // hijau
        'returned': '#ef4444'      // merah
    };
    return colors[status] || '#6b7280'; // default abu-abu
}


// Load shipping list from API
async function loadShippingList() {
    console.log('loadShippingList called');
    const tbody = document.getElementById('shippingList');
    if (!tbody) {
        console.log('tbody not found');
        return;
    }
    
    try {
        tbody.innerHTML = '<tr><td colspan="6" style="padding: 40px; text-align: center; color: #94a3b8;">Loading...</td></tr>';
        
        console.log('Fetching data from API...');
        const response = await fetch('https://tagihan.ersetsolution.my.id/shipping_api_php.php?action=get-shipping-list');
        const result = await response.json();
        
        console.log('API Response:', result);
        
        if (result.success) {
            if (result.data && result.data.length > 0) {
                tbody.innerHTML = result.data.map(item => `
                    <tr style="border-bottom: 1px solid #334155;">
                        <td style="padding: 16px 20px; color: #e2e8f0;">${new Date(item.sale_date).toLocaleDateString('id-ID')}</td>
                        <td style="padding: 16px 20px; color: #e2e8f0;">${item.customer_name}</td>
                        <td style="padding: 16px 20px; color: #3b82f6; font-weight: 600;">${item.tracking_number || '-'}</td>
                        <td style="padding: 16px 20px; color: #f59e0b;">${getPaymentName(item.payment_method)}</td>
                        <td style="padding: 16px 20px;">
                            <span style="padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: 500; color: white; background: ${getStatusColor(item.shipping_status)};">
    ${getStatusName(item.shipping_status)}
</span>
                        </td>
                        <td style="padding: 16px 20px;">
                            <button onclick="updateShippingStatus('${item.sale_id}', '${item.tracking_number}', '${item.shipping_status}')" class="btn btn-primary btn-sm">Update Status</button>
                        </td>
                    </tr>
                `).join('');
            } else {
                tbody.innerHTML = '<tr><td colspan="6" style="padding: 40px; text-align: center; color: #94a3b8;">Belum ada data pengiriman.<br><small>Data akan muncul setelah ada penjualan dengan tracking number.</small></td></tr>';
            }
        } else {
            tbody.innerHTML = `<tr><td colspan="6" style="padding: 40px; text-align: center; color: #ef4444;">Error: ${result.message}</td></tr>`;
        }
        
    } catch (error) {
        console.error('Error loading shipping list:', error);
        tbody.innerHTML = '<tr><td colspan="6" style="padding: 40px; text-align: center; color: #ef4444;">Error loading data</td></tr>';
    }
}

// Refresh shipping list
window.refreshShippingList = function() {
    console.log('Refresh button clicked');
    loadShippingList();
};

// Switch shipping tab function
window.switchShippingTab = function(tab) {
    console.log('Switching to tab:', tab);
    
    // Remove active state from all tabs
    document.querySelectorAll('#shipping .modern-tab').forEach(t => t.classList.remove('active'));
    // Hide all tab contents
    document.querySelectorAll('[id^="shippingTabContent-"]').forEach(el => {
        el.style.display = 'none';
    });
    
    // Activate selected tab and show content
    const selectedTab = document.getElementById('shippingTab-' + tab);
    if (selectedTab) selectedTab.classList.add('active');
    
    const content = document.getElementById('shippingTabContent-' + tab);
    if (content) content.style.display = '';
    
    // Load specific tab content
    if (tab === 'tracking') {
        console.log('Loading tracking tab');
        loadShippingList();
    }
    if (tab === 'whatsapp') {
        console.log('Loading whatsapp tab');
        loadWhatsAppSettings();  // <-- Hapus comment ini
    }
    if (tab === 'logs') {
        console.log('Loading logs tab');
        loadNotificationLogs();  // <-- Hapus comment ini
    }
};




// Update CRM stats - Database version
async function updateCRMStats() {
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/customers_api.php');
        customerData = await response.json();
        
        // Map database fields to expected format
        customerData = customerData.map(c => ({
            name: c.name,
            phone: c.phone,
            address: c.address,
            orderCount: parseInt(c.order_count) || 0,
            totalSpent: parseFloat(c.total_revenue) || 0,
            lastOrder: c.last_order_date,
            firstOrder: c.first_order_date,
            status: c.status || 'active',
            orders: c.orders || []
        }));
        
        // Filter customer yang punya orders
        const activeCustomers = customerData.filter(c => c.orderCount > 0 && c.totalSpent > 0);
        
        const totalCustomers = activeCustomers.length;
        const repeatCustomers = activeCustomers.filter(c => c.orderCount > 1).length;
        const repeatRate = totalCustomers > 0 ? ((repeatCustomers / totalCustomers) * 100).toFixed(1) : 0;
        
        const totalRevenue = activeCustomers.reduce((sum, c) => sum + c.totalSpent, 0);
        const avgOrderValue = totalCustomers > 0 ? totalRevenue / activeCustomers.reduce((sum, c) => sum + c.orderCount, 0) : 0;
        
        document.getElementById('totalCustomers').textContent = totalCustomers;
        document.getElementById('repeatCustomers').textContent = repeatCustomers;
        document.getElementById('repeatRate').textContent = `${repeatRate}% repeat rate`;
        document.getElementById('avgOrderValue').textContent = formatCurrency(avgOrderValue);
        document.getElementById('totalCustomerRevenue').textContent = formatCurrency(totalRevenue);
        
        // Update CRM badge
        document.getElementById('crmBadge').textContent = totalCustomers;
        
    } catch (error) {
        console.error('Error loading customer stats:', error);
        // Fallback to empty state
        customerData = [];
        document.getElementById('totalCustomers').textContent = '0';
        document.getElementById('repeatCustomers').textContent = '0';
        document.getElementById('repeatRate').textContent = '0% repeat rate';
        document.getElementById('avgOrderValue').textContent = formatCurrency(0);
        document.getElementById('totalCustomerRevenue').textContent = formatCurrency(0);
        document.getElementById('crmBadge').textContent = '0';
    }
}

// Render customers list - Database version
async function renderCustomersList() {
    const tbody = document.getElementById('customersList');
    if (!tbody) return;
    
    try {
        // Load fresh data from database
        const response = await fetch('https://tagihan.ersetsolution.my.id/customers_api.php');
        customerData = await response.json();
        
        // Map database fields to expected format
        customerData = customerData.map(c => ({
            name: c.name,
            phone: c.phone,
            address: c.address,
            orderCount: parseInt(c.order_count) || 0,
            totalSpent: parseFloat(c.total_revenue) || 0,
            lastOrder: c.last_order_date,
            firstOrder: c.first_order_date,
            status: c.status || 'active',
            orders: c.orders || []
        }));
        
        // Filter customer yang punya orders
        const activeCustomers = customerData.filter(customer => 
            customer.orderCount > 0 && customer.totalSpent > 0
        );
        
        if (activeCustomers.length === 0) {
            tbody.innerHTML = '<tr><td colspan="6" style="padding: 40px; text-align: center; color: #94a3b8;">Belum ada data pelanggan.<br><small>Buat transaksi penjualan dulu di menu "Penjualan"</small></td></tr>';
            return;
        }
        
        // Setup search functionality
        const searchInput = document.getElementById('searchCustomers');
        if (searchInput) {
            searchInput.addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase().trim();
                let filteredCustomers = [...activeCustomers];
                
                if (searchTerm) {
                    filteredCustomers = activeCustomers.filter(customer => {
                        return customer.name.toLowerCase().includes(searchTerm) ||
                               customer.phone.toLowerCase().includes(searchTerm) ||
                               (customer.address && customer.address.toLowerCase().includes(searchTerm));
                    });
                }
                
                if (filteredCustomers.length === 0) {
                    tbody.innerHTML = '<tr><td colspan="6" style="padding: 40px; text-align: center; color: #94a3b8;">Tidak ada customer yang cocok dengan pencarian.</td></tr>';
                    return;
                }
                
                // Sort and render filtered results
                const sortedCustomers = filteredCustomers.sort((a, b) => b.totalSpent - a.totalSpent);
                tbody.innerHTML = sortedCustomers.map(customer => {
                    const lastOrderDate = customer.lastOrder ? new Date(customer.lastOrder).toLocaleDateString('id-ID') : '-';
                    const customerType = customer.orderCount > 3 ? 'VIP' : customer.orderCount > 1 ? 'REPEAT' : 'NEW';
                    const typeColor = customerType === 'VIP' ? '#f59e0b' : customerType === 'REPEAT' ? '#10b981' : '#3b82f6';
                    
                    return `
                        <tr style="border-bottom: 1px solid #334155;">
                            <td style="padding: 16px 20px;">
                                <div style="color: #e2e8f0; font-weight: 600;">${customer.name}</div>
                                <div style="color: #94a3b8; font-size: 14px;">${customer.phone}</div>
                            </td>
                            <td style="padding: 16px 20px; color: #3b82f6; font-weight: 600;">${customer.orderCount}</td>
                            <td style="padding: 16px 20px; color: #10b981; font-weight: 600;">${formatCurrency(customer.totalSpent)}</td>
                            <td style="padding: 16px 20px; color: #94a3b8;">${lastOrderDate}</td>
                            <td style="padding: 16px 20px;">
                                <span style="padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: 500; color: white; background: ${typeColor};">
                                    ${customerType}
                                </span>
                            </td>
                            <td style="padding: 16px 20px;">
                                <div style="display: flex; gap: 8px;">
                                    <button onclick="viewCustomerDetail('${customer.phone}')" class="btn btn-primary btn-sm">Detail</button>
                                    <a href="https://wa.me/${customer.phone.replace(/\D/g, '')}?text=Halo%20${encodeURIComponent(customer.name)}%2C%20ada%20yang%20bisa%20kami%20bantu%3F" target="_blank" class="btn btn-success btn-sm" style="text-decoration: none; color: white;">WhatsApp</a>
                                </div>
                            </td>
                        </tr>
                    `;
                }).join('');
            });
        }
        
        // Sort by total spent (descending) - initial render
        const sortedCustomers = [...activeCustomers].sort((a, b) => b.totalSpent - a.totalSpent);
        
        tbody.innerHTML = sortedCustomers.map(customer => {
            const lastOrderDate = customer.lastOrder ? new Date(customer.lastOrder).toLocaleDateString('id-ID') : '-';
            const customerType = customer.orderCount > 3 ? 'VIP' : customer.orderCount > 1 ? 'REPEAT' : 'NEW';
            const typeColor = customerType === 'VIP' ? '#f59e0b' : customerType === 'REPEAT' ? '#10b981' : '#3b82f6';
            
            return `
                <tr style="border-bottom: 1px solid #334155;">
                    <td style="padding: 16px 20px;">
                        <div style="color: #e2e8f0; font-weight: 600;">${customer.name}</div>
                        <div style="color: #94a3b8; font-size: 14px;">${customer.phone}</div>
                    </td>
                    <td style="padding: 16px 20px; color: #3b82f6; font-weight: 600;">${customer.orderCount}</td>
                    <td style="padding: 16px 20px; color: #10b981; font-weight: 600;">${formatCurrency(customer.totalSpent)}</td>
                    <td style="padding: 16px 20px; color: #94a3b8;">${lastOrderDate}</td>
                    <td style="padding: 16px 20px;">
                        <span style="padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: 500; color: white; background: ${typeColor};">
                            ${customerType}
                        </span>
                    </td>
                    <td style="padding: 16px 20px;">
                        <div style="display: flex; gap: 8px;">
                            <button onclick="viewCustomerDetail('${customer.phone}')" class="btn btn-primary btn-sm">Detail</button>
                            <a href="https://wa.me/${customer.phone.replace(/\D/g, '')}?text=Halo%20${encodeURIComponent(customer.name)}%2C%20ada%20yang%20bisa%20kami%20bantu%3F" target="_blank" class="btn btn-success btn-sm" style="text-decoration: none; color: white;">WhatsApp</a>
                        </div>
                    </td>
                </tr>
            `;
        }).join('');
        
    } catch (error) {
        console.error('Error loading customers:', error);
        tbody.innerHTML = '<tr><td colspan="6" style="padding: 40px; text-align: center; color: #ef4444;">Error loading customer data</td></tr>';
    }
}

// Search customers functionality - tetap sama, cuma panggil renderCustomersList
function setupCustomerSearch() {
    const searchInput = document.getElementById('searchCustomers');
    if (!searchInput) return;
    
    searchInput.addEventListener('input', function() {
        // Search logic udah ada di dalam renderCustomersList
        // Jadi gak perlu function terpisah
    });
}

function filterAndRenderCustomers(searchTerm = '') {
    // Function ini gak diperlukan lagi karena search logic udah di dalam renderCustomersList
    // Tapi tetap ada biar gak error kalo ada yang manggil
    renderCustomersList();
}

// View customer detail modal
window.viewCustomerDetail = function(phone) {
    const customer = customerData.find(c => c.phone === phone);
    if (!customer) return;
    
    // Populate modal dengan data lengkap
    populateCustomerDetail(customer);
    
    // Show modal
    document.getElementById('customerDetailModal').style.display = 'flex';
};

window.closeCustomerDetail = function() {
    document.getElementById('customerDetailModal').style.display = 'none';
};

function populateCustomerDetail(customer) {
    const content = document.getElementById('customerDetailContent');
    
    // Calculate stats - FIX FIELD MAPPING
    const paidOrders = customer.orders.filter(o => o.payment_status === 'paid');
    const pendingOrders = customer.orders.filter(o => o.payment_status === 'pending');
    const avgOrderValue = customer.orderCount > 0 ? customer.totalSpent / customer.orderCount : 0;
    
    // Get favorite products - FIX FIELD MAPPING
    const productCount = {};
    customer.orders.forEach(order => {
        if (order.products && Array.isArray(order.products)) {
            order.products.forEach(product => {
                const productName = product.product_name || product.name || 'Unknown Product';
                const productQty = product.quantity || product.qty || 0;
                productCount[productName] = (productCount[productName] || 0) + productQty;
            });
        }
    });
    
    const favoriteProducts = Object.entries(productCount)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 3);
    
    // Customer type
    const customerType = customer.orderCount > 3 ? 'VIP Customer' : customer.orderCount > 1 ? 'Repeat Customer' : 'New Customer';
    const typeColor = customer.orderCount > 3 ? '#f59e0b' : customer.orderCount > 1 ? '#10b981' : '#3b82f6';
    
    content.innerHTML = `
        <!-- Customer Info Card -->
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 24px;">
            <!-- Basic Info -->
            <div style="background: rgba(59, 130, 246, 0.1); border-radius: 12px; padding: 20px; border: 1px solid rgba(59, 130, 246, 0.3);">
                <h4 style="color: #3b82f6; margin: 0 0 16px 0;">📋 Informasi Dasar</h4>
                <div style="space-y: 8px;">
                    <p style="color: #e2e8f0; margin: 8px 0;"><strong>Nama:</strong> ${customer.name}</p>
                    <p style="color: #e2e8f0; margin: 8px 0;"><strong>Phone:</strong> ${customer.phone}</p>
                    <p style="color: #e2e8f0; margin: 8px 0; font-size: 14px; line-height: 1.4;"><strong>Alamat:</strong> ${customer.address || 'Tidak ada alamat'}</p>
                    <p style="color: #e2e8f0; margin: 8px 0;"><strong>Tipe:</strong> <span style="color: ${typeColor}; font-weight: 600;">${customerType}</span></p>
                </div>
            </div>
            
            <!-- Order Stats -->
            <div style="background: rgba(16, 185, 129, 0.1); border-radius: 12px; padding: 20px; border: 1px solid rgba(16, 185, 129, 0.3);">
                <h4 style="color: #10b981; margin: 0 0 16px 0;">📊 Statistik Pesanan</h4>
                <div style="space-y: 8px;">
                    <p style="color: #e2e8f0; margin: 8px 0;"><strong>Total Orders:</strong> ${customer.orderCount}</p>
                    <p style="color: #e2e8f0; margin: 8px 0;"><strong>Paid Orders:</strong> ${paidOrders.length}</p>
                    <p style="color: #e2e8f0; margin: 8px 0;"><strong>Pending Orders:</strong> ${pendingOrders.length}</p>
                    <p style="color: #e2e8f0; margin: 8px 0;"><strong>Avg Order Value:</strong> ${formatCurrency(avgOrderValue)}</p>
                    <p style="color: #e2e8f0; margin: 8px 0;"><strong>Lifetime Value:</strong> <span style="color: #10b981; font-weight: 600;">${formatCurrency(customer.totalSpent)}</span></p>
                </div>
            </div>
        </div>
        
        <!-- Favorite Products -->
${favoriteProducts.length > 0 ? `
<div style="background: rgba(139, 92, 246, 0.1); border-radius: 12px; padding: 20px; margin-bottom: 24px; border: 1px solid rgba(139, 92, 246, 0.3);">
    <h4 style="color: #8b5cf6; margin: 0 0 16px 0; display: flex; align-items: center; gap: 8px;">
        <span style="font-size: 20px;">⭐</span>
        <span>Produk Favorit</span>
    </h4>
    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 12px;">
        ${favoriteProducts.map(([productName, qty]) => `
            <div style="background: #1e293b; padding: 12px; border-radius: 8px; display: flex; justify-content: space-between; align-items: center;">
                <div style="color: #e2e8f0; font-weight: 600;">${productName}</div>
                <div style="color: #94a3b8; font-size: 14px; white-space: nowrap;">${qty}x dibeli</div>
            </div>
        `).join('')}
    </div>
</div>
` : ''}
        
        <!-- Order History -->
        <div style="background: #0f172a; border-radius: 12px; padding: 20px; border: 1px solid #334155;">
            <h4 style="color: #60a5fa; margin: 0 0 16px 0;">🛍️ Riwayat Pesanan (${customer.orders.length})</h4>
            ${customer.orders.sort((a, b) => new Date(b.sale_date) - new Date(a.sale_date)).map(order => {
                const orderDate = new Date(order.sale_date).toLocaleDateString('id-ID');
                const statusColor = order.payment_status === 'paid' ? '#10b981' : order.payment_status === 'return' ? '#ef4444' : '#f59e0b';
                const platformNames = {
                    'tiktokshop': 'TikTok Shop',
                    'shopee': 'Shopee', 
                    'tokopedia': 'Tokopedia',
                    'other': 'Marketplace Lain'
                };
                
                return `
                    <div style="background: #1e293b; border-radius: 8px; padding: 16px; margin-bottom: 12px; border-left: 4px solid ${statusColor};">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                            <div>
                                <div style="color: #e2e8f0; font-weight: 600;">${orderDate} • ${platformNames[order.platform] || order.platform}</div>
                                <div style="color: #94a3b8; font-size: 14px;">Order: ${order.order_number || '-'} • Resi: ${order.tracking_number || '-'}</div>
                            </div>
                            <div style="text-align: right;">
                                <div style="color: #10b981; font-weight: bold; font-size: 16px;">${formatCurrency(order.total_amount)}</div>
                                <div style="color: ${statusColor}; font-size: 12px; text-transform: uppercase; font-weight: 600;">${order.payment_status || 'pending'}</div>
                            </div>
                        </div>
                        ${order.products && order.products.length > 0 ? `
                            <div style="background: #0f172a; padding: 12px; border-radius: 6px;">
                                <div style="color: #94a3b8; font-size: 12px; margin-bottom: 8px;">PRODUK:</div>
                                ${order.products.map(product => `
                                    <div style="color: #e2e8f0; font-size: 14px; margin-bottom: 4px;">• ${product.product_name || 'Unknown Product'} x${product.quantity || 0} - ${formatCurrency(product.total_amount || 0)}</div>
                                `).join('')}
                            </div>
                        ` : ''}
                    </div>
                `;
            }).join('')}
        </div>
        
        <!-- Actions -->
        <div style="display: flex; gap: 12px; justify-content: center; margin-top: 24px;">
            <button onclick="closeCustomerDetail()" class="btn btn-secondary">Tutup</button>
            <a href="https://wa.me/${customer.phone.replace(/\D/g, '')}?text=Halo%20${encodeURIComponent(customer.name)}%2C%20terima%20kasih%20sudah%20berbelanja%20di%20toko%20kami!" target="_blank" class="btn btn-success">
                💬 Chat WhatsApp
            </a>
        </div>
    `;
}

// Delete transaction function
window.deleteTransaction = async function(transactionId) {
    if (!confirm('Hapus transaksi ini?')) {
        return;
    }
    
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/transactions_api.php', {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id: transactionId })
        });
        
        if (response.ok) {
            // Refresh data
            updateAllData();
            renderRecentTransactions();
            if (currentPage === 'transactions') renderTransactions();
            showAlert('Transaksi berhasil dihapus!', 'success');
        } else {
            showAlert('Error menghapus transaksi!', 'error');
        }
    } catch (error) {
        showAlert('Error koneksi!', 'error');
    }
};


async function saveManagedSale() {
    // Validasi basic dulu
    const customerName = document.getElementById('customerName').value;
    const customerPhone = document.getElementById('customerPhone').value;
    
    if (!customerName || !customerPhone) {
        showToast('Nama customer dan telepon wajib diisi!', 'error');
        return;
    }
    
    if (selectedProducts.length === 0) {
        showToast('Tambahkan minimal 1 produk!', 'error');
        return;
    }
    
    const saleData = {
        customerName: customerName,
        customerPhone: customerPhone,
        customerAddress: document.getElementById('customerAddress').value,
        date: document.getElementById('saleDate').value,
        platform: document.getElementById('salePlatform').value,
        orderNumber: document.getElementById('orderNumber').value,
        trackingNumber: document.getElementById('trackingNumber').value,
        expedisi: document.getElementById('expedisi').value,
        paymentMethod: document.getElementById('paymentMethod').value,
        paymentStatus: document.getElementById('paymentStatus').value,
        products: [...selectedProducts],
        totalAmount: selectedProducts.reduce((sum, p) => sum + p.total, 0),
        notes: document.getElementById('saleDescription').value
    };
    
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/sales_api.php', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(saleData)
        });
        
        if (response.ok) {
            resetSalesForm();
            updateAllData();
            
            // Refresh managed sales data
            await loadManagedSales();
            if (currentPage === 'manageSales') renderManagedSales();
            await updateManagedSalesBadge();
            
            // Refresh analytics jika lagi di page analytics
            if (currentPage === 'analytics') await updateAnalytics();
            
            // Refresh inventory data (karena stock berkurang)
            if (typeof loadInventory === 'function') await loadInventory();
            if (typeof updateInventoryBadge === 'function') await updateInventoryBadge();
            if (currentPage === 'inventory') {
                renderInventory();
                if (typeof renderStockMovements === 'function') renderStockMovements();
                if (typeof renderInventoryReport === 'function') renderInventoryReport();
            }
            
            // Refresh customer data (auto-create/update customer)
            if (typeof updateCRMStats === 'function') await updateCRMStats();
            if (currentPage === 'crm') renderCustomersList();
            
            showToast('Transaksi berhasil disimpan!', 'success');
        } else {
            showToast('Error menyimpan transaksi!', 'error');
        }
    } catch (error) {
        showToast('Error koneksi!', 'error');
    }
}



// Update badge dari database
async function updateManagedSalesBadge() {
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/sales_api.php');
        const sales = await response.json();
        
        const badge = document.getElementById('manageSalesBadge');
        if (badge) badge.textContent = sales.length;
    } catch (error) {
        console.error('Error updating sales badge:', error);
        const badge = document.getElementById('manageSalesBadge');
        if (badge) badge.textContent = '0';
    }
}

// Render managed sales dari database
async function renderManagedSales() {
    const list = document.getElementById('manageSalesList');
    if (!list) return;
    
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/sales_api.php');
        const managedSales = await response.json();
        
        // Setup search functionality
        const searchInput = document.getElementById('searchManageSales');
        if (searchInput) {
            searchInput.addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase().trim();
                let filteredSales = [...managedSales];
                
                if (searchTerm) {
                    filteredSales = managedSales.filter(sale => {
                        return sale.customer_name.toLowerCase().includes(searchTerm) ||
                               sale.customer_phone.toLowerCase().includes(searchTerm) ||
                               sale.platform.toLowerCase().includes(searchTerm) ||
                               (sale.order_number && sale.order_number.toLowerCase().includes(searchTerm)) ||
                               (sale.tracking_number && sale.tracking_number.toLowerCase().includes(searchTerm));
                    });
                }
                
                renderSalesTable(filteredSales, list);
            });
        }
        
        // Initial render
        renderSalesTable(managedSales, list);
        
    } catch (error) {
        console.error('Error loading sales:', error);
        list.innerHTML = '<tr><td colspan="7" style="padding: 40px; text-align: center; color: #ef4444;">Error loading sales data</td></tr>';
    }
}

// Helper function untuk render tabel
function renderSalesTable(sales, container) {
    if (sales.length === 0) {
        container.innerHTML = '<tr><td colspan="7" style="padding: 40px; text-align: center; color: #94a3b8;">Belum ada transaksi penjualan.<br><small>Transaksi dari form penjualan akan muncul di sini</small></td></tr>';
        return;
    }
    
    const platformNames = {
        'tiktokshop': 'TikTok Shop',
        'shopee': 'Shopee', 
        'tokopedia': 'Tokopedia',
        'other': 'Marketplace Lain'
    };
    
    const statusNames = {
        'pending': 'Pending',
        'paid': 'Paid',
        'return': 'Return'
    };
    
    container.innerHTML = sales.map(sale => {
        const date = new Date(sale.sale_date).toLocaleDateString('id-ID');
        const firstProduct = sale.products && sale.products[0] ? sale.products[0] : null;
        
        return `
            <tr style="border-bottom: 1px solid #334155;">
                <td style="padding: 16px 20px; color: #e2e8f0;">${date}</td>
                <td style="padding: 16px 20px; color: #e2e8f0;">${sale.customer_name}<br><small style="color: #94a3b8;">${sale.customer_phone}</small></td>
                <td style="padding: 16px 20px; color: #e2e8f0;">${firstProduct ? firstProduct.product_name + ' x' + firstProduct.quantity : 'N/A'}<br><small style="color: #94a3b8;">${sale.products ? sale.products.length : 0} item(s)</small></td>
                <td style="padding: 16px 20px; color: #e2e8f0;">${platformNames[sale.platform] || sale.platform}</td>
                <td style="padding: 16px 20px; color: #10b981; text-align: right; font-weight: 600;">${formatCurrency(sale.total_amount)}</td>
                <td style="padding: 16px 20px;">
                    <span style="padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: 500; 
                        ${sale.payment_status === 'paid' ? 'background: #10b981; color: white;' : 
                          sale.payment_status === 'return' ? 'background: #ef4444; color: white;' : 
                          'background: #f59e0b; color: white;'}">
                        ${statusNames[sale.payment_status] || 'Pending'}
                    </span>
                </td>
                <td style="padding: 16px 20px; text-align: center;">
                    <div style="display: flex; gap: 8px; justify-content: center;">
                        <button onclick="viewSaleDetail('${sale.id}')" class="btn btn-primary btn-sm">Detail</button>
                        <button onclick="deleteManagedSale('${sale.id}')" class="btn btn-danger btn-sm">Hapus</button>
                    </div>
                </td>
            </tr>
        `;
    }).join('');
}


// Update Sale Status Function
window.updateSaleStatus = async function(saleId) {
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/sales_api.php');
        const sales = await response.json();
        const sale = sales.find(s => s.id == saleId);
        
        if (!sale) {
            showToast('Sale not found!', 'error');
            return;
        }
        
        const currentStatus = sale.payment_status;
        const statusOptions = {
            'pending': 'Pending',
            'paid': 'Paid', 
            'return': 'Return'
        };
        
        // Create custom modal
        const modalHtml = `
            <div id="statusUpdateModal" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); z-index: 3000; align-items: center; justify-content: center;">
                <div style="background: #1e293b; border-radius: 16px; padding: 32px; width: 90%; max-width: 400px; border: 1px solid #334155;">
                    <h3 style="color: #e2e8f0; margin: 0 0 20px 0; text-align: center;">Update Payment Status</h3>
                    
                    <div style="margin-bottom: 20px;">
                        <p style="color: #94a3b8; margin-bottom: 12px;">Current: <strong style="color: #f59e0b;">${statusOptions[currentStatus]}</strong></p>
                        <label style="display: block; color: #e2e8f0; margin-bottom: 8px;">New Status:</label>
                        <select id="newStatusSelect" style="width: 100%; padding: 12px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;">
                            ${Object.entries(statusOptions).map(([value, label]) => 
                                `<option value="${value}" ${currentStatus === value ? 'selected' : ''}>${label}</option>`
                            ).join('')}
                        </select>
                    </div>
                    
                    <div style="display: flex; gap: 12px;">
                        <button onclick="cancelStatusUpdate()" style="flex: 1; padding: 12px; background: #475569; color: white; border: none; border-radius: 8px; cursor: pointer;">Batal</button>
                        <button onclick="confirmPaymentStatusUpdate('${saleId}')" style="flex: 1; padding: 12px; background: #3b82f6; color: white; border: none; border-radius: 8px; cursor: pointer;">Update</button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', modalHtml);
        
    } catch (error) {
        console.error('Error loading sale:', error);
        showToast('Error loading sale data!', 'error');
    }
};

window.cancelStatusUpdate = function() {
    const modal = document.getElementById('statusUpdateModal');
    if (modal) modal.remove();
};


window.syncAllShippingStatus = async function() {
    try {
        showToast('Syncing all tracking status...', 'info');
        
        const response = await fetch('https://tagihan.ersetsolution.my.id/shipping_api_php.php', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: 'action=sync-all'
        });
        
        const result = await response.json();
        
        if (result.success) {
    showToast(`Sync completed! ${result.data.updated_count} statuses updated`, 'success');
    loadShippingList(); // Refresh table
    
    // Refresh managed sales data (payment status mungkin berubah)
    if (typeof renderManagedSales === 'function') {
        renderManagedSales();
        updateAllData();
        renderRecentTransactions();
    }
} else {
    showToast('Sync failed: ' + result.message, 'error');
}
} catch (error) {
    showToast('Error during sync', 'error');
}
};

window.confirmPaymentStatusUpdate = async function(saleId) {
    const newStatus = document.getElementById('newStatusSelect').value;
    
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/sales_api.php', {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
                id: saleId, 
                paymentStatus: newStatus 
            })
        });
        
        if (response.ok) {
            // Refresh managed sales data
            renderManagedSales();
            updateAllData();
            
            // Refresh analytics if on analytics page
            if (currentPage === 'analytics') await updateAnalytics();
            
            showToast(`Status berhasil diubah ke ${newStatus.toUpperCase()}!`, 'success');
            cancelStatusUpdate(); // Close modal
        } else {
            const errorData = await response.json();
            showToast('Error: ' + (errorData.error || 'Failed to update status'), 'error');
        }
    } catch (error) {
        console.error('Error updating payment status:', error);
        showToast('Error koneksi!', 'error');
    }
};


window.confirmStatusUpdate = async function(saleId) {
    // Deteksi modal mana yang sedang aktif
    const isShippingModal = document.getElementById('updateStatusModal') && 
                           document.getElementById('updateStatusModal').style.display !== 'none';
    const isPaymentModal = document.getElementById('statusUpdateModal') && 
                          document.getElementById('statusUpdateModal').style.display !== 'none';
    
    if (isShippingModal) {
        // Shipping status update (butuh tracking number)
        const newStatus = document.getElementById('newShippingStatus').value;
        
        if (!currentShippingData.trackingNumber) {
            showToast('Data tracking number tidak ditemukan!', 'error');
            return;
        }
        
        try {
            const response = await fetch('https://tagihan.ersetsolution.my.id/shipping_api_php.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `action=update-status&tracking_number=${currentShippingData.trackingNumber}&shipping_status=${newStatus}`
            });
            
            const result = await response.json();
            
            if (result.success) {
                loadShippingList();
                updateAllData();
                showToast(`Status berhasil diubah ke ${newStatus.toUpperCase()}!`, 'success');
                closeUpdateStatusModal();
            } else {
                showToast('Error: ' + result.message, 'error');
            }
        } catch (error) {
            showToast('Error koneksi!', 'error');
        }
        
    } else if (isPaymentModal) {
        // Payment status update (butuh saleId) 
        const newStatus = document.getElementById('newStatusSelect').value;
        
        try {
            const response = await fetch('https://tagihan.ersetsolution.my.id/sales_api.php', {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    id: saleId, 
                    paymentStatus: newStatus 
                })
            });
            
            if (response.ok) {
                renderManagedSales();
                updateAllData();
                showToast(`Status berhasil diubah ke ${newStatus.toUpperCase()}!`, 'success');
                cancelStatusUpdate();
            } else {
                showToast('Error updating payment status', 'error');
            }
        } catch (error) {
            showToast('Error koneksi!', 'error');
        }
    }
};


async function viewSaleDetail(saleId) {
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/sales_api.php');
        const sales = await response.json();
        const sale = sales.find(s => s.id == saleId);
        
        if (!sale) {
            showToast('Sale not found!', 'error');
            return;
        }
        
        populateSaleDetail(sale);
        document.getElementById('saleDetailModal').style.display = 'flex';
    } catch (error) {
        showToast('Error loading sale detail!', 'error');
    }
}

function closeSaleDetail() {
    document.getElementById('saleDetailModal').style.display = 'none';
}


function populateSaleDetail(sale) {
    const content = document.getElementById('saleDetailContent');
    
    // Format platform dan status
    const platformNames = {
        'tiktokshop': 'TikTok Shop',
        'shopee': 'Shopee', 
        'tokopedia': 'Tokopedia',
        'other': 'Marketplace Lain'
    };
    
    const statusNames = {
        'pending': 'Pending',
        'paid': 'Paid',
        'return': 'Return'
    };
    
    // Format payment methods
    const paymentMethodNames = {
        'cod': 'Cash On Delivery',
        'transfer': 'Transfer Bank',
        'ewallet': 'E-Wallet (OVO/DANA/GoPay)',
        'qris': 'QRIS',
        'marketplace_wallet': 'Saldo Marketplace'
    };
    
    // Format expedisi names
    const expedisiNames = {
        'jne': 'JNE',
        'jnt': 'J&T Express',
        'sicepat': 'SiCepat',
        'anteraja': 'AnterAja',
        'spx': 'Shopee Express',
        'gosend': 'GoSend',
        'grab': 'GrabExpress',
        'pickup': 'Pickup/COD'
    };
    
    // Calculate financial data
    const totalSales = sale.products.reduce((sum, p) => sum + (p.sale_price * p.quantity), 0);
    const totalHpp = sale.products.reduce((sum, p) => sum + (p.purchase_price * p.quantity), 0);
    const totalProfit = totalSales - totalHpp;
    const margin = totalSales > 0 ? Math.round((totalProfit / totalSales) * 100) : 0;
    
    content.innerHTML = `
        <!-- Header -->
        <div style="display: flex; align-items: center; justify-content: space-between; gap: 16px; margin-bottom: 24px; padding: 32px; background: rgba(96, 165, 250, 0.08); border-radius: 22px 22px 0 0; border-bottom: 1px solid rgba(255, 255, 255, 0.08);">
            <div style="display: flex; align-items: center; gap: 12px;">
                <div style="width: 34px; height: 34px; border-radius: 10px; display: grid; place-items: center; background: rgba(99, 102, 241, 0.18); border: 1px solid rgba(99, 102, 241, 0.35);">
                    📄
                </div>
                <div style="font-weight: 900; font-size: 26px; letter-spacing: 0.2px; color: #dbe7ff;">Detail Transaksi</div>
            </div>
            <div style="padding: 8px 12px; border-radius: 999px; font-weight: 900; font-size: 12px; letter-spacing: 0.4px; border: 1px solid; ${
                sale.payment_status === 'paid' ? 
                'color: #22c55e; background: rgba(34, 197, 94, 0.12); border-color: rgba(34, 197, 94, 0.45);' :
                sale.payment_status === 'return' ?
                'color: #ef4444; background: rgba(239, 68, 68, 0.12); border-color: rgba(239, 68, 68, 0.45);' :
                'color: #f59e0b; background: rgba(245, 158, 11, 0.12); border-color: rgba(245, 158, 11, 0.45);'
            }">
                ${statusNames[sale.payment_status] || 'Pending'}
            </div>
        </div>

        <div style="padding: 32px;">
            <!-- Customer & Order Grid -->
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 18px; margin-bottom: 18px;">
                <!-- Customer Info -->
                <div style="background: rgba(255, 255, 255, 0.04); border: 1px solid rgba(148, 163, 184, 0.28); border-radius: 18px; padding: 18px; transition: transform 0.25s ease, background 0.2s ease;" onmouseover="this.style.transform='translateY(-2px)'; this.style.background='rgba(255, 255, 255, 0.07)'" onmouseout="this.style.transform='translateY(0)'; this.style.background='rgba(255, 255, 255, 0.04)'">
                    <h4 style="margin: 0 0 12px 0; color: #c7d2fe; font-weight: 900; display: flex; align-items: center; gap: 8px;">👤 Customer Information</h4>
                    <div style="display: grid; grid-template-columns: 140px 1fr; gap: 6px 10px;">
                        <b style="color: #dbe7ff;">Nama:</b> <span style="color: #9db0d1;">${sale.customer_name}</span>
                        <b style="color: #dbe7ff;">Telepon:</b> <span style="color: #9db0d1;">${sale.customer_phone}</span>
                        <b style="color: #dbe7ff;">Alamat:</b> <span style="color: #9db0d1;">${sale.customer_address}</span>
                    </div>
                </div>

                <!-- Order Info -->
                <div style="background: rgba(255, 255, 255, 0.04); border: 1px solid rgba(148, 163, 184, 0.28); border-radius: 18px; padding: 18px; transition: transform 0.25s ease, background 0.2s ease;" onmouseover="this.style.transform='translateY(-2px)'; this.style.background='rgba(255, 255, 255, 0.07)'" onmouseout="this.style.transform='translateY(0)'; this.style.background='rgba(255, 255, 255, 0.04)'">
                    <h4 style="margin: 0 0 12px 0; color: #c7d2fe; font-weight: 900; display: flex; align-items: center; gap: 8px;">📦 Order Information</h4>
                    <div style="display: grid; grid-template-columns: 140px 1fr; gap: 6px 10px;">
                        <b style="color: #dbe7ff;">Tanggal:</b> <span style="color: #9db0d1;">${new Date(sale.sale_date).toLocaleDateString('id-ID')}</span>
                        <b style="color: #dbe7ff;">Platform:</b> <span style="color: #9db0d1;">${platformNames[sale.platform] || sale.platform}</span>
                        <b style="color: #dbe7ff;">No. Pesanan:</b> <span style="color: #9db0d1;">${sale.order_number || '-'}</span>
                        <b style="color: #dbe7ff;">No. Resi:</b> <span style="color: #9db0d1;">${sale.tracking_number || '-'}</span>
                        <b style="color: #dbe7ff;">Expedisi:</b> <span style="color: #9db0d1;">${expedisiNames[sale.expedisi] || sale.expedisi || '-'}</span>
                    </div>
                </div>
            </div>

            <!-- Payment -->
            <div style="background: rgba(96, 165, 250, 0.08); border: 1px solid rgba(96, 165, 250, 0.35); border-radius: 18px; padding: 18px; margin-bottom: 18px; transition: transform 0.25s ease, background 0.2s ease;" onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
                <h4 style="margin: 0 0 12px 0; color: #c7d2fe; font-weight: 900; display: flex; align-items: center; gap: 8px;">💳 Payment Information</h4>
                <div style="display: grid; grid-template-columns: 160px 1fr; gap: 6px 10px;">
                    <b style="color: #dbe7ff;">Metode:</b> <span style="color: #9db0d1;">${paymentMethodNames[sale.payment_method] || sale.payment_method}</span>
                    <b style="color: #dbe7ff;">Status:</b> <span style="color: #9db0d1;">${(sale.payment_status || 'pending').toUpperCase()}</span>
                </div>
            </div>

            <!-- Products -->
            <div style="margin-bottom: 18px;">
                ${sale.products.map(product => {
                    const total = product.sale_price * product.quantity;
                    const profit = (product.sale_price - product.purchase_price) * product.quantity;
                    return `
                        <div style="background: #172035; border: 1px solid rgba(148, 163, 184, 0.22); border-radius: 14px; padding: 14px; display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                            <div>
                                <div style="font-weight: 800; color: #dbe7ff; font-size: 15px;">${product.product_name}</div>
                                <div style="color: #9db0d1; font-size: 12px;">SKU: ${product.sku} • Qty: ${product.quantity} • HPP: ${formatCurrency(product.purchase_price)} • Harga Jual: ${formatCurrency(product.sale_price)}</div>
                            </div>
                            <div style="text-align: right;">
                                <div style="font-weight: 900; color: #a6c8ff;">${formatCurrency(total)}</div>
                                <div style="font-size: 12px; color: #9db0d1;">Profit: ${formatCurrency(profit)}</div>
                            </div>
                        </div>
                    `;
                }).join('')}
            </div>

            <!-- Financial Summary -->
            <div style="background: linear-gradient(135deg, #1a2540, #24304e); border: 1px solid rgba(96, 165, 250, 0.35); border-radius: 16px; padding: 20px;">
                <h4 style="margin: 0 0 12px 0; color: #ffd699;">💰 Ringkasan Keuangan</h4>
                <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 16px; margin-bottom: 16px;">
                    <div style="background: #111a2b; border: 1px solid rgba(148, 163, 184, 0.28); border-radius: 14px; padding: 14px; text-align: center;">
                        <div style="color: #9db0d1; font-size: 12px;">TOTAL PENJUALAN</div>
                        <div style="font-size: 22px; font-weight: 900; color: #a6c8ff;">${formatCurrency(totalSales)}</div>
                    </div>
                    <div style="background: #111a2b; border: 1px solid rgba(148, 163, 184, 0.28); border-radius: 14px; padding: 14px; text-align: center;">
                        <div style="color: #9db0d1; font-size: 12px;">TOTAL HPP</div>
                        <div style="font-size: 22px; font-weight: 900; color: #ef4444;">${formatCurrency(totalHpp)}</div>
                    </div>
                    <div style="background: #111a2b; border: 1px solid rgba(148, 163, 184, 0.28); border-radius: 14px; padding: 14px; text-align: center;">
                        <div style="color: #9db0d1; font-size: 12px;">KEUNTUNGAN</div>
                        <div style="font-size: 22px; font-weight: 900; color: #22c55e;">${formatCurrency(totalProfit)}</div>
                    </div>
                </div>
                <div style="display: grid; grid-template-columns: 1fr 220px; gap: 18px;">
                    <div>
                        <div style="display: inline-flex; align-items: center; gap: 8px; padding: 8px 12px; border-radius: 999px; font-weight: 900; font-size: 12px; color: #22c55e; background: rgba(34, 197, 94, 0.12); border: 1px solid rgba(34, 197, 94, 0.4);">
                            Margin ${margin}%
                        </div>
                        <div style="height: 10px; background: rgba(255, 255, 255, 0.06); border: 1px solid rgba(255, 255, 255, 0.08); border-radius: 999px; overflow: hidden; margin-top: 8px;">
                            <span style="display: block; height: 100%; width: ${margin}%; background: linear-gradient(90deg, #22c55e, #bfffd8);"></span>
                        </div>
                    </div>
                    <div>
                        <div style="position: relative; width: 160px; height: 160px; border-radius: 50%; display: grid; place-items: center; margin: 0 auto; background: conic-gradient(#60a5fa ${margin}%, rgba(255,255,255,0.1) 0); box-shadow: inset 0 0 40px rgba(0,0,0,0.35), 0 6px 18px rgba(0,0,0,0.25);">
                            <div style="position: absolute; inset: 14px; border-radius: 50%; background: rgba(255,255,255,0.1); border: 1px solid rgba(255,255,255,0.08);"></div>
                            <div style="position: relative; text-align: center;">
                                <div style="font-weight: 900; font-size: 24px; color: #dbe7ff;">${margin}%</div>
                                <div style="color: #9db0d1; font-weight: 800; font-size: 12px; margin-top: 2px;">Profit Ratio</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Actions -->
            <div style="display: flex; gap: 12px; justify-content: center; margin-top: 22px;">
                <button onclick="closeSaleDetail()" style="border: none; cursor: pointer; padding: 12px 18px; border-radius: 14px; font-weight: 800; letter-spacing: 0.3px; background: transparent; color: #c7cfde; border: 1px solid rgba(255, 255, 255, 0.18);" onmouseover="this.style.background='rgba(255, 255, 255, 0.06)'" onmouseout="this.style.background='transparent'">
                    Tutup
                </button>
                <button onclick="updateSaleStatus('${sale.id}')" style="border: none; cursor: pointer; padding: 12px 18px; border-radius: 14px; font-weight: 800; letter-spacing: 0.3px; background: linear-gradient(90deg, #60a5fa, #7b5cff); color: white; box-shadow: 0 10px 24px rgba(107, 99, 255, 0.35);" onmouseover="this.style.filter='brightness(1.07)'" onmouseout="this.style.filter='brightness(1)'">
                    Update Status
                </button>
            </div>
        </div>
    `;
}

async function deleteManagedSale(saleId) {
    if (!confirm('Yakin hapus transaksi ini?')) {
        return;
    }
    
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/sales_api.php', {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id: saleId })
        });
        
        if (response.ok) {
            // Refresh all related UI components
            renderManagedSales();
            updateManagedSalesBadge();
            updateAllData();
            
            // TAMBAH INI - Reload inventory data dari database
            if (typeof loadInventory === 'function') await loadInventory();
            if (typeof loadStockMovements === 'function') await loadStockMovements();
            
            // Update inventory-related views since API restores inventory
            if (typeof updateInventoryBadge === 'function') updateInventoryBadge();
            if (typeof renderInventory === 'function') renderInventory();
            if (typeof renderStockMovements === 'function') renderStockMovements();
            if (typeof renderInventoryReport === 'function') renderInventoryReport();
            if (typeof updateInventoryAnalytics === 'function') updateInventoryAnalytics();
            
            // Reload customer data
            if (typeof updateCRMStats === 'function') await updateCRMStats();
            if (currentPage === 'crm') await renderCustomersList();
            
            // Refresh analytics jika lagi di page analytics
            if (currentPage === 'analytics') await updateAnalytics();
            
            showToast('Transaksi berhasil dihapus!', 'success');
        } else {
            const errorData = await response.json();
            showToast('Error: ' + (errorData.error || 'Gagal menghapus transaksi'), 'error');
        }
    } catch (error) {
        console.error('Error deleting sale:', error);
        showToast('Error koneksi!', 'error');
    }
}

// Function untuk clean up duplicate - jalanin sekali aja
window.cleanupDuplicateTransactions = function() {
    const uniqueTransactions = [];
    const seenDescriptions = new Set();
    
    transactions.forEach(t => {
        const key = `${t.type}-${t.amount}-${t.description}`;
        if (!seenDescriptions.has(key)) {
            seenDescriptions.add(key);
            uniqueTransactions.push(t);
        }
    });
    
    transactions = uniqueTransactions;
    localStorage.setItem('transactions', JSON.stringify(transactions));
    updateAllData();
    renderTransactions();
    showToast('Duplicate transactions cleaned up!', 'success');
};

// NOTE: Duplicate deleteManagedSale definition removed. See earlier definition for full implementation.


function showToast(message, type = 'success') {
    // Hapus toast lama kalau ada
    const oldToast = document.querySelector('.toast');
    if (oldToast) {
        oldToast.remove();
    }
    
    // Buat toast baru
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    
    const icons = {
        success: '✅',
        error: '❌', 
        warning: '⚠️',
        info: 'ℹ️'
    };
    
    toast.innerHTML = `
        <span class="toast-icon">${icons[type] || '✅'}</span>
        <span>${message}</span>
        <button class="toast-close" onclick="this.parentElement.remove()">×</button>
    `;
    
    document.body.appendChild(toast);
    
    // Animasi masuk
    setTimeout(() => toast.classList.add('show'), 100);
    
    // Auto hide setelah 3 detik
    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => toast.remove(), 400);
    }, 3000);
}

function resetSalesForm() {
    // Reset form
    document.getElementById('saleForm').reset();
    
    // Reset selected products
    selectedProducts = [];
    renderSelectedProducts();
    
    // Reset date ke hari ini
    document.getElementById('saleDate').value = new Date().toISOString().split('T')[0];
    
    showToast('Form berhasil direset! 🔄', 'success');
}

function openPreview() {
    // Ambil semua data dari form
    const customerName = document.getElementById('customerName').value || 'Belum diisi';
    const customerPhone = document.getElementById('customerPhone').value || 'Belum diisi';
    const customerAddress = document.getElementById('customerAddress').value || 'Belum diisi';
    const saleDate = document.getElementById('saleDate').value;
    const platform = document.getElementById('salePlatform').value || 'Belum dipilih';
    const orderNumber = document.getElementById('orderNumber').value || '-';
    const trackingNumber = document.getElementById('trackingNumber').value || '-';
    const expedisi = document.getElementById('expedisi').value || '-';
    const paymentMethod = document.getElementById('paymentMethod').value || '-';
    const paymentStatus = document.getElementById('paymentStatus').value || '-';
    const notes = document.getElementById('saleDescription').value || 'Tidak ada catatan';
    
    // Hitung total
    const totalPesanan = selectedProducts.reduce((sum, p) => sum + p.total, 0);
    const totalHPP = selectedProducts.reduce((sum, p) => sum + (p.purchasePrice * p.qty), 0);
    const totalKeuntungan = totalPesanan - totalHPP;
    const margin = totalPesanan > 0 ? ((totalKeuntungan / totalPesanan) * 100).toFixed(1) : 0;
    
    // Buat content lengkap
    const newContent = `
        <!-- Customer & Order Info -->
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px;">
            <!-- Customer Info -->
            <div style="background: rgba(16, 185, 129, 0.1); border-radius: 12px; padding: 20px; border: 1px solid rgba(16, 185, 129, 0.3);">
                <h4 style="color: #10b981; margin: 0 0 16px 0;">👤 Customer Info</h4>
                <div style="space-y: 8px;">
                    <p style="color: #e2e8f0; margin: 8px 0;"><strong>Nama:</strong> ${customerName}</p>
                    <p style="color: #e2e8f0; margin: 8px 0;"><strong>Phone:</strong> ${customerPhone}</p>
                    <p style="color: #e2e8f0; margin: 8px 0; font-size: 14px; line-height: 1.4;"><strong>Alamat:</strong> ${customerAddress}</p>
                </div>
            </div>
            
            <!-- Order Info -->
            <div style="background: rgba(59, 130, 246, 0.1); border-radius: 12px; padding: 20px; border: 1px solid rgba(59, 130, 246, 0.3);">
                <h4 style="color: #3b82f6; margin: 0 0 16px 0;">📦 Order Info</h4>
                <div style="space-y: 8px;">
                    <p style="color: #e2e8f0; margin: 8px 0;"><strong>Tanggal:</strong> ${saleDate ? new Date(saleDate).toLocaleDateString('id-ID') : '-'}</p>
                    <p style="color: #e2e8f0; margin: 8px 0;"><strong>Platform:</strong> ${platform}</p>
                    <p style="color: #e2e8f0; margin: 8px 0;"><strong>No. Pesanan:</strong> ${orderNumber}</p>
                    <p style="color: #e2e8f0; margin: 8px 0;"><strong>No. Resi:</strong> ${trackingNumber}</p>
                    <p style="color: #e2e8f0; margin: 8px 0;"><strong>Expedisi:</strong> ${expedisi}</p>
                </div>
            </div>
        </div>
        
        <!-- Payment Info -->
        <div style="background: rgba(139, 92, 246, 0.1); border-radius: 12px; padding: 20px; margin-bottom: 20px; border: 1px solid rgba(139, 92, 246, 0.3);">
            <h4 style="color: #8b5cf6; margin: 0 0 16px 0;">💳 Payment Info</h4>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px;">
                <p style="color: #e2e8f0; margin: 8px 0;"><strong>Metode:</strong> ${paymentMethod}</p>
                <p style="color: #e2e8f0; margin: 8px 0;"><strong>Status:</strong> ${paymentStatus}</p>
            </div>
        </div>
        
        <!-- Items List -->
        <div style="background: #0f172a; border-radius: 12px; padding: 20px; margin-bottom: 20px; border: 1px solid #334155;">
            <h4 style="color: #60a5fa; margin: 0 0 16px 0;">🛒 Items (${selectedProducts.length})</h4>
            ${selectedProducts.length > 0 ? 
                selectedProducts.map(product => `
                    <div style="background: #1e293b; border-radius: 8px; padding: 16px; margin-bottom: 12px; display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <div style="color: #e2e8f0; font-weight: bold; font-size: 16px;">${product.name}</div>
                            <div style="color: #94a3b8; font-size: 14px;">SKU: ${product.sku}</div>
                        </div>
                        <div style="text-align: right;">
                            <div style="color: #94a3b8; font-size: 12px;">×${product.qty}</div>
                            <div style="color: #10b981; font-weight: bold; font-size: 16px;">${formatCurrency(product.total)}</div>
                        </div>
                    </div>
                `).join('') 
                : '<p style="color: #94a3b8; text-align: center; padding: 20px;">Belum ada produk dipilih</p>'
            }
        </div>
        
        <!-- Ringkasan Financial -->
        <div style="background: linear-gradient(135deg, #1e293b, #334155); border-radius: 12px; padding: 24px; border: 1px solid #3b82f6; margin-bottom: 20px;">
            <h4 style="color: #f59e0b; margin: 0 0 20px 0;">💰 Ringkasan</h4>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px; margin-bottom: 20px;">
                <div style="background: #1e293b; border-radius: 8px; padding: 16px; text-align: center;">
                    <div style="color: #94a3b8; font-size: 12px; text-transform: uppercase; margin-bottom: 8px;">TOTAL PESANAN</div>
                    <div style="color: #60a5fa; font-weight: bold; font-size: 20px;">${formatCurrency(totalPesanan)}</div>
                </div>
                <div style="background: #1e293b; border-radius: 8px; padding: 16px; text-align: center;">
                    <div style="color: #94a3b8; font-size: 12px; text-transform: uppercase; margin-bottom: 8px;">HPP</div>
                    <div style="color: #ef4444; font-weight: bold; font-size: 20px;">${formatCurrency(totalHPP)}</div>
                </div>
            </div>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px;">
                <div style="background: rgba(16, 185, 129, 0.2); border-radius: 8px; padding: 16px; text-align: center;">
                    <div style="color: #10b981; font-size: 12px; text-transform: uppercase; margin-bottom: 8px;">KEUNTUNGAN</div>
                    <div style="color: #10b981; font-weight: bold; font-size: 20px;">${formatCurrency(totalKeuntungan)}</div>
                </div>
                <div style="background: rgba(139, 92, 246, 0.2); border-radius: 8px; padding: 16px; text-align: center;">
                    <div style="color: #8b5cf6; font-size: 12px; text-transform: uppercase; margin-bottom: 8px;">MARGIN</div>
                    <div style="color: #8b5cf6; font-weight: bold; font-size: 20px;">${margin}%</div>
                </div>
            </div>
        </div>
        
        <!-- Notes -->
        <div style="background: rgba(51, 65, 85, 0.5); border-radius: 12px; padding: 20px; border: 1px solid #475569;">
            <h4 style="color: #e2e8f0; margin: 0 0 12px 0;">📝 Catatan</h4>
            <p style="color: #94a3b8; line-height: 1.5;">${notes}</p>
        </div>
    `;
    
    // Update modal content
    document.querySelector('#previewModal div[style*="rgba(59, 130, 246, 0.1)"]').innerHTML = newContent;
    
    // Show modal
    document.getElementById('previewModal').style.display = 'flex';
}

function closePreview() {
    document.getElementById('previewModal').style.display = 'none';
}
function openProductSelector() {
    isAddingProduct = true;
    
    const container = document.getElementById('selectedProductsList');
    container.innerHTML = `
        <div style="border: 2px dashed #3b82f6; border-radius: 8px; padding: 20px; background: rgba(59, 130, 246, 0.05);">
            <div style="display: grid; grid-template-columns: 2fr 1fr 1fr auto; gap: 16px; align-items: end;">
                <div>
                    <label style="display: block; color: #e2e8f0; margin-bottom: 8px; font-size: 14px;">Pilih Produk</label>
                    <select id="tempProductSelect" style="width: 100%; padding: 10px; background: #334155; border: 1px solid #475569; border-radius: 6px; color: #e2e8f0;">
                        <option value="">-- Pilih Produk --</option>
                        ${inventories.map(p => `<option value="${p.id}">${p.name} - ${p.sku}</option>`).join('')}
                    </select>
                </div>
                <div>
                    <label style="display: block; color: #e2e8f0; margin-bottom: 8px; font-size: 14px;">Qty</label>
                    <input type="number" id="tempQty" style="width: 100%; padding: 10px; background: #334155; border: 1px solid #475569; border-radius: 6px; color: #e2e8f0;" min="1" value="1">
                </div>
                <div>
                    <label style="display: block; color: #e2e8f0; margin-bottom: 8px; font-size: 14px;">Harga</label>
                    <input type="text" id="tempPrice" style="width: 100%; padding: 10px; background: #475569; border: 1px solid #64748b; border-radius: 6px; color: #94a3b8;" readonly placeholder="Rp 0">
                </div>
                <div style="display: flex; gap: 8px;">
                    <button onclick="confirmAddProduct()" style="padding: 10px 16px; background: #10b981; color: white; border: none; border-radius: 6px; cursor: pointer;">✓</button>
                    <button onclick="closeProductSelector()" style="padding: 10px 16px; background: #ef4444; color: white; border: none; border-radius: 6px; cursor: pointer;">✕</button>
                </div>
            </div>
        </div>
    `;
    
    // Update button text
    const btn = document.querySelector('button[onclick="addProductToList()"]');
    btn.innerHTML = '<span>✕</span> Batal';
    btn.style.background = '#ef4444';
    
    // Add event listener for product selection
    document.getElementById('tempProductSelect').addEventListener('change', updateTempPrice);
}

function updateTempPrice() {
    const productId = document.getElementById('tempProductSelect').value;
    const product = inventories.find(p => p.id === productId);
    
    if (product) {
        document.getElementById('tempPrice').value = formatCurrency(product.salePrice);
    } else {
        document.getElementById('tempPrice').value = '';
    }
}

function confirmAddProduct() {
    const productId = document.getElementById('tempProductSelect').value;
    const quantity = parseInt(document.getElementById('tempQty').value);
    
    if (!productId || !quantity) {
        alert('Pilih produk dan isi quantity!');
        return;
    }
    
    // Debug log untuk cek data
    console.log('Looking for product ID:', productId);
    console.log('Available inventories:', inventories);
    
    // Ganti === jadi == (database ID mungkin string vs number)
    const product = inventories.find(p => p.id == productId);
    
    if (!product) {
        alert('Produk tidak ditemukan! Coba refresh halaman.');
        return;
    }
    
    selectedProducts.push({
        id: product.id,
        name: product.name,
        sku: product.sku,
        qty: quantity,
        salePrice: product.salePrice,
        purchasePrice: product.purchasePrice,
        total: product.salePrice * quantity
    });
    
    closeProductSelector();
    renderSelectedProducts();
}

function closeProductSelector() {
    isAddingProduct = false;
    
    // Reset button
    const btn = document.querySelector('button[onclick="addProductToList()"]');
    btn.innerHTML = '<span>+</span> Tambah Produk';
    btn.style.background = '#3b82f6';
    
    renderSelectedProducts();
}

function renderSelectedProducts() {
    const container = document.getElementById('selectedProductsList');
    
    if (selectedProducts.length === 0) {
        container.innerHTML = '<p style="color: #94a3b8; text-align: center; margin: 0;">Belum ada produk dipilih</p>';
        return;
    }
    
    const html = selectedProducts.map((product, index) => `
        <div style="background: #1e293b; padding: 16px; border-radius: 8px; margin-bottom: 12px; display: flex; justify-content: space-between; align-items: center;">
            <div>
                <div style="color: #e2e8f0; font-weight: 600;">${product.sku} - ${product.name}</div>
                <div style="color: #94a3b8; font-size: 14px;">Qty: ${product.qty} x ${formatCurrency(product.salePrice)} = ${formatCurrency(product.total)}</div>
                <div style="color: #f59e0b; font-size: 12px;">HPP: ${formatCurrency(product.purchasePrice)} | Profit: ${formatCurrency((product.salePrice - product.purchasePrice) * product.qty)}</div>
            </div>
            <button onclick="removeProduct(${index})" style="background: #ef4444; color: white; border: none; padding: 8px 12px; border-radius: 4px; font-size: 12px;">Hapus</button>
        </div>
    `).join('');
    
    // Tambah total summary
    const grandTotal = selectedProducts.reduce((sum, p) => sum + p.total, 0);
    const totalProfit = selectedProducts.reduce((sum, p) => sum + ((p.salePrice - p.purchasePrice) * p.qty), 0);
    
    container.innerHTML = html + `
        <div style="border-top: 1px solid #475569; padding-top: 16px; margin-top: 16px;">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <div style="color: #94a3b8;">Total Transaksi:</div>
                <div style="color: #10b981; font-weight: 700; font-size: 20px;">${formatCurrency(grandTotal)}</div>
            </div>
            <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 8px;">
                <div style="color: #94a3b8;">Est. Profit:</div>
                <div style="color: #f59e0b; font-weight: 600;">${formatCurrency(totalProfit)}</div>
            </div>
        </div>
    `;
}

function removeProduct(index) {
    selectedProducts.splice(index, 1);
    renderSelectedProducts();
}
        
        // Populate product dropdown from inventory
function populateProductDropdown() {
    const select = document.getElementById('productSelect');
    if (!select) return;
    
    select.innerHTML = '<option value="">-- Pilih Produk --</option>';
    inventories.forEach(product => {
        select.innerHTML += `<option value="${product.id}">${product.name} - ${product.sku}</option>`;
    });
}

// Update product info when selected
function updateProductInfo() {
    const select = document.getElementById('productSelect');
    const selectedId = select.value;
    const product = inventories.find(p => p.id === selectedId);
    
    if (product) {
        document.getElementById('productPrice').value = formatCurrency(product.salePrice);
        calculateTotal();
    } else {
        document.getElementById('productPrice').value = '';
        document.getElementById('totalPrice').textContent = 'Rp 0';
    }
}

// Calculate total
function calculateTotal() {
    const select = document.getElementById('productSelect');
    const qty = parseInt(document.getElementById('productQty').value) || 0;
    const selectedId = select.value;
    const product = inventories.find(p => p.id === selectedId);
    
    if (product && qty > 0) {
        const total = product.salePrice * qty;
        document.getElementById('totalPrice').textContent = formatCurrency(total);
    } else {
        document.getElementById('totalPrice').textContent = 'Rp 0';
    }
}

// Call populate when navigating to sales
window.navigateTo = function(page) {
    // ... existing navigation code ...
    if (page === 'sales') {
        populateProductDropdown();
    }
    // ... rest of navigation code ...
};
        
        


// Buka modal
window.openProductModal = function() {
    document.getElementById('productModal').style.display = 'flex';
};

// Tutup modal
window.closeProductModal = function() {
    document.getElementById('productModal').style.display = 'none';
    document.getElementById('productModalForm').reset();
};

// Handle form submit
window.handleProductSubmit = async function(e) {
    e.preventDefault();
    
    const data = {
        id: Date.now().toString(),
        sku: document.getElementById('modalSKU').value,
        name: document.getElementById('modalNama').value,
        unit: document.getElementById('modalUnit').value,
        stock: parseInt(document.getElementById('modalStok').value) || 0,
        // Keep a separate copy of the starting stock so it doesn't get overwritten
        initialStock: parseInt(document.getElementById('modalStok').value) || 0,
        purchasePrice: parseFloat(document.getElementById('modalHargaModal').value) || 0,
        salePrice: parseFloat(document.getElementById('modalHargaJual').value) || 0,
        minStock: parseInt(document.getElementById('modalMinStock').value) || 5
    };
    
    // POST ke database
    const response = await fetch('https://tagihan.ersetsolution.my.id/inventory_api.php', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
    });
    
    if (response.ok) {
        // Record stock movement
        if (data.stock > 0) {
            recordStockMovement(data.name, 'increase', data.stock);
        }
        
        // Update UI
        await loadInventory();
        updateInventoryBadge();
        renderInventory();
        
        // Tutup modal dan show success
        closeProductModal();
        showAlert('Produk berhasil ditambahkan!', 'success');
    }
};
// Tutup modal kalau klik di luar
document.addEventListener('click', function(e) {
    const modal = document.getElementById('productModal');
    if (e.target === modal) {
        closeProductModal();
    }
});

        // Update payment summary real-time
        function updatePaymentSummary() {
            if (!window.currentDebt) return;
            
            const amount = parseFloat(document.getElementById('paymentAmount').value) || 0;
            const remaining = Math.max(0, window.currentDebt.remainingAmount - amount);
            const isFullyPaid = remaining === 0;
            
            // Update summary display
            document.getElementById('summaryAmount').textContent = formatCurrency(amount);
            document.getElementById('summaryRemaining').textContent = formatCurrency(remaining);
            
            const statusElement = document.getElementById('summaryStatus');
            if (isFullyPaid) {
                statusElement.textContent = 'LUNAS';
                statusElement.style.color = '#10b981';
            } else {
                statusElement.textContent = 'Masih Berhutang';
                statusElement.style.color = '#ef4444';
            }
            
            // Validate amount
            const submitBtn = document.querySelector('#paymentForm button[type="submit"]');
            if (amount > window.currentDebt.remainingAmount) {
                document.getElementById('summaryRemaining').innerHTML = `
                    <span style="color: #ef4444;">⚠️ Melebihi sisa utang!</span>
                `;
                submitBtn.disabled = true;
                submitBtn.style.opacity = '0.5';
            } else if (amount <= 0) {
                submitBtn.disabled = true;
                submitBtn.style.opacity = '0.5';
            } else {
                submitBtn.disabled = false;
                submitBtn.style.opacity = '1';
            }
        }

       // Delete debt function - Database API version
window.deleteDebt = async function(debtId) {
    if (!confirm('Hapus utang ini?')) {
        return;
    }
    
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/debt_api.php', {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id: debtId })
        });
        
        if (response.ok) {
            // Refresh data dari database
            await loadDebts();
            updateAllData();
            renderDebts();
            showAlert('Utang berhasil dihapus!', 'success');
        } else {
            const errorData = await response.json();
            showAlert('Error: ' + (errorData.error || 'Gagal menghapus utang'), 'error');
        }
    } catch (error) {
        console.error('Error deleting debt:', error);
        showAlert('Error koneksi ke server!', 'error');
    }
};

       window.deleteCategory = async function(categoryName) {
    if (!confirm(`Hapus kategori "${categoryName}"?`)) return;
    
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/categories_api.php', {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name: categoryName })
        });
        
        if (response.ok) {
            updateCategoryOptions();
            renderCategories();
            showAlert('Kategori berhasil dihapus!', 'success');
        } else {
            showAlert('Error menghapus kategori!', 'error');
        }
    } catch (error) {
        showAlert('Error koneksi!', 'error');
    }
};

        window.toggleDebtGroup = function(creditor) {
            const groupId = creditor.replace(/[^a-zA-Z0-9]/g, '');
            const groupItems = document.getElementById(`group-${groupId}`);
            
            if (groupItems.style.display === 'none') {
                groupItems.style.display = 'block';
            } else {
                groupItems.style.display = 'none';
            }
        };

        // Data storage
        let debts = [];

        // Load debts from database API
async function loadDebts() {
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/debt_api.php');
        const dbDebts = await response.json();
        
        // Map database fields to frontend format
        debts = dbDebts.map(debt => ({
            id: parseInt(debt.id),
            amount: parseFloat(debt.amount),
            remainingAmount: parseFloat(debt.remaining_amount),
            to: debt.creditor,
            dueDate: debt.due_date,
            description: debt.description,
            status: debt.status,
            payments: debt.payments.map(p => ({
                amount: parseFloat(p.amount),
                date: p.payment_date,
                note: p.note,
                payment_type: p.payment_type
            })),
            createdAt: new Date(debt.created_at),
            type: debt.debt_type
        }));
    } catch (error) {
        console.error('Error loading debts:', error);
        debts = [];
    }
}

// Initialize debt data - call loadDebts instead of localStorage
loadDebts().then(() => {
    updateAllData();
    if (currentPage === 'debt') {
        updateDebtStats();
        if (currentDebtView === 'calendar') {
            renderDebtCalendar();
        } else {
            renderDebts();
        }
    }
});

// Load transactions from database API
async function loadTransactions() {
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/transactions_api.php');
        const apiTransactions = await response.json();
        
        transactions = apiTransactions.map(t => ({
            ...t,
            amount: parseFloat(t.amount)
        }));
    } catch (error) {
        console.error('Error loading transactions:', error);
        transactions = [];
    }
}

// Call loadTransactions
loadTransactions().then(() => {
    updateAllData();
});
        

        // Data arrays for penjualan (sales) and inventory
        let inventories = [];
        // Array to store stock movement logs for inventory
        let stockMovements = [];

        // ------------------------------------------------------------------------
        // Inventory tab functions and utilities
        //
        // These functions handle loading, saving, and rendering of stock movement
        // logs, report summaries, analytics charts, and tab switching for the
        // inventory module. They are defined early so they can be referenced in
        // other parts of the app.

        /**
         * Load stock movement entries from localStorage into the stockMovements array.
         * If no data exists or parsing fails, the array will be reset to empty.
         */
        // Load stock movements from database
async function loadStockMovements() {
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/inventory_api.php/movements');
        const movements = await response.json();
        
        // Convert API response format ke format yang diexpect frontend
        stockMovements = movements.map(movement => ({
            id: movement.id,
            product: movement.product_name,
            type: movement.type,
            displayType: movement.display_type,
            quantity: parseInt(movement.quantity),
            date: movement.date,
            notes: movement.notes || '',
            sku: movement.sku || ''
        }));
    } catch (error) {
        console.error('Error loading stock movements:', error);
        stockMovements = [];
    }
}

// Save tidak diperlukan lagi - langsung POST ke API
function saveStockMovements() {
    // Function ini sudah tidak diperlukan karena setiap movement 
    // langsung dikirim ke database via recordStockMovement()
    console.log('saveStockMovements deprecated - using API directly');
}

        /**
         * Record a single stock movement.
         * @param {string} productName - The name of the product affected.
         * @param {string} type - Either 'increase' or 'decrease'.
         * @param {number} quantity - How much stock was added or removed.
         */
        function recordStockMovement(productName, type, quantity, customReason = null) {
    let notes = customReason;
    // Map logical type to display type: increase -> IN, decrease -> OUT, restock -> RESTOCK
    let displayType =
        (type === 'increase') ? 'IN' :
        (type === 'decrease') ? 'OUT' :
        (type === 'restock') ? 'RESTOCK' : type;

    // Auto detect default notes and special display type if no custom reason provided
    if (!notes) {
        if (type === 'increase') {
            // Cek apakah ini produk baru (belum pernah ada movement) untuk stok awal
            const existingMovements = stockMovements.filter(m => m.product === productName);
            if (existingMovements.length === 0) {
                notes = 'Stok Awal';
                displayType = 'INITIAL'; // Type khusus untuk stok awal
            } else {
                notes = 'Stock In';
                displayType = 'IN';
            }
        } else if (type === 'restock') {
            // Restock (increase due to return or deletion)
            notes = 'Restock';
            displayType = 'RESTOCK';
        } else {
            // treat other types (decrease) as stock out
            notes = 'Stock Out';
            displayType = 'OUT';
        }
    }

    const entry = {
        id: Date.now().toString() + Math.random().toString(16).slice(2),
        product: productName,
        type: type, // untuk logic penyimpanan ('increase' atau 'decrease')
        displayType: displayType, // untuk tampilan ('IN', 'OUT', 'INITIAL')
        quantity: quantity,
        date: new Date().toISOString(),
        notes: notes
    };
    stockMovements.unshift(entry);
    saveStockMovements();
}

        /**
         * Render the stock movement list into the movement tab. If there are no
         * entries, show a friendly message. Each entry displays the product name,
         * change type and quantity, and the timestamp in Indonesian locale.
         */
         
         function renderStockMovementChart() {
    destroyChart('stockMovementChart');
    
    if (stockMovements.length === 0) {
        const ctx = document.getElementById('stockMovementChart').getContext('2d');
        ctx.fillStyle = '#64748b';
        ctx.font = '16px Inter';
        ctx.textAlign = 'center';
        ctx.fillText('Belum ada movement', ctx.canvas.width / 2, ctx.canvas.height / 2);
        return;
    }

    // Get last 30 days data
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
    
    const recentMovements = stockMovements.filter(m => 
        new Date(m.date) >= thirtyDaysAgo
    ).sort((a, b) => new Date(a.date) - new Date(b.date));

    const dates = [...new Set(recentMovements.map(m => 
        new Date(m.date).toLocaleDateString('id-ID', { month: 'short', day: 'numeric' })
    ))];

    const inData = dates.map(date => {
        return recentMovements.filter(m => {
            const moveDate = new Date(m.date).toLocaleDateString('id-ID', { month: 'short', day: 'numeric' });
            return moveDate === date && m.type === 'increase';
        }).reduce((sum, m) => sum + m.quantity, 0);
    });

    const outData = dates.map(date => {
        return recentMovements.filter(m => {
            const moveDate = new Date(m.date).toLocaleDateString('id-ID', { month: 'short', day: 'numeric' });
            return moveDate === date && m.type === 'decrease';
        }).reduce((sum, m) => sum + m.quantity, 0);
    });

    const data = {
        labels: dates,
        datasets: [
            {
                label: 'Barang Masuk',
                data: inData,
                backgroundColor: '#10b981',
                borderColor: '#10b981',
                borderWidth: 1
            },
            {
                label: 'Barang Keluar', 
                data: outData,
                backgroundColor: '#ef4444',
                borderColor: '#ef4444',
                borderWidth: 1
            }
        ]
    };

   const ctx = document.getElementById('stockMovementChart').getContext('2d');
charts['stockMovementChart'] = new Chart(ctx, {
    type: 'bar',
    data: data,
    options: {
        responsive: true,
        maintainAspectRatio: false,
        barPercentage: 0.4,        // Tambah ini - lebar bar 40% dari space
        categoryPercentage: 0.6,   // Tambah ini - spacing antar kategori
        scales: {
            y: {
                beginAtZero: true,
                ticks: { color: '#94a3b8', font: { size: 12 } },
                grid: { color: '#374151', drawBorder: false }
            },
            x: {
                ticks: { color: '#94a3b8', font: { size: 12 } },
                grid: { color: '#374151', drawBorder: false }
            }
        },
        plugins: {
            legend: {
                labels: { color: '#e2e8f0', font: { size: 12 } }
            },
            tooltip: {
                backgroundColor: '#1e293b',
                titleColor: '#e2e8f0',
                bodyColor: '#e2e8f0',
                borderColor: '#374151',
                borderWidth: 1
            }
        }
    }
});
}
         
         function renderStockComparisonChart() {
    destroyChart('stockComparisonChart');
    
    if (inventories.length === 0) {
        const ctx = document.getElementById('stockComparisonChart').getContext('2d');
        ctx.fillStyle = '#64748b';
        ctx.font = '16px Inter';
        ctx.textAlign = 'center';
        ctx.fillText('Belum ada data produk', ctx.canvas.width / 2, ctx.canvas.height / 2);
        return;
    }

    const data = {
        labels: inventories.map(item => item.name),
        datasets: [
            {
                label: 'Stok Sekarang',
                data: inventories.map(item => item.stock || 0),
                backgroundColor: '#3b82f6',
                borderColor: '#3b82f6',
                borderWidth: 1
            },
            {
                label: 'Batas Aman',
                data: inventories.map(item => item.minStock || 5),
                backgroundColor: '#ef4444',
                borderColor: '#ef4444',
                borderWidth: 1
            }
        ]
    };

    const ctx = document.getElementById('stockComparisonChart').getContext('2d');
    charts['stockComparisonChart'] = new Chart(ctx, {
        type: 'bar',
        data: data,
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: { color: '#94a3b8', font: { size: 12 } },
                    grid: { color: '#374151', drawBorder: false }
                },
                x: {
                    ticks: { color: '#94a3b8', font: { size: 12 } },
                    grid: { color: '#374151', drawBorder: false }
                }
            },
            plugins: {
                legend: {
                    labels: { color: '#e2e8f0', font: { size: 12 } }
                },
                tooltip: {
                    backgroundColor: '#1e293b',
                    titleColor: '#e2e8f0',
                    bodyColor: '#e2e8f0',
                    borderColor: '#374151',
                    borderWidth: 1
                }
            }
        }
    });
}
         
function renderStockDistributionChart() {
    destroyChart('stockDistributionChart');
    
    if (inventories.length === 0) {
        const ctx = document.getElementById('stockDistributionChart').getContext('2d');
        ctx.fillStyle = '#64748b';
        ctx.font = '16px Inter';
        ctx.textAlign = 'center';
        ctx.fillText('Belum ada data stock', ctx.canvas.width / 2, ctx.canvas.height / 2);
        return;
    }
    
    // Filter produk yang ada stocknya
    const stockData = inventories.filter(item => (item.stock || 0) > 0);
    
    if (stockData.length === 0) {
        const ctx = document.getElementById('stockDistributionChart').getContext('2d');
        ctx.fillStyle = '#64748b';
        ctx.font = '16px Inter';
        ctx.textAlign = 'center';
        ctx.fillText('Semua produk stock 0', ctx.canvas.width / 2, ctx.canvas.height / 2);
        return;
    }

    const data = {
        labels: stockData.map(item => item.name),
        datasets: [{
            data: stockData.map(item => item.stock || 0),
            backgroundColor: chartColors.slice(0, stockData.length),
            borderColor: '#1e293b',
            borderWidth: 2,
            hoverBorderWidth: 3
        }]
    };

    const ctx = document.getElementById('stockDistributionChart').getContext('2d');
    charts['stockDistributionChart'] = new Chart(ctx, {
        type: 'doughnut',
        data: data,
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom',
                    labels: {
                        color: '#e2e8f0',
                        font: { size: 12 },
                        usePointStyle: true,
                        padding: 20
                    }
                },
                tooltip: {
                    backgroundColor: '#1e293b',
                    titleColor: '#e2e8f0',
                    bodyColor: '#e2e8f0',
                    borderColor: '#374151',
                    borderWidth: 1,
                    callbacks: {
                        label: function(context) {
                            const total = context.dataset.data.reduce((a, b) => a + b, 0);
                            const percentage = ((context.raw / total) * 100).toFixed(1);
                            return `${context.label}: ${context.raw} unit (${percentage}%)`;
                        }
                    }
                }
            }
        }
    });
}      
         
       function renderStockMovements() {
    const list = document.getElementById('stockMovementList');
    if (!list) return;
    
    if (stockMovements.length === 0) {
        list.innerHTML = '<tr><td colspan="7" style="padding: 20px; text-align: center; color: #94a3b8;">Belum ada pergerakan stok.</td></tr>';
        return;
    }
    
    list.innerHTML = '';
    stockMovements.forEach(entry => {
        const dateString = new Date(entry.date).toLocaleDateString('id-ID', {
            day: '2-digit',
            month: '2-digit', 
            year: 'numeric'
        });
        
        // Cari SKU dari inventory berdasarkan nama produk
        const product = inventories.find(item => item.name === entry.product);
        const sku = product ? product.sku : '-';
        
        let typeLabel;
        if (entry.displayType === 'INITIAL') {
            typeLabel = 'STOK AWAL';
        } else if (entry.displayType === 'IN') {
            typeLabel = 'IN';
        } else if (entry.displayType === 'RESTOCK') {
            typeLabel = 'RESTOCK';
        } else {
            typeLabel = 'OUT';
        }
        const typeColor = entry.displayType === 'OUT' ? '#ef4444' : '#10b981';
        
        const row = document.createElement('tr');
        row.style.borderBottom = '1px solid #334155';
        row.innerHTML = `
            <td style="padding: 16px 20px; color: #e2e8f0;">${dateString}</td>
            <td style="padding: 16px 20px; color: #10b981; font-weight: bold;">${sku}</td>
            <td style="padding: 16px 20px; color: #e2e8f0;">${entry.product}</td>
            <td style="padding: 16px 20px; color: ${typeColor}; font-weight: bold;">${typeLabel}</td>
            <td style="padding: 16px 20px; color: #3b82f6;">${entry.quantity}</td>
            <td style="padding: 16px 20px; color: #94a3b8;">${entry.notes}</td>
            <td style="padding: 16px 20px;">
                <button onclick="deleteStockMovement('${entry.id}')" style="background: #ef4444; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 12px;">Hapus</button>
            </td>
        `;
        list.appendChild(row);
    });
}

        /**
         * Render a simple inventory report summarizing the number of products,
         * total stock quantity, total purchase value, and potential revenue.
         * The report uses the report-grid/report-card classes defined in the CSS.
         */
       function renderInventoryReport() {
    const container = document.getElementById('inventoryReportContent');
    if (!container) return;
    
    if (inventories.length === 0) {
        container.innerHTML = '<tr><td colspan="7" style="padding: 20px; text-align: center; color: #94a3b8;">Belum ada data produk.</td></tr>';
        return;
    }
    
    container.innerHTML = '';
    
    inventories.forEach(item => {
        // Calculate stock movements untuk item ini
        const movements = stockMovements.filter(m => m.product === item.name);
        // Barang masuk meliputi kenaikan stok biasa (increase) maupun restock (pengembalian)
        const barangMasuk = movements
            .filter(m => {
                // Exclude initial stock
                if (m.displayType === 'INITIAL') return false;
                // Treat both 'increase' and 'restock' as incoming stock
                return m.type === 'increase' || m.type === 'restock';
            })
            .reduce((sum, m) => sum + m.quantity, 0);
        const barangKeluar = movements.filter(m => m.type === 'decrease').reduce((sum, m) => sum + m.quantity, 0);
        
        // Rumus: Stok Akhir = Stok Awal + Barang Masuk - Barang Keluar  
        // Use the preserved initialStock for the starting balance so it doesn't fluctuate
        const stokAwal = item.initialStock || 0;
        const stokAkhir = stokAwal + barangMasuk - barangKeluar;
        
        // Color coding untuk stok akhir
        let stokColor = '#ef4444'; // merah (low/habis)
        if (stokAkhir > 20) stokColor = '#10b981'; // hijau (high)
        else if (stokAkhir > 10) stokColor = '#f59e0b'; // kuning (medium)
        
        const row = document.createElement('tr');
        row.style.borderBottom = '1px solid #334155';
        row.innerHTML = `
            <td style="padding: 16px 20px; color: #10b981; font-weight: bold;">${item.sku || '-'}</td>
            <td style="padding: 16px 20px; color: #e2e8f0;">${item.name}</td>
            <td style="padding: 16px 20px; color: #94a3b8;">pcs</td>
            <td style="padding: 16px 20px; color: #3b82f6; text-align: center;">${stokAwal}</td>
            <td style="padding: 16px 20px; color: #10b981; text-align: center;">${barangMasuk}</td>
            <td style="padding: 16px 20px; color: #ef4444; text-align: center;">${barangKeluar}</td>
            <td style="padding: 16px 20px; color: ${stokColor}; font-weight: bold; text-align: center; background: rgba(${stokColor === '#10b981' ? '16,185,129' : stokColor === '#f59e0b' ? '245,158,11' : '239,68,68'}, 0.1);">${stokAkhir}</td>
        `;
        container.appendChild(row);
    });
}

        /**
         * Render an inventory analytics chart showing the stock distribution
         * across products. Utilizes Chart.js if available. If there is no data,
         * display a friendly message instead.
         */
        function renderInventoryAnalytics() {
            const container = document.getElementById('inventoryAnalyticsContent');
            if (!container) return;
            if (inventories.length === 0) {
                container.innerHTML = '<p style="color:#94a3b8; text-align:center; padding:20px;">Belum ada data produk.</p>';
                return;
            }
            const labels = inventories.map(item => item.name);
            const data = inventories.map(item => item.stock || 0);
            // Insert canvas for chart
            container.innerHTML = '<canvas id="inventoryStockChart" height="300"></canvas>';
            // Destroy existing chart if exists
            if (typeof destroyChart === 'function') {
                destroyChart('inventoryStockChart');
            }
            const ctx = document.getElementById('inventoryStockChart').getContext('2d');
            charts['inventoryStockChart'] = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Stok Produk',
                            data: data,
                            backgroundColor: '#3b82f6',
                            borderColor: '#3b82f6',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                color: '#94a3b8',
                                font: { size: 12 }
                            },
                            grid: {
                                color: '#374151',
                                drawBorder: false
                            }
                        },
                        x: {
                            ticks: {
                                color: '#94a3b8',
                                font: { size: 12 }
                            },
                            grid: {
                                color: '#374151',
                                drawBorder: false
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            backgroundColor: '#1e293b',
                            titleColor: '#e2e8f0',
                            bodyColor: '#e2e8f0',
                            borderColor: '#374151',
                            borderWidth: 1
                        }
                    }
                }
            });
        }
        
function updateInventoryAnalytics() {
    // Update total produk
    const totalProducts = inventories.length;
    document.getElementById('totalProductCount').textContent = totalProducts;
    
    // Update low stock
    const lowStockItems = inventories.filter(item => (item.stock || 0) <= (item.minStock || 5));
    document.getElementById('lowStockCount').textContent = lowStockItems.length;
    
    // Update total value (HPP * stock)
    const totalValue = inventories.reduce((sum, item) => {
        return sum + ((item.purchasePrice || 0) * (item.stock || 0));
    }, 0);
    document.getElementById('totalInventoryValue').textContent = formatCurrency(totalValue);
    
    // Update monthly movement
    const currentMonth = new Date().getMonth();
    const currentYear = new Date().getFullYear();
    const monthlyMovements = stockMovements.filter(movement => {
        const moveDate = new Date(movement.date);
        return moveDate.getMonth() === currentMonth && moveDate.getFullYear() === currentYear;
    }).length;
    document.getElementById('monthlyMovement').textContent = monthlyMovements;
    
    // Update Fast Moving Items dengan desain card
const fastMoving = stockMovements
    .filter(m => m.type === 'decrease')
    .reduce((acc, m) => {
        acc[m.product] = (acc[m.product] || 0) + m.quantity;
        return acc;
    }, {});
const topProducts = Object.entries(fastMoving)
    .sort((a, b) => b[1] - a[1])
    .slice(0, 5);
if (topProducts.length > 0) {
    const fastMovingCards = topProducts.map(([productName, qty], index) => {
        // Cari data produk untuk SKU dan harga
        const product = inventories.find(item => item.name === productName);
        const sku = product ? product.sku : 'N/A';
        const revenue = product ? (product.salePrice * qty) : 0;
        
return `
    <div style="background: #1e293b; padding: 20px; border-radius: 12px; margin-bottom: 16px; border: 1px solid #334155;">
        <div style="display: flex; align-items: center; gap: 16px; margin-bottom: 16px;">
            <div style="background: ${index === 0 ? '#f59e0b' : '#64748b'}; color: #1e293b; font-weight: bold; padding: 12px 16px; border-radius: 8px; font-size: 16px;">
                #${index + 1}
            </div>
            <div>
                <div style="color: #e2e8f0; font-weight: 700; font-size: 20px; margin-bottom: 4px;">${sku}</div>
                <div style="color: #94a3b8; font-size: 14px;">${productName}</div>
            </div>
        </div>
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div style="text-align: center;">
                <div style="color: #94a3b8; font-size: 12px; text-transform: uppercase; margin-bottom: 4px;">QUANTITY</div>
                <div style="color: #60a5fa; font-weight: 700; font-size: 18px;">${qty} terjual</div>
            </div>
            <div style="text-align: center;">
                <div style="color: #94a3b8; font-size: 12px; text-transform: uppercase; margin-bottom: 4px;">REVENUE</div>
                <div style="color: #10b981; font-weight: 700; font-size: 18px;">${formatCurrency(revenue)}</div>
            </div>
        </div>
    </div>
`;
    }).join('');
    document.getElementById('fastMovingItems').innerHTML = fastMovingCards;
} else {
    document.getElementById('fastMovingItems').innerHTML = '<div style="text-align: center; color: #94a3b8; padding: 20px;">Belum ada data penjualan</div>';
}

    // Update Low Stock Alert
    const lowStockProducts = inventories.filter(item => 
        (item.stock || 0) <= (item.minStock || 5)
    );

    if (lowStockProducts.length > 0) {
        const lowStockText = lowStockProducts.map(item => 
            `• ${item.name}: ${item.stock || 0} tersisa`).join('<br>');
        document.getElementById('lowStockAlert').innerHTML = lowStockText;
    } else {
        document.getElementById('lowStockAlert').innerHTML = 'Semua produk stok aman ✅';
    }
    
    // Render charts
    renderStockDistributionChart();
    renderStockComparisonChart();
    renderStockMovementChart();
}

        /**
         * Switch the active inventory tab. This function hides all tab content,
         * activates the selected tab button, and invokes the appropriate render
         * function when switching to movement, report, or analytics tabs.
         * @param {string} tab - The tab identifier ('master', 'movement', 'report', 'analytics').
         */
         
         // Switch shipping tab function
window.switchShippingTab = function(tab) {
    // Remove active state from all tabs
    document.querySelectorAll('#shipping .modern-tab').forEach(t => t.classList.remove('active'));
    // Hide all tab contents
    document.querySelectorAll('[id^="shippingTabContent-"]').forEach(el => {
        el.style.display = 'none';
    });
    
    // Activate selected tab and show content
    const selectedTab = document.getElementById('shippingTab-' + tab);
    if (selectedTab) selectedTab.classList.add('active');
    
    const content = document.getElementById('shippingTabContent-' + tab);
    if (content) content.style.display = '';
    
    // Load specific tab content
    if (tab === 'tracking') loadShippingList();
    if (tab === 'whatsapp') loadWhatsAppSettings();
    if (tab === 'logs') loadNotificationLogs();
};
         
       window.switchInventoryTab = function(tab) {
    // Remove active state from all tabs
    document.querySelectorAll('.modern-tab').forEach(t => t.classList.remove('active'));
    // Hide all tab contents
    document.querySelectorAll('[id^="inventoryTabContent-"]').forEach(el => {
        el.style.display = 'none';
    });
    // Activate selected tab and show content
    const selectedTab = document.getElementById('inventoryTab-' + tab);
    if (selectedTab) selectedTab.classList.add('active');
    const content = document.getElementById('inventoryTabContent-' + tab);
    if (content) content.style.display = '';
    // Render additional views as needed
    if (tab === 'movement') renderStockMovements();
    if (tab === 'report') renderInventoryReport();
    if (tab === 'analytics') {
    renderInventoryAnalytics();
    updateInventoryAnalytics();
}
    
};

        let currentPage = 'dashboard';
        let lastMonthData = { income: 0, expense: 0 };
        let charts = {}; // Store chart instances
        let currentDebtView = 'list'; // 'list' or 'calendar'

        // Chart color palette
        const chartColors = [
            '#3b82f6', '#ef4444', '#10b981', '#f59e0b', '#8b5cf6',
            '#06b6d4', '#84cc16', '#ec4899', '#6366f1', '#14b8a6',
            '#f97316', '#eab308', '#22c55e', '#a855f7'
        ];



// Initialize app
async function init() {
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('transactionDate').value = today;
    document.getElementById('paymentDate').value = today;
    
    // Load managed sales first
    await loadManagedSales();
    await updateManagedSalesBadge();
    
    updateCategoryOptions();
    updateAllData();
    renderRecentTransactions();
    setupDragAndDrop();
    setupRecurringEventListeners();
    
    // Load inventory from database
    if (typeof loadInventory === 'function') await loadInventory();
    if (typeof loadStockMovements === 'function') loadStockMovements();
    
    // Set default date for sales form and default platform
    const saleDateInput = document.getElementById('saleDate');
    if (saleDateInput) {
        saleDateInput.value = today;
    }
    const salePlatformInput = document.getElementById('salePlatform');
    if (salePlatformInput) {
        salePlatformInput.value = 'tiktokshop';
    }
    
    // Update badges and render lists (using database)
    if (typeof updateSalesBadge === 'function') updateSalesBadge().catch(console.error);
    if (typeof updateInventoryBadge === 'function') await updateInventoryBadge();
    if (typeof renderSales === 'function') renderSales().catch(console.error);
    if (typeof renderInventory === 'function') renderInventory();
    
    // Pre-render stock movement list and report/analytics
    if (typeof renderStockMovements === 'function') renderStockMovements();
    if (typeof renderInventoryReport === 'function') renderInventoryReport();
    if (typeof renderInventoryAnalytics === 'function') renderInventoryAnalytics();
}

async function loadManagedSales() {
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/sales_api.php');
        managedSales = await response.json();
    } catch (error) {
        console.error('Error loading managed sales:', error);
        managedSales = [];
    }
}

        // Setup event listeners for recurring form
        function setupRecurringEventListeners() {
            // Wait for DOM elements to be ready
            setTimeout(() => {
                const cicilanCount = document.getElementById('cicilanCount');
                const cicilanInterval = document.getElementById('cicilanInterval');
                const debtDueDate = document.getElementById('debtDueDate');
                const debtAmount = document.getElementById('debtAmount');
                const customCount = document.getElementById('customCount');

                if (cicilanCount) {
                    cicilanCount.addEventListener('change', function() {
                        const customGroup = document.getElementById('customCountGroup');
                        if (this.value === 'custom') {
                            customGroup.style.display = 'block';
                        } else {
                            customGroup.style.display = 'none';
                        }
                        window.updateCicilanPreview();
                    });
                }

                if (cicilanInterval) cicilanInterval.addEventListener('change', window.updateCicilanPreview);
                if (debtDueDate) debtDueDate.addEventListener('change', window.updateCicilanPreview);
                if (debtAmount) debtAmount.addEventListener('input', window.updateCicilanPreview);
                if (customCount) customCount.addEventListener('input', window.updateCicilanPreview);
            }, 100);
        }

        // Setup drag and drop for file import
        function setupDragAndDrop() {
            const importSection = document.getElementById('importSection');
            
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                importSection.addEventListener(eventName, preventDefaults, false);
            });

            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }

            ['dragenter', 'dragover'].forEach(eventName => {
                importSection.addEventListener(eventName, highlight, false);
            });

            ['dragleave', 'drop'].forEach(eventName => {
                importSection.addEventListener(eventName, unhighlight, false);
            });

            function highlight() {
                importSection.classList.add('dragover');
            }

            function unhighlight() {
                importSection.classList.remove('dragover');
            }

            importSection.addEventListener('drop', handleDrop, false);

            function handleDrop(e) {
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    handleCicilanFile(files[0]);
                }
            }
        }

        // Process cicilan file
        async function handleCicilanFile(file) {
            if (!file.name.endsWith('.csv')) {
                showAlert('Please upload a CSV file!', 'error');
                return;
            }

            try {
                const text = await file.text();
                
                // Parse CSV using simple parsing
                const lines = text.split('\n').filter(line => line.trim());
                const headers = lines[0].split(',').map(h => h.trim().replace(/"/g, ''));
                
                if (!headers.includes('Tanggal Jatuh Tempo') || !headers.includes('Nominal Cicilan') || !headers.includes('Keterangan')) {
                    showAlert('Format CSV salah! Pastikan ada kolom: Tanggal Jatuh Tempo, Nominal Cicilan, Keterangan', 'error');
                    return;
                }

                const cicilanData = [];
                
                for (let i = 1; i < lines.length; i++) {
                    const values = lines[i].split(',').map(v => v.trim().replace(/"/g, ''));
                    
                    if (values.length >= 3) {
                        const tanggal = values[0];
                        let nominal = values[1];
                        const keterangan = values[2];
                        
                        // Convert nominal to number
                        if (typeof nominal === 'string') {
                            nominal = parseFloat(nominal.replace(/[^\d]/g, ''));
                        }
                        
                        // Convert date from DD-MM-YYYY to YYYY-MM-DD
                        const dateParts = tanggal.split('-');
                        if (dateParts.length === 3) {
                            const dueDate = `${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`;
                            
                            cicilanData.push({
                                dueDate,
                                amount: nominal,
                                description: keterangan
                            });
                        }
                    }
                }

                if (cicilanData.length === 0) {
                    showAlert('Tidak ada data cicilan yang valid ditemukan!', 'error');
                    return;
                }

                // Group by description (keterangan)
                const groupedCicilan = {};
                cicilanData.forEach(cicilan => {
                    if (!groupedCicilan[cicilan.description]) {
                        groupedCicilan[cicilan.description] = [];
                    }
                    groupedCicilan[cicilan.description].push(cicilan);
                });

                // Create debt entries for each group - DATABASE VERSION
let successCount = 0;
let errorCount = 0;

// Convert forEach ke for...of biar bisa pake await
for (const [keterangan, cicilans] of Object.entries(groupedCicilan)) {
    for (const cicilan of cicilans) {
        try {
            // Kirim ke API database
            const response = await fetch('https://tagihan.ersetsolution.my.id/debt_api.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    amount: cicilan.amount,
                    creditor: keterangan,  // API expect 'creditor' bukan 'to'
                    dueDate: cicilan.dueDate,
                    description: `Cicilan ${keterangan}`,
                    isRecurring: false  // Single debt, bukan recurring
                })
            });

            if (response.ok) {
                successCount++;
            } else {
                console.error('Failed to create debt for:', cicilan);
                errorCount++;
            }
        } catch (error) {
            console.error('Error creating debt:', error);
            errorCount++;
        }
    }
}

// Update success message
if (successCount > 0) {
    // Reset file input
    document.getElementById('cicilanFileInput').value = '';
    
    // Reload data dari database (ganti updateAllData)
    await loadDebts();
    updateAllData();
    renderDebts();
    
    let message = `Berhasil import ${successCount} cicilan!`;
    if (errorCount > 0) {
        message += ` (${errorCount} gagal)`;
    }
    showToast(message, 'success');
} else {
    showToast('Gagal import cicilan!', 'error');
}
                
} catch (error) {
    console.error('Error parsing CSV:', error);
    showAlert('Error parsing CSV file!', 'error');
}
}

        // Switch debt view
        window.switchDebtView = function(view) {
            currentDebtView = view;
            
            // Update button states
            document.getElementById('listViewBtn').classList.toggle('active', view === 'list');
            document.getElementById('calendarViewBtn').classList.toggle('active', view === 'calendar');
            
            // Show/hide views
            document.getElementById('debtListView').style.display = view === 'list' ? 'block' : 'none';
            document.getElementById('debtCalendarView').style.display = view === 'calendar' ? 'block' : 'none';
            
            if (view === 'calendar') {
                renderDebtCalendar();
            } else {
                renderDebts();
            }
        };

        // Toggle recurring options
        function toggleRecurringOptions() {
            const checkbox = document.getElementById('isRecurring');
            const options = document.getElementById('recurringOptions');
            const submitButton = document.getElementById('submitButtonText');
            
            if (checkbox.checked) {
                options.style.display = 'block';
                submitButton.textContent = 'Buat Cicilan';
                updateCicilanPreview();
            } else {
                options.style.display = 'none';
                submitButton.textContent = 'Tambah Utang';
            }
        }

        // Update cicilan preview
        function updateCicilanPreview() {
            const count = document.getElementById('cicilanCount').value;
            const customCount = document.getElementById('customCount').value;
            const interval = document.getElementById('cicilanInterval').value;
            const startDate = document.getElementById('debtDueDate').value;
            const amount = document.getElementById('debtAmount').value;
            
            let finalCount = count === 'custom' ? (customCount || 1) : count;
            
            const intervalText = {
                'weekly': 'mingguan',
                'monthly': 'bulanan', 
                'quarterly': '3 bulanan'
            };
            
            let previewText = `${finalCount}x cicilan ${intervalText[interval]}`;
            
            if (startDate) {
                const start = new Date(startDate);
                previewText += ` mulai ${start.toLocaleDateString('id-ID', { 
                    day: 'numeric', 
                    month: 'short', 
                    year: 'numeric' 
                })}`;
            }
            
            if (amount) {
                const totalAmount = parseFloat(amount) * finalCount;
                previewText += `<br><strong>Total: ${formatCurrency(totalAmount)}</strong>`;
            }
            
            document.getElementById('cicilanPreview').innerHTML = previewText;
        }



        // Toggle transaction form
        function toggleTransactionForm() {
            const formCard = document.getElementById('transactionFormCard');
            formCard.classList.toggle('collapsed');
        }

        // Navigation
        window.navigateTo = function(page) {
            // Update active menu item
            document.querySelectorAll('.menu-item').forEach(item => item.classList.remove('active'));
            event.target.classList.add('active');
            
            // Update page content
            document.querySelectorAll('.page-content').forEach(content => content.classList.remove('active'));
            document.getElementById(page).classList.add('active');
            
            // Update page title
          const pageTitles = {
    'dashboard': 'Dashboard',
    'transactions': 'Transaksi',
    'sales': 'Penjualan', 
    'inventory': 'Inventory',
    'manageSales': 'Kelola Penjualan',
    'crm': 'CRM Pelanggan',
    'debt': 'Manajemen Cicilan',
    'analytics': 'Analytics',
    'categories': 'Pengaturan Kategori',
    'shipping': 'Pengiriman & Notifikasi',  // <- tambah ini
};
            
            document.getElementById('currentPageTitle').textContent = pageTitles[page];
            currentPage = page;
            
            // Render specific page content
            if (page === 'transactions') renderTransactions();
            if (page === 'sales') {
                
                updateSalesBadge();
                populateProductDropdown();
            }
            if (page === 'inventory') {
                renderInventory();
                updateInventoryBadge();
                // Reset to master tab when navigating to inventory page
                if (typeof switchInventoryTab === 'function') {
                    switchInventoryTab('master');
                }
            }
            
            if (page === 'manageSales') {
    renderManagedSales();
    updateManagedSalesBadge();
}
            
            if (page === 'debt') {
    updateDebtStats(); // Ensure debt stats are up to date
    if (currentDebtView === 'calendar') {
        renderDebtCalendar();
    } else {
        renderDebts();
    }
}
if (page === 'analytics') {
    populateMonthYearSelectors(); // Tambah ini
    updateAnalytics();
    
    // Check for new month notification
    checkNewMonthNotification().then(showNotification => {
        if (showNotification) {
            const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'Mei', 'Jun', 'Jul', 'Agu', 'Sep', 'Okt', 'Nov', 'Des'];
            const currentMonth = monthNames[new Date().getMonth()];
            const currentYear = new Date().getFullYear();
            
            showToast(`Data analytics telah diperbarui untuk ${currentMonth} ${currentYear}`, 'info');
        }
    });
}
if (page === 'categories') renderCategories();
if (page === 'crm') {
    updateCRMStats();
    renderCustomersList();
}
if (page === 'shipping') {
    loadShippingList();
}
            
        };

        // Sidebar toggle
        window.toggleSidebar = function() {
            const sidebar = document.getElementById('sidebar');
            if (window.innerWidth <= 768) {
                sidebar.classList.toggle('mobile-open');
            } else {
                sidebar.classList.toggle('collapsed');
            }
        };

        // Show alerts
        function showAlert(message, type) {
            const alertContainer = document.getElementById('alertContainer');
            alertContainer.innerHTML = `
                <div class="alert alert-${type}">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                        ${type === 'success' ? 
                            '<path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>' :
                            '<path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>'
                        }
                    </svg>
                    ${message}
                </div>
            `;
            
            setTimeout(() => {
                alertContainer.innerHTML = '';
            }, 4000);
        }

        // Format currency with graceful handling of invalid values
        function formatCurrency(amount) {
            let numeric = amount;
            // Coerce strings to numbers if possible
            if (typeof numeric !== 'number') {
                numeric = parseFloat(numeric);
            }
            // Fallback to 0 if value is not a finite number
            if (isNaN(numeric) || !isFinite(numeric)) {
                numeric = 0;
            }
            return new Intl.NumberFormat('id-ID', {
                style: 'currency',
                currency: 'IDR',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
            }).format(numeric);
        }

        // Toggle category field
        function toggleCategoryField() {
            const type = document.getElementById('transactionType').value;
            const categoryGroup = document.getElementById('categoryGroup');
            categoryGroup.style.display = type === 'expense' ? 'block' : 'none';
        }

        // Update category options
        async function updateCategoryOptions() {
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/categories_api.php');
        const categories = await response.json();
        
        const categorySelect = document.getElementById('transactionCategory');
        const filterCategory = document.getElementById('filterCategory');
        
        if (categorySelect) {
            categorySelect.innerHTML = '<option value="">Pilih kategori...</option>';
            categories.forEach(category => {
                categorySelect.innerHTML += `<option value="${category}">${category}</option>`;
            });
        }
        
        if (filterCategory) {
            filterCategory.innerHTML = '<option value="">Semua Kategori</option>';
            categories.forEach(category => {
                filterCategory.innerHTML += `<option value="${category}">${category}</option>`;
            });
        }
        
    } catch (error) {
        console.error('Error loading categories:', error);
        // Fallback jika API gagal
        const categorySelect = document.getElementById('transactionCategory');
        const filterCategory = document.getElementById('filterCategory');
        
        if (categorySelect) categorySelect.innerHTML = '<option value="">Pilih kategori...</option>';
        if (filterCategory) filterCategory.innerHTML = '<option value="">Semua Kategori</option>';
    }
}

       // Update all data - Database version (localStorage removed for debts)
function updateAllData() {
    updateDashboard();
    updateDebtStats();
    updateBadges();
    updateBalance();

    // Only persist transactions to localStorage (debts now fully API-based)
    try {
        localStorage.setItem('transactions', JSON.stringify(transactions));
    } catch (e) {
        console.warn('Failed to persist transactions to localStorage', e);
    }
    // Note: debts are now managed entirely via database API, no localStorage needed
}

// Update debt statistics - Database version (calculations from API-loaded data)
function updateDebtStats() {
    // Calculate debt statistics from API-loaded data
    const allDebts = debts; // Include both paid and unpaid (loaded from database)
    const unpaidDebts = debts.filter(d => d.status === 'unpaid');
    
    // Total original debt amount
    const totalOriginal = allDebts.reduce((sum, debt) => sum + debt.amount, 0);
    
    // Remaining debt amount
    const remainingDebt = unpaidDebts.reduce((sum, debt) => sum + debt.remainingAmount, 0);
    
    // Total paid amount (sum all payments from database)
    const totalPaid = allDebts.reduce((sum, debt) => {
        return sum + debt.payments.reduce((paidSum, payment) => paidSum + payment.amount, 0);
    }, 0);
    
    // Active debt count
    const activeCount = unpaidDebts.length;
    
    // Overdue count
    const overdueCount = unpaidDebts.filter(debt => 
        debt.dueDate && new Date(debt.dueDate) < new Date()
    ).length;
    
    // Payment progress percentage
    const paymentProgress = totalOriginal > 0 ? 
        ((totalPaid / totalOriginal) * 100).toFixed(1) : 0;

    // Update UI elements - tetap sama
    if (document.getElementById('remainingDebt')) {
        document.getElementById('remainingDebt').textContent = formatCurrency(remainingDebt);
        document.getElementById('totalOriginalDebt').textContent = formatCurrency(totalOriginal);
        document.getElementById('totalPaidAmount').textContent = formatCurrency(totalPaid);
        document.getElementById('activeDebtCount').textContent = activeCount;
        document.getElementById('paymentProgress').textContent = `${paymentProgress}% lunas`;
        document.getElementById('overdueCount').textContent = `${overdueCount} jatuh tempo`;
    }
}

        // Update dashboard - Database version
async function updateDashboard() {
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/transactions_api.php');
        const transactions = await response.json();
        
        const currentMonth = new Date().getMonth();
        const currentYear = new Date().getFullYear();
        const lastMonth = new Date().getMonth() - 1;
        
        // Calculate totals
        const totalIncome = transactions
            .filter(t => t.type === 'income')
            .reduce((sum, t) => sum + parseFloat(t.amount), 0);
            
        const totalExpense = transactions
            .filter(t => t.type === 'expense')
            .reduce((sum, t) => sum + parseFloat(t.amount), 0);
            
        const totalDebt = debts
            .filter(d => d.status === 'unpaid')
            .reduce((sum, d) => sum + d.remainingAmount, 0);
        
        // Monthly data
        const monthlyIncome = transactions
            .filter(t => {
                const tDate = new Date(t.date);
                return t.type === 'income' && 
                       tDate.getMonth() === currentMonth && 
                       tDate.getFullYear() === currentYear;
            })
            .reduce((sum, t) => sum + parseFloat(t.amount), 0);
            
        const monthlyExpense = transactions
            .filter(t => {
                const tDate = new Date(t.date);
                return t.type === 'expense' && 
                       tDate.getMonth() === currentMonth && 
                       tDate.getFullYear() === currentYear;
            })
            .reduce((sum, t) => sum + parseFloat(t.amount), 0);

        // Last month data for comparison
        const lastMonthIncome = transactions
            .filter(t => {
                const tDate = new Date(t.date);
                return t.type === 'income' && 
                       tDate.getMonth() === lastMonth && 
                       tDate.getFullYear() === currentYear;
            })
            .reduce((sum, t) => sum + parseFloat(t.amount), 0);

        const lastMonthExpense = transactions
            .filter(t => {
                const tDate = new Date(t.date);
                return t.type === 'expense' && 
                       tDate.getMonth() === lastMonth && 
                       tDate.getFullYear() === currentYear;
            })
            .reduce((sum, t) => sum + parseFloat(t.amount), 0);

        // Calculate changes
        const incomeChange = lastMonthIncome > 0 ? 
            ((monthlyIncome - lastMonthIncome) / lastMonthIncome * 100).toFixed(1) : 0;
        const expenseChange = lastMonthExpense > 0 ? 
            ((monthlyExpense - lastMonthExpense) / lastMonthExpense * 100).toFixed(1) : 0;

        const activeDebtsCount = debts.filter(d => d.status === 'unpaid').length;

        // Update UI
        document.getElementById('currentBalance').textContent = formatCurrency(totalIncome - totalExpense);
        document.getElementById('monthlyIncome').textContent = formatCurrency(monthlyIncome);
        document.getElementById('monthlyExpense').textContent = formatCurrency(monthlyExpense);
        document.getElementById('totalDebt').textContent = formatCurrency(totalDebt);
        document.getElementById('debtCount').textContent = `${activeDebtsCount} utang aktif`;

        // Update changes
        document.getElementById('incomeChange').textContent = `${incomeChange >= 0 ? '+' : ''}${incomeChange}%`;
        document.getElementById('expenseChange').textContent = `${expenseChange >= 0 ? '+' : ''}${expenseChange}%`;

        // Update change colors
        const incomeChangeEl = document.getElementById('incomeChange').parentElement;
        const expenseChangeEl = document.getElementById('expenseChange').parentElement;
        
        incomeChangeEl.className = incomeChange >= 0 ? 'stat-change change-positive' : 'stat-change change-negative';
        expenseChangeEl.className = expenseChange <= 0 ? 'stat-change change-positive' : 'stat-change change-negative';
        
    } catch (error) {
        console.error('Error updating dashboard:', error);
    }
}

// Update badges
async function updateBadges() {
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/transactions_api.php');
        const transactions = await response.json();
        
        const currentMonth = new Date().getMonth();
        const currentYear = new Date().getFullYear();
        
        const monthlyTransactions = transactions.filter(t => {
            const tDate = new Date(t.date);
            return tDate.getMonth() === currentMonth && tDate.getFullYear() === currentYear;
        }).length;
        
        const activeDebts = debts.filter(d => d.status === 'unpaid').length;
        
        document.getElementById('transactionBadge').textContent = monthlyTransactions;
        document.getElementById('debtBadge').textContent = activeDebts;

        // Update other badges
        if (typeof updateSalesBadge === 'function') updateSalesBadge().catch(console.error);
        if (typeof updateInventoryBadge === 'function') updateInventoryBadge();
        
        // Load customer data from CRM API
        try {
            const customerResponse = await fetch('https://tagihan.ersetsolution.my.id/customers_api.php');
            customerData = await customerResponse.json();
            
            // Map database fields to expected format
            customerData = customerData.map(c => ({
                name: c.name,
                phone: c.phone,
                address: c.address,
                orderCount: parseInt(c.order_count) || 0,
                totalSpent: parseFloat(c.total_revenue) || 0,
                lastOrder: c.last_order_date,
                firstOrder: c.first_order_date,
                status: c.status || 'active',
                orders: c.orders || []
            }));
            
            // Filter active customers
            const activeCustomers = customerData.filter(c => c.orderCount > 0 && c.totalSpent > 0);
            
            const badge = document.getElementById('crmBadge');
            if (badge) {
                badge.textContent = activeCustomers.length;
            }
        } catch (error) {
            console.error('Error loading customer data:', error);
            customerData = [];
            const badge = document.getElementById('crmBadge');
            if (badge) badge.textContent = '0';
        }

    } catch (error) {
        console.error('Error updating badges:', error);
    }
}

        async function updateBalance() {
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/transactions_api.php');
        const transactions = await response.json();
        
        const totalIncome = transactions
            .filter(t => t.type === 'income')
            .reduce((sum, t) => sum + parseFloat(t.amount), 0);
            
        const totalExpense = transactions
            .filter(t => t.type === 'expense')
            .reduce((sum, t) => sum + parseFloat(t.amount), 0);
        
        const balance = totalIncome - totalExpense;
        document.getElementById('balanceDisplay').textContent = `Saldo: ${formatCurrency(balance)}`;
    } catch (error) {
        console.error('Error loading balance:', error);
    }
}

        // Transaction form handler - Database version
document.getElementById('transactionForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const type = document.getElementById('transactionType').value;
    const amountInput = document.getElementById('transactionAmount');
    const amountValue = amountInput.value.trim();
    const amount = parseFloat(amountValue);
    const category = document.getElementById('transactionCategory').value;
    const date = document.getElementById('transactionDate').value;
    const description = document.getElementById('transactionDescription').value;
    
    // Validate amount
    if (!amountValue || isNaN(amount) || !isFinite(amount) || amount <= 0) {
        showAlert('Masukkan jumlah yang valid!', 'error');
        return;
    }
    // Validate date
    if (!date) {
        showAlert('Masukkan tanggal transaksi!', 'error');
        return;
    }
    // Validate category for expenses
    if (type === 'expense' && !category) {
        showAlert('Pilih kategori untuk pengeluaran!', 'error');
        return;
    }
    
    try {
        // Save to database via API
        const response = await fetch('https://tagihan.ersetsolution.my.id/transactions_api.php', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                type: type,
                amount: amount,
                category: type === 'expense' ? category : 'Pendapatan',
                date: date,
                description: description
            })
        });
        
        if (response.ok) {
            // Reset form fields
            this.reset();
            // Reset default date to today
            document.getElementById('transactionDate').value = new Date().toISOString().split('T')[0];
            toggleCategoryField();
            updateAllData();
            renderRecentTransactions();
            if (currentPage === 'transactions') renderTransactions();
            
            // Refresh analytics jika lagi di page analytics
            if (currentPage === 'analytics') await updateAnalytics();
            
            showAlert('Transaksi berhasil ditambahkan!', 'success');
            // Auto collapse form after successful submission
            document.getElementById('transactionFormCard').classList.add('collapsed');
        } else {
            showAlert('Error menambah transaksi!', 'error');
        }
    } catch (error) {
        showAlert('Error koneksi!', 'error');
    }
});

        // Render recent transactions
        async function renderRecentTransactions() {
    const container = document.getElementById('recentTransactions');
    if (!container) return;
    
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/transactions_api.php');
        const transactions = await response.json();
        
        const recent = transactions.slice(0, 5);
        
        if (recent.length === 0) {
            container.innerHTML = '<div style="text-align: center; color: #94a3b8; padding: 20px;">Belum ada transaksi</div>';
            return;
        }
        
        container.innerHTML = recent.map(transaction => `
            <div class="transaction-item">
                <div class="transaction-info">
                    <h4>${transaction.type === 'income' ? 'Pemasukan' : 'Pengeluaran'}</h4>
                    <p>${transaction.category} • ${new Date(transaction.date).toLocaleDateString('id-ID')}</p>
                </div>
                <div class="transaction-amount ${transaction.type === 'income' ? 'amount-positive' : 'amount-negative'}">
                    ${transaction.type === 'income' ? '+' : '-'}${formatCurrency(transaction.amount)}
                </div>
            </div>
        `).join('');
        
    } catch (error) {
        console.error('Error loading transactions:', error);
        container.innerHTML = '<div style="text-align: center; color: #ef4444; padding: 20px;">Error loading transactions</div>';
    }
}

        // Render transactions - Database version
async function renderTransactions() {
    const container = document.getElementById('transactionsList');
    
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/transactions_api.php');
        const transactions = await response.json();
        
        let filteredTransactions = [...transactions];
        
        // Apply filters
        const searchTerm = document.getElementById('searchTransaction').value.toLowerCase();
        const typeFilter = document.getElementById('filterType').value;
        const categoryFilter = document.getElementById('filterCategory').value;
        
        if (searchTerm) {
            filteredTransactions = filteredTransactions.filter(t => 
                (t.description || '').toLowerCase().includes(searchTerm) ||
                t.category.toLowerCase().includes(searchTerm)
            );
        }
        if (typeFilter) {
            filteredTransactions = filteredTransactions.filter(t => t.type === typeFilter);
        }
        if (categoryFilter) {
            filteredTransactions = filteredTransactions.filter(t => t.category === categoryFilter);
        }
        
        if (filteredTransactions.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <svg viewBox="0 0 24 24" fill="currentColor">
                        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/>
                    </svg>
                    <h3>Tidak ada transaksi</h3>
                    <p>Coba ubah filter pencarian</p>
                </div>
            `;
            return;
        }
        
        container.innerHTML = filteredTransactions.map(transaction => `
    <div class="transaction-item">
        <div class="transaction-info">
            <h4>${transaction.description || transaction.category}</h4>
            <p>${transaction.category} • ${new Date(transaction.date).toLocaleDateString('id-ID', {
                weekday: 'short',
                year: 'numeric',
                month: 'short', 
                day: 'numeric'
            })}</p>
        </div>
        <div style="display: flex; align-items: center; gap: 16px;">
            <div class="transaction-amount ${transaction.type === 'income' ? 'amount-positive' : 'amount-negative'}">
                ${transaction.type === 'income' ? '+' : '-'} ${formatCurrency(transaction.amount)}
            </div>
            <button onclick="deleteTransaction(${transaction.id})" class="btn btn-danger btn-sm">
                Hapus
            </button>
        </div>
    </div>
`).join('');
        
    } catch (error) {
        console.error('Error loading transactions:', error);
        container.innerHTML = '<div style="text-align: center; color: #ef4444; padding: 20px;">Error loading transactions</div>';
    }
}

        // Add event listeners for filters
        document.getElementById('searchTransaction').addEventListener('input', () => {
            if (currentPage === 'transactions') renderTransactions();
        });
        document.getElementById('filterType').addEventListener('change', () => {
            if (currentPage === 'transactions') renderTransactions();
        });
        document.getElementById('filterCategory').addEventListener('change', () => {
            if (currentPage === 'transactions') renderTransactions();
        });

        // Category form handler - Database version
document.getElementById('categoryForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const categoryName = document.getElementById('categoryName').value.trim();
    
    if (!categoryName) {
        showAlert('Nama kategori tidak boleh kosong!', 'error');
        return;
    }
    
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/categories_api.php', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name: categoryName })
        });
        
        if (response.ok) {
            this.reset();
            updateCategoryOptions();
            renderCategories();
            showAlert('Kategori berhasil ditambahkan!', 'success');
        } else {
            showAlert('Error menambah kategori!', 'error');
        }
    } catch (error) {
        showAlert('Error koneksi!', 'error');
    }
});

async function renderCategories() {
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/categories_api.php');
        const categories = await response.json();
        
        const container = document.getElementById('categoriesList');
        if (!container) return;
        
        container.innerHTML = categories.map((category, index) => `
            <div class="category-item" style="animation-delay: ${index * 0.1}s">
                <span>${category}</span>
                <button class="delete-category" onclick="deleteCategory('${category}')">Hapus</button>
            </div>
        `).join('');
        
    } catch (error) {
        console.error('Error loading categories:', error);
        const container = document.getElementById('categoriesList');
        if (container) container.innerHTML = '<p style="color: #ef4444;">Error loading categories</p>';
    }
}

        // Debt form handler - Database API version
document.getElementById('debtForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const amount = parseFloat(document.getElementById('debtAmount').value);
    const to = document.getElementById('debtTo').value.trim();
    const startDate = document.getElementById('debtDueDate').value;
    const description = document.getElementById('debtDescription').value;
    const isRecurring = document.getElementById('isRecurring').checked;

    // Validation tetap sama
    if (!to.trim()) {
        showAlert('Nama kreditor wajib diisi!', 'error');
        return;
    }

    if (amount <= 0) {
        showAlert('Jumlah harus lebih besar dari 0!', 'error');
        return;
    }

    try {
        if (isRecurring) {
            // Handle recurring cicilan
            const countSelect = document.getElementById('cicilanCount').value;
            const customCount = document.getElementById('customCount').value;
            const interval = document.getElementById('cicilanInterval').value;
            
            let finalCount = countSelect === 'custom' ? parseInt(customCount || 1) : parseInt(countSelect);
            
            if (!startDate) {
                showAlert('Pilih tanggal mulai untuk cicilan berulang!', 'error');
                return;
            }

            // POST recurring debt ke API
            const response = await fetch('https://tagihan.ersetsolution.my.id/debt_api.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    amount: amount,
                    creditor: to,
                    dueDate: startDate,
                    description: description,
                    isRecurring: true,
                    count: finalCount,
                    interval: interval
                })
            });

            if (response.ok) {
                const result = await response.json();
                showAlert(`Berhasil membuat ${result.created_count} cicilan!`, 'success');
            } else {
                const errorData = await response.json();
                showAlert('Error: ' + (errorData.error || 'Gagal membuat cicilan'), 'error');
                return;
            }
            
        } else {
            // Handle single debt
            const response = await fetch('https://tagihan.ersetsolution.my.id/debt_api.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    amount: amount,
                    creditor: to,
                    dueDate: startDate,
                    description: description,
                    isRecurring: false
                })
            });

            if (response.ok) {
                showAlert('Utang berhasil ditambahkan!', 'success');
            } else {
                const errorData = await response.json();
                showAlert('Error: ' + (errorData.error || 'Gagal menambah utang'), 'error');
                return;
            }
        }
        
        // Reset form - UI tetap sama
        this.reset();
        document.getElementById('isRecurring').checked = false;
        toggleRecurringOptions();
        
        // Refresh data dari database
        await loadDebts();
        updateAllData();
        renderDebts();
        
        // Auto collapse form after successful submission - UI tetap sama
        document.getElementById('debtFormCard').classList.add('collapsed');
        
    } catch (error) {
        console.error('Error submitting debt:', error);
        showAlert('Error koneksi ke server!', 'error');
    }
});

// Render debts - tetap sama, cuma baca dari database
function renderDebts() {
    const container = document.getElementById('debtsList');
    const activeDebts = debts.filter(d => d.status === 'unpaid');

    if (activeDebts.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                </svg>
                <h3>Tidak ada utang aktif</h3>
                <p>Import cicilan atau tambah utang manual</p>
            </div>
        `;
        return;
    }

    // Group debts by 'to' field - logic tetap sama
    const groupedDebts = {};
    activeDebts.forEach(debt => {
        if (!groupedDebts[debt.to]) {
            groupedDebts[debt.to] = [];
        }
        groupedDebts[debt.to].push(debt);
    });

    container.innerHTML = Object.entries(groupedDebts).map(([creditor, debtList]) => {
        const totalAmount = debtList.reduce((sum, debt) => sum + debt.remainingAmount, 0);
        const overdueCount = debtList.filter(debt => 
            debt.dueDate && new Date(debt.dueDate) < new Date()
        ).length;

        return `
            <div class="debt-group">
                <div class="debt-group-header">
                    <div>
                        <div class="debt-group-title">${creditor}</div>
                        <div class="debt-group-summary">
                            ${debtList.length} cicilan • ${formatCurrency(totalAmount)}
                            ${overdueCount > 0 ? ` • <span style="color: #ef4444;">${overdueCount} jatuh tempo</span>` : ''}
                        </div>
                    </div>
                    <button class="btn btn-secondary btn-sm" onclick="toggleDebtGroup('${creditor.replace(/'/g, "\\'")}')">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M7 10l5 5 5-5z"/>
                        </svg>
                    </button>
                </div>
                <div class="debt-group-items" id="group-${creditor.replace(/[^a-zA-Z0-9]/g, '')}" style="display: none;">
                    ${debtList.sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate)).map(debt => {
                        const isOverdue = debt.dueDate && new Date(debt.dueDate) < new Date();
                        
                        return `
                            <div class="debt-item ${isOverdue ? 'overdue' : ''}">
                                <div class="debt-info">
                                    <h4>${formatCurrency(debt.remainingAmount)}</h4>
                                    <p>${debt.description || 'Tanpa deskripsi'} ${debt.dueDate ? '• Jatuh tempo: ' + new Date(debt.dueDate).toLocaleDateString('id-ID') : ''}</p>
                                    ${isOverdue ? '<p style="color: #ef4444; font-weight: bold;">⚠️ Jatuh tempo!</p>' : ''}
                                </div>
                                <div class="debt-actions">
                                    <button class="btn btn-success btn-sm" onclick="openPaymentModal(${debt.id})">Bayar</button>
                                    <button class="btn btn-danger btn-sm" onclick="deleteDebt(${debt.id})">Hapus</button>
                                </div>
                            </div>
                        `;
                    }).join('')}
                </div>
            </div>
        `;
    }).join('');
}

// Render debt calendar view - tetap sama
function renderDebtCalendar() {
    const container = document.getElementById('debtCalendar');
    const activeDebts = debts.filter(d => d.status === 'unpaid' && d.dueDate);

    if (activeDebts.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/>
                </svg>
                <h3>Tidak ada jadwal cicilan</h3>
                <p>Import cicilan untuk melihat calendar view</p>
            </div>
        `;
        return;
    }

    // Group by month - logic tetap sama
    const groupedByMonth = {};
    activeDebts.forEach(debt => {
        const dueDate = new Date(debt.dueDate);
        const monthKey = `${dueDate.getFullYear()}-${(dueDate.getMonth() + 1).toString().padStart(2, '0')}`;
        
        if (!groupedByMonth[monthKey]) {
            groupedByMonth[monthKey] = [];
        }
        groupedByMonth[monthKey].push(debt);
    });

    // Sort months
    const sortedMonths = Object.keys(groupedByMonth).sort();

    container.innerHTML = sortedMonths.map(monthKey => {
        const [year, month] = monthKey.split('-');
        const monthName = new Date(year, month - 1, 1).toLocaleDateString('id-ID', { 
            month: 'long', 
            year: 'numeric' 
        });

        const monthDebts = groupedByMonth[monthKey].sort((a, b) => 
            new Date(a.dueDate) - new Date(b.dueDate)
        );

        const totalMonthAmount = monthDebts.reduce((sum, debt) => sum + debt.remainingAmount, 0);

        return `
            <div class="calendar-month">
                <div class="calendar-month-title">
                    ${monthName}
                    <span style="font-size: 14px; color: #94a3b8; font-weight: normal;">
                        ${monthDebts.length} cicilan • ${formatCurrency(totalMonthAmount)}
                    </span>
                </div>
                <div class="calendar-items">
                    ${monthDebts.map(debt => {
                        const dueDate = new Date(debt.dueDate);
                        const today = new Date();
                        const daysDiff = Math.ceil((dueDate - today) / (1000 * 60 * 60 * 24));
                        
                        let itemClass = 'calendar-item';
                        if (daysDiff < 0) itemClass += ' overdue';
                        else if (daysDiff <= 7) itemClass += ' due-soon';

                        return `
                            <div class="${itemClass}">
                                <div>
                                    <div class="calendar-date">
                                        ${dueDate.getDate()} ${dueDate.toLocaleDateString('id-ID', { month: 'short' })}
                                    </div>
                                    <div class="calendar-desc">${debt.to}</div>
                                </div>
                                <div class="calendar-amount">
                                    ${formatCurrency(debt.remainingAmount)}
                                </div>
                            </div>
                        `;
                    }).join('')}
                </div>
            </div>
        `;
    }).join('');
}

// Payment form handler - Database API version
document.getElementById('paymentForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const debtId = parseInt(document.getElementById('paymentDebtId').value);
    const amount = parseFloat(document.getElementById('paymentAmount').value);
    const date = document.getElementById('paymentDate').value;
    const note = document.getElementById('paymentNote').value;
    const paymentType = document.getElementById('paymentType').value;
    const debt = debts.find(d => d.id === debtId);
    
    // Validation tetap sama
    if (amount > debt.remainingAmount) {
        showAlert('Jumlah pembayaran melebihi sisa utang!', 'error');
        return;
    }
    if (amount <= 0) {
        showAlert('Masukkan jumlah pembayaran yang valid!', 'error');
        return;
    }
    try {
        // PUT payment ke API
        const response = await fetch('https://tagihan.ersetsolution.my.id/debt_api.php', {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                id: debtId,
                payment: {
                    amount: amount,
                    date: date,
                    note: note,
                    type: paymentType
                }
            })
        });
        if (response.ok) {
            const result = await response.json();
            
            // Success message tetap sama logic
            let successMessage = '';
            if (result.new_status === 'paid') {
                successMessage = `Utang telah LUNAS! Berhasil bayar ${formatCurrency(amount)}`;
            } else {
                successMessage = `Berhasil bayar ${formatCurrency(amount)}. Sisa: ${formatCurrency(result.new_remaining_amount)}`;
            }
            // Refresh data dari database
            await loadDebts();
            updateAllData();
            renderRecentTransactions();
            if (currentPage === 'transactions') renderTransactions();
            renderDebts();
            
            // Refresh analytics jika lagi di page analytics
            if (currentPage === 'analytics') await updateAnalytics();
            
            window.closePaymentModal();
            showAlert(successMessage, 'success');
            
        } else {
            const errorData = await response.json();
            showAlert('Error: ' + (errorData.error || 'Gagal memproses pembayaran'), 'error');
        }
        
    } catch (error) {
        console.error('Error processing payment:', error);
        showAlert('Error koneksi ke server!', 'error');
    }
});

// Setup payment amount input listener - tetap sama
document.getElementById('paymentAmount').addEventListener('input', updatePaymentSummary);

// Update analytics - Database version (FIXED) 
async function updateAnalytics(selectedMonth = null, selectedYear = null) {
    // Step 1: Loading data
    showAnalyticsLoading(true, 'Memuat data transaksi...');
    
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/transactions_api.php');
        const transactions = await response.json();
        
        // Step 2: Processing data
        showAnalyticsLoading(true, 'Menghitung statistik...');
        await new Promise(resolve => setTimeout(resolve, 800));
        
        // Get month/year from selector or use current
        const targetMonth = selectedMonth || document.getElementById('analyticsMonth')?.value || (new Date().getMonth() + 1);
        const targetYear = selectedYear || document.getElementById('analyticsYear')?.value || new Date().getFullYear();
        
        // Filter transactions by selected period
        const periodTransactions = transactions.filter(t => {
            const tDate = new Date(t.date);
            return (tDate.getMonth() + 1) == targetMonth && tDate.getFullYear() == targetYear;
        });
        
        // ALL METRICS BASED ON SELECTED PERIOD
        const totalIncome = periodTransactions
            .filter(t => t.type === 'income')
            .reduce((sum, t) => sum + parseFloat(t.amount), 0);
            
        const totalExpense = periodTransactions
            .filter(t => t.type === 'expense')
            .reduce((sum, t) => sum + parseFloat(t.amount), 0);

        // Profit margin (selected period)
        const profitMargin = totalIncome > 0 ? ((totalIncome - totalExpense) / totalIncome * 100).toFixed(1) : 0;
        document.getElementById('profitMargin').textContent = `${profitMargin}%`;

        // Average transactions per day (selected period)
        const daysInMonth = new Date(targetYear, targetMonth, 0).getDate();
        const avgTransactions = periodTransactions.length > 0 ? (periodTransactions.length / daysInMonth).toFixed(1) : 0;
        document.getElementById('avgTransactions').textContent = avgTransactions;

        // Top expense category (selected period)
        const expensesByCategory = {};
        periodTransactions.filter(t => t.type === 'expense').forEach(t => {
            expensesByCategory[t.category] = (expensesByCategory[t.category] || 0) + parseFloat(t.amount);
        });
        
        const topCategory = Object.entries(expensesByCategory).sort((a, b) => b[1] - a[1])[0];
        document.getElementById('topCategory').textContent = topCategory ? topCategory[0] : '-';
        document.getElementById('topCategoryAmount').textContent = topCategory ? formatCurrency(topCategory[1]) : 'Rp 0';

        // Burn rate (selected period)
        const monthlyExpense = periodTransactions
            .filter(t => t.type === 'expense')
            .reduce((sum, t) => sum + parseFloat(t.amount), 0);
        
        document.getElementById('burnRate').textContent = formatCurrency(monthlyExpense);

        // Sales Analytics - Filter by selected period
        const periodSales = managedSales.filter(sale => {
            const saleDate = new Date(sale.sale_date);
            return (saleDate.getMonth() + 1) == targetMonth && saleDate.getFullYear() == targetYear;
        });
        
        const paidSales = periodSales.filter(sale => sale.payment_status === 'paid');
        const returnSales = periodSales.filter(sale => sale.payment_status === 'return');

        // Total Sales Revenue (selected period, paid only)
        const totalSalesRevenue = paidSales.reduce((sum, sale) => sum + parseFloat(sale.total_amount), 0);
        document.getElementById('totalSalesRevenue').textContent = formatCurrency(totalSalesRevenue);
        document.getElementById('salesCount').textContent = `${paidSales.length} transaksi`;

        // Sales Profit (selected period)
        const totalSalesProfit = paidSales.reduce((sum, sale) => {
            const saleProfit = parseFloat(sale.total_amount) - sale.products.reduce((cogs, product) => 
                cogs + (parseFloat(product.purchase_price) * parseInt(product.quantity)), 0);
            return sum + saleProfit;
        }, 0);
        document.getElementById('totalSalesProfit').textContent = formatCurrency(totalSalesProfit);

        // Return Rate (selected period)
        const returnRate = periodSales.length > 0 ? ((returnSales.length / periodSales.length) * 100).toFixed(1) : 0;
        document.getElementById('returnRate').textContent = `${returnRate}%`;
        document.getElementById('returnCount').textContent = `${returnSales.length} return`;

        // Top Platform (selected period)
        const platformSales = {};
        paidSales.forEach(sale => {
            const platform = sale.platform || 'other';
            platformSales[platform] = (platformSales[platform] || 0) + parseFloat(sale.total_amount);
        });

        const topPlatformEntry = Object.entries(platformSales).sort((a, b) => b[1] - a[1])[0];
        const platformNames = {
            'tiktokshop': 'TikTok Shop',
            'shopee': 'Shopee', 
            'tokopedia': 'Tokopedia',
            'other': 'Marketplace Lain'
        };

        if (topPlatformEntry) {
            document.getElementById('topPlatform').textContent = platformNames[topPlatformEntry[0]] || topPlatformEntry[0];
            document.getElementById('topPlatformAmount').textContent = formatCurrency(topPlatformEntry[1]);
        } else {
            document.getElementById('topPlatform').textContent = '-';
            document.getElementById('topPlatformAmount').textContent = 'Rp 0';
        }

        // Step 3: Creating charts
        showAnalyticsLoading(true, 'Membuat grafik...');
        await new Promise(resolve => setTimeout(resolve, 600));

        // Render charts with period data
        renderCategoryChart(periodTransactions);
        renderTrendChart();
        renderComparisonChart();

        // Update insights with period data
        updateInsights(periodTransactions);
        
        // Hide loading indicator setelah selesai
        showAnalyticsLoading(false);
        
    } catch (error) {
        console.error('Error updating analytics:', error);
        // Hide loading indicator jika error
        showAnalyticsLoading(false);
    }
}

// Manual refresh analytics function
async function refreshAnalytics() {
    const selectedMonth = document.getElementById('analyticsMonth').value;
    const selectedYear = document.getElementById('analyticsYear').value;
    
    if (selectedMonth && selectedYear) {
        console.log(`Updating analytics for ${selectedMonth}/${selectedYear}`);
        // Untuk sekarang, panggil updateAnalytics() biasa dulu
        await updateAnalytics();
    } else {
        showToast('Pilih bulan dan tahun terlebih dahulu', 'warning');
    }
}

function populateMonthYearSelectors() {
    const monthSelect = document.getElementById('analyticsMonth');
    const yearSelect = document.getElementById('analyticsYear');
    
    if (!monthSelect || !yearSelect) return;
    
    const months = [
        'Januari', 'Februari', 'Maret', 'April', 'Mei', 'Juni',
        'Juli', 'Agustus', 'September', 'Oktober', 'November', 'Desember'
    ];
    
    const currentMonth = new Date().getMonth() + 1;
    const currentYear = new Date().getFullYear();
    
    // Populate months
    monthSelect.innerHTML = '';
    months.forEach((month, index) => {
        const option = document.createElement('option');
        option.value = index + 1;
        option.textContent = month;
        option.selected = (index + 1) === currentMonth;
        monthSelect.appendChild(option);
    });
    
    // Populate years (current - 2 years ke belakang)
    yearSelect.innerHTML = '';
    for (let year = currentYear; year >= currentYear - 2; year--) {
        const option = document.createElement('option');
        option.value = year;
        option.textContent = year;
        option.selected = year === currentYear;
        yearSelect.appendChild(option);
    }
}

// Show/hide analytics loading indicator
function showAnalyticsLoading(isLoading, message = 'Loading data...') {
    const pageTitle = document.querySelector('#analytics .page-title');
    if (pageTitle) {
        if (isLoading) {
            pageTitle.innerHTML = `
                Business Analytics 
                <span id="loadingSpinner" style="
                    color: #3b82f6; 
                    font-size: 14px;
                    font-weight: 600;
                    margin-left: 12px;
                ">
                    ⟳ ${message}
                </span>
            `;
            
            // Start rotation animation
            const spinner = document.getElementById('loadingSpinner');
            let rotation = 0;
            const rotateInterval = setInterval(() => {
                rotation += 10;
                spinner.style.transform = `rotate(${rotation}deg)`;
            }, 50);
            
            pageTitle.dataset.intervalId = rotateInterval;
            
        } else {
            // Clear interval
            if (pageTitle.dataset.intervalId) {
                clearInterval(pageTitle.dataset.intervalId);
                delete pageTitle.dataset.intervalId;
            }
            pageTitle.innerHTML = 'Business Analytics';
        }
    }
}

        // Destroy existing chart
        function destroyChart(chartId) {
            if (charts[chartId]) {
                charts[chartId].destroy();
                delete charts[chartId];
            }
        }

        // Render category breakdown chart
async function renderCategoryChart() {
    destroyChart('categoryChart');
    
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/transactions_api.php');
        const transactions = await response.json();
        
        const expensesByCategory = {};
        transactions.filter(t => t.type === 'expense').forEach(t => {
            const amount = parseFloat(t.amount);
            expensesByCategory[t.category] = (expensesByCategory[t.category] || 0) + amount;
        });

        const sortedCategories = Object.entries(expensesByCategory)
            .sort((a, b) => b[1] - a[1])
            .slice(0, 8);

        if (sortedCategories.length === 0) {
            const ctx = document.getElementById('categoryChart').getContext('2d');
            ctx.fillStyle = '#64748b';
            ctx.font = '16px Inter';
            ctx.textAlign = 'center';
            ctx.fillText('Belum ada data pengeluaran', ctx.canvas.width / 2, ctx.canvas.height / 2);
            return;
        }

        // Rest of chart code sama...
        const data = {
            labels: sortedCategories.map(([category]) => category),
            datasets: [{
                data: sortedCategories.map(([, amount]) => amount),
                backgroundColor: chartColors.slice(0, sortedCategories.length),
                borderColor: '#1e293b',
                borderWidth: 2,
                hoverBorderWidth: 3
            }]
        };

        const config = {
            type: 'doughnut',
            data: data,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'right',
                        labels: {
                            color: '#e2e8f0',
                            font: { size: 12 },
                            usePointStyle: true,
                            padding: 15
                        }
                    },
                    tooltip: {
                        backgroundColor: '#1e293b',
                        titleColor: '#e2e8f0',
                        bodyColor: '#e2e8f0',
                        borderColor: '#374151',
                        borderWidth: 1,
                        callbacks: {
                            label: function(context) {
                                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                const percentage = ((context.raw / total) * 100).toFixed(1);
                                return `${context.label}: ${formatCurrency(context.raw)} (${percentage}%)`;
                            }
                        }
                    }
                },
                elements: {
                    arc: {
                        borderWidth: 2
                    }
                }
            }
        };

        const ctx = document.getElementById('categoryChart').getContext('2d');
        charts['categoryChart'] = new Chart(ctx, config);
        
    } catch (error) {
        console.error('Error loading chart data:', error);
    }
}

        async function renderTrendChart() {
    destroyChart('trendChart');
    
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/transactions_api.php');
        const transactions = await response.json();
        
        // Get last 6 months data
        const monthsData = [];
        const now = new Date();
        
        for (let i = 5; i >= 0; i--) {
            const date = new Date(now.getFullYear(), now.getMonth() - i, 1);
            const monthName = date.toLocaleDateString('id-ID', { month: 'short' });
            
            const monthlyIncome = transactions.filter(t => {
                const tDate = new Date(t.date);
                return t.type === 'income' && 
                       tDate.getMonth() === date.getMonth() && 
                       tDate.getFullYear() === date.getFullYear();
            }).reduce((sum, t) => sum + parseFloat(t.amount), 0);

            const monthlyExpense = transactions.filter(t => {
                const tDate = new Date(t.date);
                return t.type === 'expense' && 
                       tDate.getMonth() === date.getMonth() && 
                       tDate.getFullYear() === date.getFullYear();
            }).reduce((sum, t) => sum + parseFloat(t.amount), 0);

            monthsData.push({
                month: monthName,
                income: monthlyIncome,
                expense: monthlyExpense
            });
        }

        // Rest of chart config sama...
        const data = {
            labels: monthsData.map(m => m.month),
            datasets: [
                {
                    label: 'Pendapatan',
                    data: monthsData.map(m => m.income),
                    borderColor: '#10b981',
                    backgroundColor: 'rgba(16, 185, 129, 0.1)',
                    fill: true,
                    tension: 0.4,
                    pointBackgroundColor: '#10b981',
                    pointBorderColor: '#1e293b',
                    pointBorderWidth: 2
                },
                {
                    label: 'Pengeluaran',
                    data: monthsData.map(m => m.expense),
                    borderColor: '#ef4444',
                    backgroundColor: 'rgba(239, 68, 68, 0.1)',
                    fill: true,
                    tension: 0.4,
                    pointBackgroundColor: '#ef4444',
                    pointBorderColor: '#1e293b',
                    pointBorderWidth: 2
                }
            ]
        };

        const config = {
            type: 'line',
            data: data,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            color: '#94a3b8',
                            font: { size: 12 },
                            callback: function(value) {
                                return formatCurrency(value);
                            }
                        },
                        grid: {
                            color: '#374151',
                            drawBorder: false
                        }
                    },
                    x: {
                        ticks: {
                            color: '#94a3b8',
                            font: { size: 12 }
                        },
                        grid: {
                            color: '#374151',
                            drawBorder: false
                        }
                    }
                },
                plugins: {
                    legend: {
                        labels: {
                            color: '#e2e8f0',
                            font: { size: 12 },
                            usePointStyle: true
                        }
                    },
                    tooltip: {
                        backgroundColor: '#1e293b',
                        titleColor: '#e2e8f0',
                        bodyColor: '#e2e8f0',
                        borderColor: '#374151',
                        borderWidth: 1,
                        callbacks: {
                            label: function(context) {
                                return `${context.dataset.label}: ${formatCurrency(context.raw)}`;
                            }
                        }
                    }
                }
            }
        };

        const ctx = document.getElementById('trendChart').getContext('2d');
        charts['trendChart'] = new Chart(ctx, config);
        
    } catch (error) {
        console.error('Error loading trend chart:', error);
    }
}

       async function renderComparisonChart() {
    destroyChart('comparisonChart');
    
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/transactions_api.php');
        const transactions = await response.json();
        
        // Get last 6 months data
        const monthsData = [];
        const now = new Date();
        
        for (let i = 5; i >= 0; i--) {
            const date = new Date(now.getFullYear(), now.getMonth() - i, 1);
            const monthName = date.toLocaleDateString('id-ID', { month: 'short', year: '2-digit' });
            
            const monthlyIncome = transactions.filter(t => {
                const tDate = new Date(t.date);
                return t.type === 'income' && 
                       tDate.getMonth() === date.getMonth() && 
                       tDate.getFullYear() === date.getFullYear();
            }).reduce((sum, t) => sum + parseFloat(t.amount), 0);

            const monthlyExpense = transactions.filter(t => {
                const tDate = new Date(t.date);
                return t.type === 'expense' && 
                       tDate.getMonth() === date.getMonth() && 
                       tDate.getFullYear() === date.getFullYear();
            }).reduce((sum, t) => sum + parseFloat(t.amount), 0);

            monthsData.push({
                month: monthName,
                income: monthlyIncome,
                expense: monthlyExpense,
                profit: monthlyIncome - monthlyExpense
            });
        }

        const data = {
            labels: monthsData.map(m => m.month),
            datasets: [
                {
                    label: 'Pendapatan',
                    data: monthsData.map(m => m.income),
                    backgroundColor: 'rgba(16, 185, 129, 0.8)',
                    borderColor: '#10b981',
                    borderWidth: 1
                },
                {
                    label: 'Pengeluaran',
                    data: monthsData.map(m => m.expense),
                    backgroundColor: 'rgba(239, 68, 68, 0.8)',
                    borderColor: '#ef4444',
                    borderWidth: 1
                },
                {
                    label: 'Profit',
                    data: monthsData.map(m => m.profit),
                    backgroundColor: 'rgba(59, 130, 246, 0.8)',
                    borderColor: '#3b82f6',
                    borderWidth: 1
                }
            ]
        };

        const config = {
            type: 'bar',
            data: data,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            color: '#94a3b8',
                            font: { size: 12 },
                            callback: function(value) {
                                return formatCurrency(value);
                            }
                        },
                        grid: {
                            color: '#374151',
                            drawBorder: false
                        }
                    },
                    x: {
                        ticks: {
                            color: '#94a3b8',
                            font: { size: 12 }
                        },
                        grid: {
                            color: '#374151',
                            drawBorder: false,
                            display: false
                        }
                    }
                },
                plugins: {
                    legend: {
                        labels: {
                            color: '#e2e8f0',
                            font: { size: 12 },
                            usePointStyle: true
                        }
                    },
                    tooltip: {
                        backgroundColor: '#1e293b',
                        titleColor: '#e2e8f0',
                        bodyColor: '#e2e8f0',
                        borderColor: '#374151',
                        borderWidth: 1,
                        callbacks: {
                            label: function(context) {
                                return `${context.dataset.label}: ${formatCurrency(context.raw)}`;
                            }
                        }
                    }
                }
            }
        };

        const ctx = document.getElementById('comparisonChart').getContext('2d');
        charts['comparisonChart'] = new Chart(ctx, config);
        
    } catch (error) {
        console.error('Error loading comparison chart:', error);
    }
}

        // Update insights
        function updateInsights() {
            const currentMonth = new Date().getMonth();
            const currentYear = new Date().getFullYear();
            
            const monthlyExpense = transactions
                .filter(t => {
                    const tDate = new Date(t.date);
                    return t.type === 'expense' && 
                           tDate.getMonth() === currentMonth && 
                           tDate.getFullYear() === currentYear;
                })
                .reduce((sum, t) => sum + t.amount, 0);

            const monthlyIncome = transactions
                .filter(t => {
                    const tDate = new Date(t.date);
                    return t.type === 'income' && 
                           tDate.getMonth() === currentMonth && 
                           tDate.getFullYear() === currentYear;
                })
                .reduce((sum, t) => sum + t.amount, 0);

            // Expense trend
            let trendText = 'Mulai catat transaksi untuk melihat tren pengeluaran.';
            let trendProgress = 0;
            
            if (transactions.length > 0) {
                if (monthlyExpense > monthlyIncome * 0.8) {
                    trendText = '⚠️ Pengeluaran tinggi! Bulan ini pengeluaran sudah mencapai 80% dari pendapatan.';
                    trendProgress = 90;
                } else if (monthlyExpense > monthlyIncome * 0.6) {
                    trendText = '⚡ Perhatian! Pengeluaran bulan ini sudah 60% dari pendapatan.';
                    trendProgress = 70;
                } else {
                    trendText = '✅ Pengeluaran masih dalam kontrol yang baik.';
                    trendProgress = 40;
                }
            }
            
            document.getElementById('expenseTrend').textContent = trendText;
            document.getElementById('expenseTrendProgress').style.width = `${trendProgress}%`;

            // Health score
            let healthScore = 85; // Default
            let healthDesc = 'Kondisi keuangan stabil';
            let healthProgress = 85;
            
            if (transactions.length > 0) {
                const totalIncome = transactions.filter(t => t.type === 'income').reduce((sum, t) => sum + t.amount, 0);
                const totalExpense = transactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0);
                const totalDebt = debts.filter(d => d.status === 'unpaid').reduce((sum, d) => sum + d.remainingAmount, 0);
                
                const netWorth = totalIncome - totalExpense - totalDebt;
                const expenseRatio = totalIncome > 0 ? (totalExpense / totalIncome) : 1;
                
                if (netWorth < 0) {
                    healthScore = 25;
                    healthDesc = 'Perlu perhatian serius';
                    healthProgress = 25;
                } else if (expenseRatio > 0.9) {
                    healthScore = 45;
                    healthDesc = 'Kondisi berisiko tinggi';
                    healthProgress = 45;
                } else if (expenseRatio > 0.7) {
                    healthScore = 65;
                    healthDesc = 'Perlu optimisasi';
                    healthProgress = 65;
                } else {
                    healthScore = 90;
                    healthDesc = 'Kondisi sangat baik';
                    healthProgress = 90;
                }
            }
            
            document.getElementById('healthScore').textContent = healthScore + '/100';
            document.getElementById('healthScoreDesc').textContent = healthDesc;
            document.getElementById('healthScoreProgress').style.width = `${healthProgress}%`;

            // Recommendations
            const recommendations = [];
            
            if (transactions.length === 0) {
                recommendations.push('• Mulai catat semua transaksi untuk tracking yang akurat');
                recommendations.push('• Set target pendapatan dan budget pengeluaran bulanan');
                recommendations.push('• Buat kategori pengeluaran yang spesifik untuk bisnis');
            } else {
                const totalIncome = transactions.filter(t => t.type === 'income').reduce((sum, t) => sum + t.amount, 0);
                const totalExpense = transactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0);
                
                if (totalExpense > totalIncome * 0.8) {
                    recommendations.push('• Kurangi pengeluaran non-essential');
                    recommendations.push('• Review kategori pengeluaran tertinggi');
                    recommendations.push('• Cari cara untuk meningkatkan pendapatan');
                } else {
                    recommendations.push('• Pertahankan kontrol pengeluaran yang baik');
                    recommendations.push('• Pertimbangkan investasi untuk pertumbuhan');
                    recommendations.push('• Sisihkan dana darurat minimal 3 bulan operasional');
                }
                
                const overdueDebts = debts.filter(d => d.status === 'unpaid' && d.dueDate && new Date(d.dueDate) < new Date()).length;
                if (overdueDebts > 0) {
                    recommendations.push('• Prioritaskan pembayaran utang yang jatuh tempo');
                }
            }
            
            document.getElementById('recommendations').innerHTML = recommendations.join('<br>');
        }
        
        
        
        // Check if new month for analytics notification
async function checkNewMonthNotification() {
    const currentMonth = new Date().getMonth() + 1; // 1-12 format
    const currentYear = new Date().getFullYear();
    
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/analytics_tracking_api.php?action=get-last-visit');
        const data = await response.json();
        
        if (data.success) {
            const lastMonth = data.last_month;
            const lastYear = data.last_year;
            
            // Check if different month/year
            if (lastMonth !== currentMonth || lastYear !== currentYear) {
                // Update database with current month/year
                await updateLastAnalyticsVisit(currentMonth, currentYear);
                return true; // Show notification
            }
        }
        
        return false; // Same month, no notification
    } catch (error) {
        console.error('Error checking analytics visit:', error);
        return false;
    }
}

// Update last analytics visit in database
async function updateLastAnalyticsVisit(month, year) {
    try {
        await fetch('https://tagihan.ersetsolution.my.id/analytics_tracking_api.php', {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ month: month, year: year })
        });
    } catch (error) {
        console.error('Error updating analytics visit:', error);
    }
}
        

        // =============================================
        //    Sales & Inventory Utilities
        //
        // These functions handle loading and saving data,
        // rendering lists, handling form submissions,
        // updating badges, and deletion for the Penjualan
        // (sales) and Inventory modules. They are kept
        // outside of other functions so they can be
        // referenced globally.

     

      // Load inventories from database
async function loadInventory() {
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/inventory_api.php');
        const data = await response.json();
        
        // Map API fields (snake_case) ke frontend format (camelCase)
        inventories = data.map(item => ({
            id: item.id,
            sku: item.sku,
            name: item.name,
            unit: item.unit,
            stock: item.current_stock || 0,
            initialStock: item.initial_stock || 0,
            purchasePrice: parseFloat(item.purchase_price) || 0,
            salePrice: parseFloat(item.sale_price) || 0,
            minStock: item.min_stock || 5
        }));
    } catch (err) {
        console.error('Error loading inventory:', err);
        inventories = [];
    }
}

        

// Convert platform code to readable name - TETAP
function getPlatformName(code) {
    switch(code) {
        case 'tiktokshop': return 'TikTok Shop';
        case 'shopee': return 'Shopee';
        case 'tokopedia': return 'Tokopedia';
        default: return 'Marketplace Lain';
    }
}

// Toggle sale form visibility - TETAP
window.toggleSaleForm = function() {
    const formCard = document.getElementById('saleFormCard');
    if (formCard) formCard.classList.toggle('collapsed');
};

// Toggle inventory form visibility - TETAP
window.toggleInventoryForm = function() {
    const formCard = document.getElementById('inventoryFormCard');
    if (formCard) formCard.classList.toggle('collapsed');
};

        // Render sales list
        async function renderSales() {
    const list = document.getElementById('salesList');
    if (!list) return;
    
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/sales_api.php');
        const sales = await response.json();
        
        const searchTerm = (document.getElementById('searchSale')?.value || '').toLowerCase();
        let filtered = sales.slice();
        
        if (searchTerm) {
            filtered = filtered.filter(sale => {
                const desc = (sale.notes || '').toLowerCase();
                const platformName = getPlatformName(sale.platform).toLowerCase();
                return desc.includes(searchTerm) || platformName.includes(searchTerm);
            });
        }
        
        if (filtered.length === 0) {
            list.innerHTML = '<p style="color:#94a3b8; text-align:center; padding:20px;">Belum ada data penjualan.</p>';
            return;
        }
        
        list.innerHTML = '';
        filtered.forEach(sale => {
            const dateString = new Date(sale.sale_date).toLocaleDateString('id-ID', { day:'numeric', month:'short', year:'numeric' });
            const item = document.createElement('div');
            item.className = 'sale-item';
            item.innerHTML = `
                <div class="sale-info">
                    <h4>${getPlatformName(sale.platform)}</h4>
                    <p>${dateString}${sale.notes ? ' • ' + sale.notes : ''}</p>
                </div>
                <div class="sale-amount">${formatCurrency(sale.total_amount)}</div>
                <div class="sale-actions">
                    <a href="#" onclick="deleteSale('${sale.id}')" style="color:#ef4444;">Hapus</a>
                </div>
            `;
            list.appendChild(item);
        });
    } catch (error) {
        list.innerHTML = '<p style="color:#ef4444; text-align:center; padding:20px;">Error loading sales</p>';
    }
}

        // Render inventory list - Database version
async function renderInventory() {
    const list = document.getElementById('inventoryList');
    if (!list) return;
    
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/inventory_api.php');
        const inventories = await response.json();
        
        if (inventories.length === 0) {
            list.innerHTML = '<tr><td colspan="6" style="padding: 20px; text-align: center; color: #94a3b8;">Belum ada data produk.</td></tr>';
            return;
        }
        
        list.innerHTML = '';
        inventories.forEach(item => {
            const row = document.createElement('tr');
            row.style.borderBottom = '1px solid #334155';
            row.innerHTML = `
                <td style="padding: 16px 20px; color: #e2e8f0;">${item.sku || '-'}</td>
                <td style="padding: 16px 20px; color: #e2e8f0;">${item.name}</td>
                <td style="padding: 16px 20px; color: #3b82f6;">${item.initial_stock || 0}</td>
                <td style="padding: 16px 20px; color: #10b981;">${formatCurrency(item.purchase_price || 0)}</td>
                <td style="padding: 16px 20px; color: #10b981;">${formatCurrency(item.sale_price || 0)}</td>
                <td style="padding: 16px 20px;">
                    <button onclick="deleteInventory('${item.id}')" style="background: #ef4444; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 12px;">Hapus</button>
                </td>
            `;
            list.appendChild(row);
        });
    } catch (error) {
        console.error('Error loading inventory:', error);
        list.innerHTML = '<tr><td colspan="6" style="padding: 20px; text-align: center; color: #ef4444;">Error loading inventory data</td></tr>';
    }
}

window.deleteSale = async function(id) {
    if (!confirm('Apakah Anda yakin ingin menghapus penjualan ini?')) return;
    
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/sales_api.php', {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id: id })
        });
        
        if (response.ok) {
            await renderSales();
            await updateSalesBadge();
            showAlert('Penjualan berhasil dihapus!', 'success');
        } else {
            showAlert('Error menghapus penjualan!', 'error');
        }
    } catch (error) {
        showAlert('Error koneksi!', 'error');
    }
};

// Delete an inventory entry - Database version
window.deleteInventory = async function(id) {
    if (!confirm('Apakah Anda yakin ingin menghapus produk ini?')) return;
    
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/inventory_api.php', {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id: id })
        });
        
        if (response.ok) {
            // Refresh inventory data dan UI
            await loadInventory();
            await updateInventoryBadge();
            renderInventory();
            
            // Refresh related views
            if (currentPage === 'inventory') {
                const activeTabEl = document.querySelector('.modern-tab.active');
                if (activeTabEl) {
                    const activeTab = activeTabEl.id.replace('inventoryTab-', '');
                    if (activeTab === 'movement') renderStockMovements();
                    if (activeTab === 'report') renderInventoryReport();
                    if (activeTab === 'analytics') {
                        renderInventoryAnalytics();
                        updateInventoryAnalytics();
                    }
                }
            }
            
            showAlert('Produk berhasil dihapus!', 'success');
        } else {
            const errorData = await response.json();
            showAlert('Error: ' + (errorData.error || 'Gagal menghapus produk'), 'error');
        }
    } catch (error) {
        console.error('Error deleting inventory:', error);
        showAlert('Error koneksi!', 'error');
    }
};

window.deleteStockMovement = async function(id) {
    if (!confirm('Hapus movement ini?')) return;
    
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/inventory_api.php/movements', {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id: id })
        });
        
        if (response.ok) {
            await loadStockMovements(); // <- RELOAD DATA DARI DATABASE
            renderStockMovements();
            showAlert('Movement berhasil dihapus!', 'success');
        } else {
            showAlert('Error menghapus movement!', 'error');
        }
    } catch (error) {
        console.error('Error deleting movement:', error);
        showAlert('Error koneksi!', 'error');
    }
};
        

    async function updateSalesBadge() {
    const badge = document.getElementById('salesBadge');
    if (!badge) return;
    
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/sales_api.php');
        const sales = await response.json();
        
        const now = new Date();
        const month = now.getMonth();
        const year = now.getFullYear();
        const count = sales.filter(sale => {
            const d = new Date(sale.sale_date); // Ganti sale.date jadi sale.sale_date
            return d.getMonth() === month && d.getFullYear() === year;
        }).length;
        badge.textContent = count;
    } catch (error) {
        console.error('Error updating sales badge:', error);
        badge.textContent = '0';
    }
}

        /// Update inventory badge (total items) - Database version
async function updateInventoryBadge() {
    const badge = document.getElementById('inventoryBadge');
    if (!badge) return;
    
    try {
        const response = await fetch('https://tagihan.ersetsolution.my.id/inventory_api.php');
        const inventories = await response.json();
        badge.textContent = inventories.length;
    } catch (error) {
        console.error('Error updating inventory badge:', error);
        badge.textContent = '0';
    }
}

// Handle sales form submission (DEPRECATED - now using managed sales)
const saleFormElement = document.getElementById('saleForm');
if (saleFormElement) {
    saleFormElement.addEventListener('submit', function(e) {
        e.preventDefault();
        // This form is now handled by saveManagedSale() function
        // Old simple sales form is deprecated
        console.log('Old sales form deprecated - use managed sales system');
    });
}

// Handle inventory form submission - Database version
const inventoryFormElement = document.getElementById('inventoryForm');
if (inventoryFormElement) {
    inventoryFormElement.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const name = document.getElementById('productName').value.trim();
        const stock = parseInt(document.getElementById('productStock').value) || 0;
        const purchasePrice = parseFloat(document.getElementById('purchasePrice').value) || 0;
        const salePrice = parseFloat(document.getElementById('salePrice').value) || 0;
        const description = document.getElementById('productDescription').value;
        
        if (!name) {
            showAlert('Nama produk wajib diisi!', 'error');
            return;
        }
        
        try {
            // POST to database
            const response = await fetch('https://tagihan.ersetsolution.my.id/inventory_api.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    name: name,
                    stock: stock,
                    purchasePrice: purchasePrice,
                    salePrice: salePrice,
                    description: description
                })
            });
            
            if (response.ok) {
                // Reload inventory data from database
                await loadInventory();
                await updateInventoryBadge();
                renderInventory();
                
                this.reset();
                toggleInventoryForm();
                showAlert('Produk berhasil ditambahkan!', 'success');
            } else {
                const errorData = await response.json();
                showAlert('Error: ' + (errorData.error || 'Gagal menambah produk'), 'error');
            }
        } catch (error) {
            console.error('Error adding inventory:', error);
            showAlert('Error koneksi!', 'error');
        }
    });
}

// Search filters for sales and inventory - Database version
const saleSearch = document.getElementById('searchSale');
if (saleSearch) {
    saleSearch.addEventListener('input', async () => {
        if (currentPage === 'sales') {
            await renderSales(); // Uses managed sales API
        }
    });
}

const inventorySearch = document.getElementById('searchInventory');
if (inventorySearch) {
    inventorySearch.addEventListener('input', () => {
        if (currentPage === 'inventory') {
            renderInventory(); // Now uses database data loaded in inventories array
        }
    });
}

        // Custom suggestions for product search in stock movement modal
        function showProductSuggestions() {
            const input = document.getElementById('productSearch');
            const dropdown = document.getElementById('productSuggestionsDropdown');
            if (!input || !dropdown) return;
            const query = input.value.trim().toLowerCase();
            dropdown.innerHTML = '';
            if (!query) {
                dropdown.style.display = 'none';
                return;
            }
            // Filter inventory items by name or SKU
            const matches = inventories.filter(item => {
                const nameLower = item.name.toLowerCase();
                const skuLower = (item.sku || '').toLowerCase();
                return nameLower.includes(query) || skuLower.includes(query);
            });
            if (matches.length === 0) {
                dropdown.style.display = 'none';
                return;
            }
            matches.forEach(item => {
                const div = document.createElement('div');
                div.className = 'suggestion-item';
                div.textContent = `${item.sku || ''} - ${item.name}`;
                div.addEventListener('click', () => {
                    input.value = `${item.sku || ''} - ${item.name}`;
                    dropdown.style.display = 'none';
                });
                dropdown.appendChild(div);
            });
            dropdown.style.display = 'block';
        }

        // Attach listeners to product search input to show/hide suggestions
        const productSearchInput = document.getElementById('productSearch');
        if (productSearchInput) {
            productSearchInput.addEventListener('input', showProductSuggestions);
            productSearchInput.addEventListener('focus', showProductSuggestions);
            productSearchInput.addEventListener('blur', function() {
                // Delay hiding to allow click events on suggestions to register
                setTimeout(() => {
                    const dropdown = document.getElementById('productSuggestionsDropdown');
                    if (dropdown) dropdown.style.display = 'none';
                }, 200);
            });
        }

        // Populate datalist suggestions for product search input
        function populateProductSuggestions() {
            const datalist = document.getElementById('productSuggestions');
            if (!datalist) return;
            // Clear existing options
            datalist.innerHTML = '';
            // Populate with current inventory items
            inventories.forEach(item => {
                // Use a single suggestion per item to avoid duplicates.
                // Combine SKU and product name into a single value separated by a hyphen. This ensures one line per suggestion and keeps both identifiers visible.
                const option = document.createElement('option');
                option.value = `${item.sku || ''} - ${item.name}`;
                datalist.appendChild(option);
            });
        }

        // Buka Stock Movement Modal
window.openStockMovementModal = function() {
    // Ensure any previous suggestions are hidden when opening the modal
    const dropdown = document.getElementById('productSuggestionsDropdown');
    if (dropdown) dropdown.style.display = 'none';
    document.getElementById('stockMovementModal').style.display = 'flex';
};

// Tutup Stock Movement Modal
window.closeStockMovementModal = function() {
    document.getElementById('stockMovementModal').style.display = 'none';
    document.getElementById('stockMovementForm').reset();
};

// Handle Stock Movement Submit - Database version
window.handleStockMovementSubmit = async function(e) {
    e.preventDefault();
    
    const productSearch = document.getElementById('productSearch').value;
    const movementType = document.getElementById('movementType').value;
    const qty = parseInt(document.getElementById('movementQty').value);
    const reason = document.getElementById('movementReason').value;
    const notes = document.getElementById('movementNotes').value;
    
    // Find product by matching either direction
    const searchLower = productSearch.toLowerCase();
    const product = inventories.find(p => {
        const nameLower = p.name.toLowerCase();
        const skuLower = (p.sku || '').toLowerCase();
        return nameLower.includes(searchLower) || skuLower.includes(searchLower) || searchLower.includes(nameLower) || searchLower.includes(skuLower);
    });
    
    if (!product) {
        showAlert('Produk tidak ditemukan!', 'error');
        return;
    }
    
    // Jangan update stock lokal - langsung POST ke API
    try {
        const movementData = {
            product_name: product.name,
            type: movementType === 'in' ? 'increase' : 'decrease', 
            display_type: movementType === 'in' ? 'IN' : 'OUT',
            quantity: qty,
            notes: reason + (notes ? ' - ' + notes : '')
        };
        
        const response = await fetch('https://tagihan.ersetsolution.my.id/inventory_api.php/movements', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(movementData)
        });
        
        if (response.ok) {
            // Refresh data dari database
            await loadInventory();
            await loadStockMovements();
            renderStockMovements();
            renderInventory();
            
            closeStockMovementModal();
            showAlert('Stock movement berhasil ditambahkan!', 'success');
        } else {
            const errorData = await response.json();
            showAlert('Error: ' + (errorData.error || 'Gagal menambah movement'), 'error');
        }
    } catch (error) {
        console.error('Error adding movement:', error);
        showAlert('Error koneksi!', 'error');
    }
};
        
        
        // Initialize the app
        init();

        // Close sidebar on outside click (mobile)
        document.addEventListener('click', function(e) {
            const sidebar = document.getElementById('sidebar');
            const toggleBtn = document.querySelector('.toggle-sidebar');
            
            if (window.innerWidth <= 768 && 
                !sidebar.contains(e.target) && 
                !toggleBtn.contains(e.target) && 
                sidebar.classList.contains('mobile-open')) {
                sidebar.classList.remove('mobile-open');
            }
        });
        
        
    </script>
</body>
</html>
