
<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Business Expense Tracker</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #0f172a;
            color: #e2e8f0;
            overflow-x: hidden;
        }

        .app-container {
            display: flex;
            min-height: 100vh;
        }

        .sidebar {
            width: 280px;
            background: linear-gradient(180deg, #1e293b 0%, #334155 100%);
            border-right: 1px solid #334155;
            transition: all 0.3s ease;
            position: fixed;
            height: 100vh;
            overflow-y: auto;
            z-index: 1000;
        }

        .sidebar.collapsed {
            width: 80px;
        }

        .sidebar-header {
            padding: 24px 20px;
            border-bottom: 1px solid #334155;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .logo {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, #3b82f6, #1d4ed8);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 18px;
        }

        .brand-text {
            font-size: 20px;
            font-weight: 700;
            color: #3b82f6;
            transition: all 0.3s ease;
        }

        .sidebar.collapsed .brand-text {
            display: none;
        }

        .sidebar-menu {
            padding: 20px 0;
        }

        .menu-item {
            display: flex;
            align-items: center;
            gap: 16px;
            padding: 14px 20px;
            color: #94a3b8;
            text-decoration: none;
            transition: all 0.3s ease;
            border-left: 3px solid transparent;
            position: relative;
            cursor: pointer;
            border: none;
            background: none;
            width: 100%;
            text-align: left;
        }

        .menu-item:hover {
            background: rgba(59, 130, 246, 0.1);
            color: #3b82f6;
            border-left-color: #3b82f6;
        }

        .menu-item.active {
            background: rgba(59, 130, 246, 0.2);
            color: #3b82f6;
            border-left-color: #3b82f6;
        }

        .menu-icon {
            width: 24px;
            height: 24px;
            flex-shrink: 0;
        }

        .menu-text {
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .sidebar.collapsed .menu-text {
            display: none;
        }

        .badge {
            background: #ef4444;
            color: white;
            font-size: 11px;
            padding: 2px 6px;
            border-radius: 12px;
            font-weight: bold;
            margin-left: auto;
        }

        .sidebar.collapsed .badge {
            display: none;
        }

        .main-content {
            flex: 1;
            margin-left: 280px;
            transition: all 0.3s ease;
        }

        .sidebar.collapsed ~ .main-content {
            margin-left: 80px;
        }

        .top-bar {
            background: #1e293b;
            padding: 16px 24px;
            border-bottom: 1px solid #334155;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .top-bar-left {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .toggle-sidebar {
            background: none;
            border: none;
            color: #94a3b8;
            cursor: pointer;
            padding: 8px;
            border-radius: 6px;
            transition: all 0.3s ease;
        }

        .toggle-sidebar:hover {
            background: #334155;
            color: #e2e8f0;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 12px;
            color: #94a3b8;
        }

        .balance-indicator {
            background: linear-gradient(135deg, #3b82f6, #1d4ed8);
            padding: 8px 16px;
            border-radius: 8px;
            font-weight: 600;
            color: white;
            font-size: 14px;
        }

        .content-area {
            padding: 24px;
            max-width: 100%;
        }

        .page-header {
            margin-bottom: 32px;
        }

        .page-title {
            font-size: 28px;
            font-weight: 700;
            color: #e2e8f0;
            margin-bottom: 8px;
        }

        .page-subtitle {
            color: #94a3b8;
            font-size: 16px;
        }

        .page-content {
            display: none;
        }

        .page-content.active {
            display: block;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 24px;
            margin-bottom: 32px;
        }

        .stat-card {
            background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
            padding: 24px;
            border-radius: 16px;
            border: 1px solid #334155;
            position: relative;
            overflow: hidden;
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, #3b82f6, #1d4ed8);
        }

        .stat-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 16px;
        }

        .stat-title {
            font-size: 14px;
            color: #94a3b8;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            font-weight: 600;
        }

        .stat-icon {
            width: 40px;
            height: 40px;
            background: rgba(59, 130, 246, 0.2);
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #3b82f6;
        }

        .stat-value {
            font-size: 32px;
            font-weight: 700;
            margin-bottom: 8px;
            line-height: 1;
        }

        .stat-positive {
            color: #10b981;
        }

        .stat-negative {
            color: #ef4444;
        }

        .stat-neutral {
            color: #3b82f6;
        }

        .stat-change {
            display: flex;
            align-items: center;
            gap: 6px;
            font-size: 13px;
            font-weight: 500;
        }

        .change-positive {
            color: #10b981;
        }

        .change-negative {
            color: #ef4444;
        }

        .card {
            background: #1e293b;
            border-radius: 16px;
            border: 1px solid #334155;
            overflow: hidden;
            margin-bottom: 24px;
        }

        .form-card {
            background: #1e293b;
            border-radius: 16px;
            border: 1px solid #334155;
            overflow: hidden;
            margin-bottom: 24px;
            transition: all 0.3s ease;
        }

        .form-card.collapsed .card-content {
            max-height: 0;
            padding: 0 24px;
            opacity: 0;
        }

        .form-card .card-content {
            max-height: 1000px;
            padding: 24px;
            opacity: 1;
            transition: all 0.4s ease;
            overflow: hidden;
        }

        .toggle-form-btn {
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 20px 24px;
            background: none;
            border: none;
            color: #e2e8f0;
            cursor: pointer;
            transition: all 0.3s ease;
            border-bottom: 1px solid transparent;
        }

        .toggle-form-btn:hover {
            background: rgba(59, 130, 246, 0.1);
            border-bottom-color: #334155;
        }

        .toggle-form-btn .btn-text {
            font-size: 18px;
            font-weight: 600;
        }

        .toggle-form-btn .toggle-icon {
            width: 24px;
            height: 24px;
            transition: transform 0.3s ease;
        }

        .form-card:not(.collapsed) .toggle-icon {
            transform: rotate(180deg);
        }

        .card-header {
            padding: 20px 24px;
            border-bottom: 1px solid #334155;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .card-title {
            font-size: 18px;
            font-weight: 600;
            color: #e2e8f0;
        }

        .card-content {
            padding: 24px;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            margin-bottom: 24px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            color: #e2e8f0;
            font-weight: 500;
            font-size: 14px;
        }

        .form-control {
            width: 100%;
            padding: 12px 16px;
            background: #334155;
            border: 1px solid #475569;
            border-radius: 8px;
            color: #e2e8f0;
            font-size: 15px;
            transition: all 0.3s ease;
        }

        .form-control:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .form-checkbox {
            width: 18px !important;
            height: 18px !important;
            background: #334155;
            border: 2px solid #475569;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.3s ease;
            appearance: none;
            -webkit-appearance: none;
            -moz-appearance: none;
            position: relative;
        }

        .form-checkbox:checked {
            background: #3b82f6;
            border-color: #3b82f6;
        }

        .form-checkbox:checked::after {
            content: '✓';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 12px;
            font-weight: bold;
        }

        .form-checkbox:focus {
            outline: none;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .preview-box {
            background: #334155;
            padding: 16px;
            border-radius: 8px;
            border-left: 4px solid #3b82f6;
            margin-top: 16px;
        }

        .preview-title {
            color: #e2e8f0;
            font-weight: 600;
            margin-bottom: 8px;
        }

        .preview-content {
            color: #94a3b8;
            font-size: 14px;
            line-height: 1.5;
        }

        .btn {
            padding: 12px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            text-decoration: none;
        }

        .btn-primary {
            background: linear-gradient(135deg, #3b82f6, #1d4ed8);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
        }

        .btn-success {
            background: linear-gradient(135deg, #10b981, #047857);
            color: white;
        }

        .btn-success:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
        }

        .btn-danger {
            background: linear-gradient(135deg, #ef4444, #dc2626);
            color: white;
        }

        .btn-danger:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
        }

        .btn-secondary {
            background: #475569;
            color: white;
        }

        .btn-secondary:hover {
            background: #64748b;
        }

        .btn-sm {
            padding: 8px 12px;
            font-size: 12px;
        }

        .transaction-list {
            background: #1e293b;
            border-radius: 16px;
            border: 1px solid #334155;
            overflow: hidden;
        }

        .transaction-header {
            padding: 20px 24px;
            border-bottom: 1px solid #334155;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 16px;
        }

        .search-filters {
            display: flex;
            gap: 12px;
            flex-wrap: wrap;
        }

        .transaction-item {
            padding: 20px 24px;
            border-bottom: 1px solid #334155;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 12px;
            transition: all 0.3s ease;
        }

        .transaction-item:hover {
            background: rgba(59, 130, 246, 0.05);
        }

        .transaction-item:last-child {
            border-bottom: none;
        }

        .transaction-info h4 {
            margin-bottom: 4px;
            color: #e2e8f0;
            font-weight: 600;
        }

        .transaction-info p {
            color: #94a3b8;
            font-size: 13px;
        }

        .transaction-amount {
            font-weight: 700;
            font-size: 18px;
        }

        .amount-positive {
            color: #10b981;
        }

        .amount-negative {
            color: #ef4444;
        }

        .debt-item {
            background: #334155;
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 16px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 16px;
            transition: all 0.3s ease;
        }

        .debt-item:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .debt-info h4 {
            color: #e2e8f0;
            margin-bottom: 4px;
            font-weight: 600;
        }

        .debt-info p {
            color: #94a3b8;
            font-size: 13px;
        }

        .debt-actions {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }

        .category-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
            gap: 16px;
            margin-top: 20px;
        }

        .category-item {
            background: #334155;
            padding: 20px;
            border-radius: 12px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: all 0.3s ease;
        }

        .category-item:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .category-item span {
            color: #e2e8f0;
            font-weight: 500;
        }

        .import-section {
            background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
            border: 2px dashed #475569;
            border-radius: 12px;
            padding: 24px;
            text-align: center;
            margin-bottom: 24px;
            transition: all 0.3s ease;
        }

        .import-section:hover {
            border-color: #3b82f6;
            background: linear-gradient(135deg, #1e293b 0%, #2d3748 100%);
        }

        .import-section.dragover {
            border-color: #10b981;
            background: rgba(16, 185, 129, 0.1);
        }

        .file-input {
            display: none;
        }

        .import-btn {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            background: linear-gradient(135deg, #3b82f6, #1d4ed8);
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            border: none;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .import-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
        }

        .debt-group {
            background: #334155;
            border-radius: 12px;
            margin-bottom: 20px;
            overflow: hidden;
        }

        .debt-group-header {
            background: #475569;
            padding: 16px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .debt-group-title {
            font-weight: 600;
            color: #e2e8f0;
        }

        .debt-group-summary {
            color: #94a3b8;
            font-size: 14px;
        }

        .debt-group-items {
            padding: 0;
        }

        .calendar-view {
            display: grid;
            gap: 16px;
            margin-top: 24px;
        }

        .calendar-month {
            background: #1e293b;
            border-radius: 12px;
            border: 1px solid #334155;
            padding: 20px;
        }

        .calendar-month-title {
            font-size: 18px;
            font-weight: 600;
            color: #e2e8f0;
            margin-bottom: 16px;
            text-align: center;
        }

        .calendar-items {
            display: grid;
            gap: 8px;
        }

        .calendar-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 16px;
            background: #334155;
            border-radius: 8px;
            border-left: 4px solid #3b82f6;
        }

        .calendar-item.overdue {
            border-left-color: #ef4444;
            background: rgba(239, 68, 68, 0.1);
        }

        .calendar-item.due-soon {
            border-left-color: #f59e0b;
            background: rgba(245, 158, 11, 0.1);
        }

        .calendar-date {
            font-weight: 600;
            color: #e2e8f0;
        }

        .calendar-desc {
            color: #94a3b8;
            font-size: 13px;
        }

        .calendar-amount {
            font-weight: 600;
            color: #ef4444;
        }

        .view-toggle {
            display: flex;
            background: #334155;
            border-radius: 8px;
            padding: 4px;
            gap: 4px;
            margin-bottom: 24px;
        }

        .view-toggle-btn {
            flex: 1;
            padding: 8px 16px;
            background: none;
            border: none;
            color: #94a3b8;
            cursor: pointer;
            border-radius: 6px;
            transition: all 0.3s ease;
            font-size: 14px;
            font-weight: 500;
        }

        .view-toggle-btn.active {
            background: #3b82f6;
            color: white;
        }

        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #64748b;
        }

        .empty-state svg {
            width: 64px;
            height: 64px;
            margin-bottom: 16px;
            opacity: 0.5;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.8);
            z-index: 2000;
            align-items: center;
            justify-content: center;
        }

        .modal.active {
            display: flex;
        }

        .modal-content {
            background: #1e293b;
            padding: 24px;
            border-radius: 16px;
            border: 1px solid #334155;
            max-width: 600px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
        }

        .payment-options {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 12px;
            margin-bottom: 20px;
        }

        .payment-option-btn {
            padding: 12px 16px;
            border: 2px solid #475569;
            border-radius: 8px;
            background: #334155;
            color: #94a3b8;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            font-weight: 500;
        }

        .payment-option-btn:hover {
            border-color: #3b82f6;
            background: rgba(59, 130, 246, 0.1);
            color: #3b82f6;
        }

        .payment-option-btn.active {
            border-color: #3b82f6;
            background: #3b82f6;
            color: white;
        }

        .payment-option-btn.success {
            border-color: #10b981;
            background: #10b981;
            color: white;
        }

        .debt-info-card {
            background: #334155;
            padding: 16px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid #ef4444;
        }

        .debt-info-title {
            color: #e2e8f0;
            font-weight: 600;
            margin-bottom: 4px;
        }

        .debt-info-details {
            color: #94a3b8;
            font-size: 14px;
            line-height: 1.4;
        }

        .payment-summary {
            background: #1e293b;
            padding: 16px;
            border-radius: 8px;
            border: 1px solid #374151;
            margin-bottom: 20px;
        }

        .summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
        }

        .summary-row:last-child {
            margin-bottom: 0;
        }

        .summary-label {
            color: #94a3b8;
        }

        .summary-value {
            font-weight: 600;
        }

        .input-helper {
            color: #94a3b8;
            font-size: 12px;
            margin-top: 4px;
            display: block;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .modal-header h3 {
            color: #e2e8f0;
            font-weight: 600;
        }

        .close-modal {
            background: none;
            border: none;
            color: #94a3b8;
            cursor: pointer;
            font-size: 24px;
            padding: 4px;
        }

        .alert {
            padding: 12px 16px;
            border-radius: 8px;
            margin-bottom: 16px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .alert-success {
            background: rgba(16, 185, 129, 0.2);
            color: #10b981;
            border: 1px solid rgba(16, 185, 129, 0.3);
        }

        .alert-error {
            background: rgba(239, 68, 68, 0.2);
            color: #ef4444;
            border: 1px solid rgba(239, 68, 68, 0.3);
        }

        .chart-container {
            height: 400px;
            background: #1e293b;
            border-radius: 16px;
            padding: 24px;
            border: 1px solid #334155;
            margin-bottom: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .chart-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 24px;
            margin-bottom: 32px;
        }

        .chart-card {
            background: #1e293b;
            border-radius: 16px;
            border: 1px solid #334155;
            padding: 24px;
        }

        .chart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .chart-title {
            font-size: 18px;
            font-weight: 600;
            color: #e2e8f0;
        }

        .chart-canvas {
            position: relative;
            height: 300px;
            width: 100%;
        }

        .insights-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 24px;
        }

        .insight-card {
            background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
            padding: 24px;
            border-radius: 16px;
            border: 1px solid #334155;
        }

        .insight-header {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 16px;
        }

        .insight-icon {
            width: 36px;
            height: 36px;
            background: rgba(59, 130, 246, 0.2);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #3b82f6;
        }

        .insight-title {
            font-size: 16px;
            font-weight: 600;
            color: #e2e8f0;
        }

        .insight-content {
            color: #94a3b8;
            line-height: 1.6;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: #475569;
            border-radius: 4px;
            overflow: hidden;
            margin: 12px 0;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #3b82f6, #1d4ed8);
            transition: width 0.3s ease;
        }

        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-100%);
                width: 280px;
            }

            .sidebar.mobile-open {
                transform: translateX(0);
            }

            .main-content {
                margin-left: 0;
            }

            .sidebar.collapsed ~ .main-content {
                margin-left: 0;
            }

            .content-area {
                padding: 16px;
            }

            .stats-grid {
                grid-template-columns: 1fr;
                gap: 16px;
            }

            .form-grid {
                grid-template-columns: 1fr;
            }

            .transaction-header {
                flex-direction: column;
                align-items: stretch;
            }

            .search-filters {
                width: 100%;
            }

            .search-filters .form-control {
                flex: 1;
            }

            .insights-grid {
                grid-template-columns: 1fr;
            }

            .chart-grid {
                grid-template-columns: 1fr;
            }

            .chart-card {
                margin-bottom: 20px;
            }

            .chart-canvas {
                height: 250px;
            }

            .debt-actions {
                flex-direction: column;
                gap: 8px;
                width: 100%;
            }

            .debt-actions .btn {
                width: 100%;
            }

            .view-toggle {
                flex-direction: column;
                gap: 8px;
            }

            .view-toggle-btn {
                padding: 12px;
            }

            .import-section {
                padding: 20px;
            }

            .calendar-month {
                padding: 16px;
            }

            .calendar-items {
                gap: 6px;
            }

            .calendar-item {
                padding: 10px 12px;
            }

            .debt-group-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 8px;
            }

            .debt-info h4 {
                font-size: 16px;
            }

            .debt-item {
                flex-direction: column;
                align-items: stretch;
                gap: 16px;
            }

            .stat-card {
                padding: 20px;
            }

            .stat-value {
                font-size: 24px;
            }

            .preview-box {
                padding: 12px;
            }

            .form-checkbox {
                width: 20px !important;
                height: 20px !important;
            }

            /* Payment Modal Mobile */
            .modal-content {
                max-width: 95%;
                padding: 20px;
                max-height: 95vh;
            }

            .payment-options {
                grid-template-columns: 1fr;
                gap: 10px;
            }

            .payment-option-btn {
                padding: 14px 16px;
                font-size: 14px;
            }

            .debt-info-card {
                padding: 14px;
            }

            .payment-summary {
                padding: 14px;
            }

            .summary-row {
                flex-wrap: wrap;
                gap: 4px;
            }

            .modal-header h3 {
                font-size: 18px;
            }
        }

        @media (max-width: 640px) {
            .stats-grid {
                grid-template-columns: 1fr;
            }

            .chart-container {
                height: 300px;
                padding: 16px;
            }

            .calendar-month-title {
                font-size: 16px;
                flex-direction: column;
                gap: 4px;
            }

            .modal-content {
                padding: 16px;
                border-radius: 12px;
            }

            .form-group {
                margin-bottom: 16px;
            }
        }
        /* Styles for Sales and Inventory lists */
        .sale-item {
            padding: 20px 24px;
            border-bottom: 1px solid #334155;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 12px;
            transition: all 0.3s ease;
        }

        .sale-item:hover {
            background: rgba(59, 130, 246, 0.05);
        }

        .sale-item:last-child {
            border-bottom: none;
        }

        .sale-info h4 {
            margin-bottom: 4px;
            color: #e2e8f0;
            font-weight: 600;
        }

        .sale-info p {
            color: #94a3b8;
            font-size: 13px;
        }

        .sale-amount {
            font-weight: 700;
            font-size: 18px;
            color: #10b981;
        }

        .inventory-item {
            background: #334155;
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 16px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 16px;
            transition: all 0.3s ease;
        }

        .inventory-item:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .inventory-info h4 {
            color: #e2e8f0;
            margin-bottom: 4px;
            font-weight: 600;
        }

        .inventory-info p {
            color: #94a3b8;
            font-size: 13px;
        }

        .inventory-actions {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }

        .inventory-price {
            font-weight: 700;
            font-size: 18px;
            color: #10b981;
        }

        .inventory-stock {
            font-weight: 700;
            font-size: 18px;
            color: #60a5fa;
        }

        /* ------------------------------------------------------------------ */
        /* Inventory tabs styles */
        .inventory-tabs {
            display: flex;
            gap: 12px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        .inventory-tab {
            padding: 8px 16px;
            border-radius: 20px;
            border: 1px solid #334155;
            background: #1e293b;
            color: #94a3b8;
            cursor: pointer;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 6px;
            transition: background 0.3s ease, color 0.3s ease, border-color 0.3s ease;
        }
        .inventory-tab:hover {
            background: #334155;
            color: #e2e8f0;
        }


        /* Stock movement list items */
        .movement-item {
            padding: 12px 20px;
            border-bottom: 1px solid #334155;
            color: #e2e8f0;
        }
        .movement-item:last-child {
            border-bottom: none;
        }

        /* Report cards */
        .report-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 16px;
            margin-top: 20px;
        }
        .report-card {
            background: #334155;
            padding: 20px;
            border-radius: 12px;
            text-align: center;
        }
        .report-card h4 {
            margin-bottom: 8px;
            font-weight: 600;
            color: #e2e8f0;
        }
        .report-card p {
            font-size: 18px;
            font-weight: 700;
            color: #10b981;
        }

        /* Actions container for sales items */
        .sale-actions {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }
        
.modern-inventory-tabs {
    background: rgba(51, 65, 85, 0.3);
    padding: 6px;
    border-radius: 16px;
    margin-bottom: 32px;
    border: 1px solid rgba(51, 65, 85, 0.5);
}

.modern-tabs-grid {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr;
    gap: 8px;
}

.modern-tab {
    padding: 14px 24px;
    text-align: center;
    background: transparent;
    color: #94a3b8;
    cursor: pointer;
    transition: all 0.3s;
    border-radius: 12px;
    font-weight: 500;
    font-size: 15px;
    border: none;
}

.modern-tab.active {
    background: #3b82f6;
    color: #ffffff;
    font-weight: 600;
}

    </style>
</head>
<body>
    <div class="app-container">
        <!-- Sidebar -->
        <nav class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <div class="logo">💰</div>
                <div class="brand-text">Finance Pro</div>
            </div>
            
            <div class="sidebar-menu">
                <button class="menu-item active" onclick="navigateTo('dashboard')">
                    <svg class="menu-icon" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M3 13h8V3H3v10zm0 8h8v-6H3v6zm10 0h8V11h-8v10zm0-18v6h8V3h-8z"/>
                    </svg>
                    <span class="menu-text">Dashboard</span>
                </button>
                
                <button class="menu-item" onclick="navigateTo('transactions')">
                    <svg class="menu-icon" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/>
                    </svg>
                    <span class="menu-text">Transaksi</span>
                    <span class="badge" id="transactionBadge">0</span>
                </button>
                
                <button class="menu-item" onclick="navigateTo('debt')">
                    <svg class="menu-icon" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M11.8 10.9c-2.27-.59-3-1.2-3-2.15 0-1.09 1.01-1.85 2.7-1.85 1.78 0 2.44.85 2.5 2.1h2.21c-.07-1.72-1.12-3.3-3.21-3.81V3h-3v2.16c-1.94.42-3.5 1.68-3.5 3.61 0 2.31 1.91 3.46 4.7 4.13 2.5.6 3 1.48 3 2.41 0 .69-.49 1.79-2.7 1.79-2.06 0-2.87-.92-2.98-2.1h-2.2c.12 2.19 1.76 3.42 3.68 3.83V21h3v-2.15c1.95-.37 3.5-1.5 3.5-3.55 0-2.84-2.43-3.81-4.7-4.4z"/>
                    </svg>
                    <span class="menu-text">Utang</span>
                    <span class="badge" id="debtBadge">0</span>
                </button>
                
                <button class="menu-item" onclick="navigateTo('analytics')">
                    <svg class="menu-icon" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M16 6l2.29 2.29-4.88 4.88-4-4L2 16.59 3.41 18l6-6 4 4 6.3-6.29L22 12V6z"/>
                    </svg>
                    <span class="menu-text">Analytics</span>
                </button>
                
                <button class="menu-item" onclick="navigateTo('categories')">
                    <svg class="menu-icon" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                    </svg>
                    <span class="menu-text">Kategori</span>
                </button>

                <!-- Penjualan -->
                <button class="menu-item" onclick="navigateTo('sales')">
                    <svg class="menu-icon" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M7 4h-2l-3 7v2a5 5 0 005 5h7a5 5 0 005-5v-2l-3-7h-2M7 18a3 3 0 01-3-3v-1h16v1a3 3 0 01-3 3H7z"/>
                    </svg>
                    <span class="menu-text">Penjualan</span>
                    <span class="badge" id="salesBadge">0</span>
                </button>

                <!-- Inventory -->
                <button class="menu-item" onclick="navigateTo('inventory')">
                    <svg class="menu-icon" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M20.54 6.25l-8-4a1 1 0 00-.92 0l-8 4A1 1 0 003 7v10a1 1 0 00.54.88l8 4a1 1 0 00.92 0l8-4A1 1 0 0021 17V7a1 1 0 00-.46-.75zM12 4.23L18.06 7 12 9.77 5.94 7 12 4.23zM5 8.28l6 3v7.49L5 15.78V8.28zm8 10.49v-7.49l6-3v7.49l-6 3z"/>
                    </svg>
                    <span class="menu-text">Inventory</span>
                    <span class="badge" id="inventoryBadge">0</span>
                </button>
            </div>
        </nav>

        <!-- Main Content -->
        <main class="main-content">
            <!-- Top Bar -->
            <div class="top-bar">
                <div class="top-bar-left">
                    <button class="toggle-sidebar" onclick="toggleSidebar()">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/>
                        </svg>
                    </button>
                    <div class="page-title" id="currentPageTitle">Dashboard</div>
                </div>
                <div class="user-info">
                    <div class="balance-indicator" id="balanceDisplay">Saldo: Rp 0</div>
                    <span>Selamat datang, Admin</span>
                </div>
            </div>

            <!-- Content Area -->
            <div class="content-area">
                <div id="alertContainer"></div>

                <!-- Dashboard Page -->
                <div id="dashboard" class="page-content active">
                    <div class="page-header">
                        <h1 class="page-title">Dashboard Overview</h1>
                        <p class="page-subtitle">Monitor performa keuangan bisnis Anda secara real-time</p>
                    </div>

                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-header">
                                <div class="stat-title">Saldo Saat Ini</div>
                                <div class="stat-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                                    </svg>
                                </div>
                            </div>
                            <div id="currentBalance" class="stat-value stat-neutral">Rp 0</div>
                            <div class="stat-change">
                                <span>Total saldo tersedia</span>
                            </div>
                        </div>

                        <div class="stat-card">
                            <div class="stat-header">
                                <div class="stat-title">Pendapatan Bulan Ini</div>
                                <div class="stat-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M7 14l5-5 5 5z"/>
                                    </svg>
                                </div>
                            </div>
                            <div id="monthlyIncome" class="stat-value stat-positive">Rp 0</div>
                            <div class="stat-change change-positive">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M7 14l5-5 5 5z"/>
                                </svg>
                                <span id="incomeChange">+0%</span>
                            </div>
                        </div>

                        <div class="stat-card">
                            <div class="stat-header">
                                <div class="stat-title">Pengeluaran Bulan Ini</div>
                                <div class="stat-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M7 10l5 5 5-5z"/>
                                    </svg>
                                </div>
                            </div>
                            <div id="monthlyExpense" class="stat-value stat-negative">Rp 0</div>
                            <div class="stat-change change-negative">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M7 10l5 5 5-5z"/>
                                </svg>
                                <span id="expenseChange">+0%</span>
                            </div>
                        </div>

                        <div class="stat-card">
                            <div class="stat-header">
                                <div class="stat-title">Total Utang</div>
                                <div class="stat-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M11.8 10.9c-2.27-.59-3-1.2-3-2.15 0-1.09 1.01-1.85 2.7-1.85 1.78 0 2.44.85 2.5 2.1h2.21c-.07-1.72-1.12-3.3-3.21-3.81V3h-3v2.16c-1.94.42-3.5 1.68-3.5 3.61 0 2.31 1.91 3.46 4.7 4.13 2.5.6 3 1.48 3 2.41 0 .69-.49 1.79-2.7 1.79-2.06 0-2.87-.92-2.98-2.1h-2.2c.12 2.19 1.76 3.42 3.68 3.83V21h3v-2.15c1.95-.37 3.5-1.5 3.5-3.55 0-2.84-2.43-3.81-4.7-4.4z"/>
                                    </svg>
                                </div>
                            </div>
                            <div id="totalDebt" class="stat-value stat-negative">Rp 0</div>
                            <div class="stat-change">
                                <span id="debtCount">0 utang aktif</span>
                            </div>
                        </div>
                    </div>



                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Transaksi Terbaru</h3>
                        </div>
                        <div id="recentTransactions"></div>
                    </div>
                </div>

                <!-- Transactions Page -->
                <div id="transactions" class="page-content">
                    <div class="page-header">
                        <h1 class="page-title">Riwayat Transaksi</h1>
                        <p class="page-subtitle">Kelola semua transaksi pendapatan dan pengeluaran</p>
                    </div>

                    <div class="form-card collapsed" id="transactionFormCard">
                        <button class="toggle-form-btn" onclick="toggleTransactionForm()">
                            <div>
                                <div class="btn-text">Tambah Transaksi Baru</div>
                                <p style="color: #94a3b8; font-size: 14px; margin: 4px 0 0 0;">Klik untuk menambah pendapatan atau pengeluaran</p>
                            </div>
                            <svg class="toggle-icon" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M7 10l5 5 5-5z"/>
                            </svg>
                        </button>
                        <div class="card-content">
                            <form id="transactionForm">
                                <div class="form-grid">
                                    <div class="form-group">
                                        <label class="form-label">Tipe Transaksi</label>
                                        <select id="transactionType" class="form-control" onchange="toggleCategoryField()">
                                            <option value="income">Pendapatan</option>
                                            <option value="expense">Pengeluaran</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Jumlah (Rp)</label>
                                        <input type="number" id="transactionAmount" class="form-control" required min="0" step="0.01" placeholder="0">
                                    </div>
                                    <div class="form-group" id="categoryGroup" style="display: none;">
                                        <label class="form-label">Kategori</label>
                                        <select id="transactionCategory" class="form-control">
                                            <option value="">Pilih kategori...</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Tanggal</label>
                                        <input type="date" id="transactionDate" class="form-control" required>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Deskripsi</label>
                                    <textarea id="transactionDescription" class="form-control" rows="3" placeholder="Deskripsi transaksi..."></textarea>
                                </div>
                                <div style="display: flex; gap: 12px;">
                                    <button type="submit" class="btn btn-primary">
                                        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                            <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                                        </svg>
                                        Tambah Transaksi
                                    </button>
                                    <button type="button" class="btn btn-secondary" onclick="toggleTransactionForm()">
                                        Batal
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>

                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Daftar Transaksi</h3>
                            <div class="search-filters">
                                <input type="text" id="searchTransaction" class="form-control" placeholder="Cari transaksi...">
                                <select id="filterType" class="form-control">
                                    <option value="">Semua Tipe</option>
                                    <option value="income">Pendapatan</option>
                                    <option value="expense">Pengeluaran</option>
                                </select>
                                <select id="filterCategory" class="form-control">
                                    <option value="">Semua Kategori</option>
                                </select>
                            </div>
                        </div>
                        <div id="transactionsList"></div>
                    </div>
                </div>

                <!-- Sales Page -->
<div id="sales" class="page-content">
    <div class="page-header">
        <h1 class="page-title">Dashboard Transaksi</h1>
        <p class="page-subtitle">Kelola Transaksi Mitra Dengan Mudah & Smart</p>
    </div>

    <!-- Main Transaction Form -->
    <div style="background: linear-gradient(135deg, #7c3aed, #a855f7); padding: 24px; border-radius: 16px; text-align: center; margin-bottom: 24px;">
        <div style="font-size: 24px; color: white; font-weight: bold; margin-bottom: 8px;">📊 Input Transaksi Baru</div>
        <p style="color: rgba(255,255,255,0.8); margin: 0;">Tambahkan transaksi dengan mudah dan cepat</p>
    </div>

    <!-- Step Indicators -->
    <div style="display: flex; justify-content: center; gap: 40px; margin-bottom: 32px;">
        <div style="text-align: center;">
            <div style="width: 50px; height: 50px; background: #3b82f6; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin: 0 auto 8px; color: white; font-weight: bold;">1</div>
            <div style="color: #e2e8f0; font-size: 14px;">Informasi Dasar</div>
        </div>
        <div style="text-align: center;">
            <div style="width: 50px; height: 50px; background: #334155; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin: 0 auto 8px; color: #94a3b8; font-weight: bold;">2</div>
            <div style="color: #94a3b8; font-size: 14px;">Detail Produk</div>
        </div>
        <div style="text-align: center;">
            <div style="width: 50px; height: 50px; background: #334155; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin: 0 auto 8px; color: #94a3b8; font-weight: bold;">3</div>
            <div style="color: #94a3b8; font-size: 14px;">Pembayaran</div>
        </div>
        <div style="text-align: center;">
            <div style="width: 50px; height: 50px; background: #334155; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin: 0 auto 8px; color: #94a3b8; font-weight: bold;">4</div>
            <div style="color: #94a3b8; font-size: 14px;">Konfirmasi</div>
        </div>
    </div>

    <form id="saleForm" style="background: #1e293b; padding: 32px; border-radius: 16px; border: 1px solid #334155;">
        
        
        
        <!-- Section 1: Informasi Dasar Transaksi -->
<div style="border-left: 4px solid #3b82f6; padding-left: 16px; margin-bottom: 32px;">
    <h3 style="color: #e2e8f0; margin-bottom: 16px; display: flex; align-items: center; gap: 8px;">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="white">
            <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/>
        </svg>
        Informasi Dasar Transaksi
    </h3>
    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px;">
        <div>
            <label style="display: block; color: #e2e8f0; margin-bottom: 8px;">Tanggal Transaksi *</label>
            <input type="date" id="saleDate" style="width: 100%; padding: 12px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;" required>
        </div>
        <div>
            <label style="display: block; color: #e2e8f0; margin-bottom: 8px;">Platform *</label>
            <select id="salePlatform" style="width: 100%; padding: 12px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;" required>
                <option value="">-- Pilih Platform --</option>
                <option value="tiktokshop">TikTok Shop</option>
                <option value="shopee">Shopee</option>
                <option value="tokopedia">Tokopedia</option>
                <option value="other">Marketplace Lain</option>
            </select>
        </div>
    </div>
    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px;">
        <div>
            <label style="display: block; color: #e2e8f0; margin-bottom: 8px;">No. Pesanan</label>
            <input type="text" id="orderNumber" style="width: 100%; padding: 12px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;" placeholder="SPX123456789">
        </div>
        <div>
            <label style="display: block; color: #e2e8f0; margin-bottom: 8px;">No. Resi</label>
            <input type="text" id="trackingNumber" style="width: 100%; padding: 12px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;" placeholder="JNE123456789">
        </div>
    </div>
    <div>
        <label style="display: block; color: #e2e8f0; margin-bottom: 8px;">Expedisi</label>
        <select id="expedisi" style="width: 100%; padding: 12px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;">
            <option value="">-- Pilih Expedisi --</option>
            <option value="jne">JNE</option>
            <option value="jnt">J&T Express</option>
            <option value="sicepat">SiCepat</option>
            <option value="anteraja">AnterAja</option>
            <option value="spx">Shopee Express</option>
            <option value="gosend">GoSend</option>
            <option value="grab">GrabExpress</option>
            <option value="pickup">Pickup/COD</option>
        </select>
    </div>
</div>
        
        <!-- Section 2: Data Customer -->
<div style="border-left: 4px solid #10b981; padding-left: 16px; margin-bottom: 32px;">
    <h3 style="color: #e2e8f0; margin-bottom: 16px; display: flex; align-items: center; gap: 8px;">
    <svg width="20" height="20" viewBox="0 0 24 24" fill="white">
        <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
    </svg>
    Data Customer
</h3>
    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px;">
        <div>
            <label style="display: block; color: #e2e8f0; margin-bottom: 8px;">Nama Customer *</label>
            <input type="text" id="customerName" style="width: 100%; padding: 12px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;" required placeholder="Nama lengkap customer">
        </div>
        <div>
            <label style="display: block; color: #e2e8f0; margin-bottom: 8px;">No. Telepon *</label>
            <input type="tel" id="customerPhone" style="width: 100%; padding: 12px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;" required placeholder="08xxxxxxxxx">
        </div>
    </div>
    <div>
        <label style="display: block; color: #e2e8f0; margin-bottom: 8px;">Alamat Lengkap *</label>
        <textarea id="customerAddress" style="width: 100%; padding: 12px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0; height: 100px; resize: none;" required placeholder="Alamat lengkap: Jalan, RT/RW, Kelurahan, Kecamatan, Kota, Provinsi, Kode Pos"></textarea>
    </div>
</div>

       <!-- Section 2: Detail Produk (Multi-Product) -->
<div style="border-left: 4px solid #f59e0b; padding-left: 16px; margin-bottom: 32px;">
    <h3 style="color: #e2e8f0; margin-bottom: 16px; display: flex; align-items: center; gap: 8px;">
        🛒 Daftar Produk & Jumlah
    </h3>
    
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
        <p style="color: #94a3b8; margin: 0;">Tambahkan produk ke dalam transaksi</p>
        <button type="button" onclick="addProductToList()" style="padding: 10px 20px; background: #3b82f6; color: white; border: none; border-radius: 8px; cursor: pointer; display: flex; align-items: center; gap: 8px;">
            <span>+</span> Tambah Produk
        </button>
    </div>
    
    <div id="selectedProductsList" style="background: #334155; border-radius: 8px; padding: 16px; min-height: 60px;">
        <p style="color: #94a3b8; text-align: center; margin: 0;">Belum ada produk dipilih</p>
    </div>
</div>
        
 
       <!-- Section 4: Informasi Pembayaran -->
<div style="border-left: 4px solid #ef4444; padding-left: 16px; margin-bottom: 32px;">
    <h3 style="color: #e2e8f0; margin-bottom: 16px; display: flex; align-items: center; gap: 8px;">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="white">
            <path d="M20 4H4c-1.11 0-2 .89-2 2v12c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm0 14H4v-6h16v6zm0-10H4V6h16v2z"/>
        </svg>
        Informasi Pembayaran
    </h3>
    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
        <div>
            <label style="display: block; color: #e2e8f0; margin-bottom: 8px;">Metode Pembayaran *</label>
            <select id="paymentMethod" style="width: 100%; padding: 12px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;" required>
                <option value="">-- Pilih Metode --</option>
                <option value="cod">💰 COD (Cash on Delivery)</option>
                <option value="transfer">🏦 Transfer Bank</option>
                <option value="ewallet">📱 E-Wallet (OVO/DANA/GoPay)</option>
                <option value="qris">📲 QRIS</option>
                <option value="marketplace_wallet">🛒 Saldo Marketplace</option>
            </select>
        </div>
        <div>
            <label style="display: block; color: #e2e8f0; margin-bottom: 8px;">Status Pembayaran *</label>
            <select id="paymentStatus" style="width: 100%; padding: 12px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;" required>
                <option value="pending">⏳ Pending</option>
                <option value="paid">✅ Paid</option>
                <option value="failed">❌ Failed</option>
            </select>
        </div>
    </div>
</div>

        <!-- Section 4: Konfirmasi -->
        <div style="border-left: 4px solid #8b5cf6; padding-left: 16px; margin-bottom: 32px;">
            <h3 style="color: #e2e8f0; margin-bottom: 16px; display: flex; align-items: center; gap: 8px;">
                📝 Catatan & Konfirmasi
            </h3>
            <div>
                <label style="display: block; color: #e2e8f0; margin-bottom: 8px;">Catatan Tambahan (Opsional)</label>
                <textarea id="saleDescription" style="width: 100%; padding: 12px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0; height: 80px; resize: none;" placeholder="Tambahkan catatan, instruksi khusus, atau informasi penting lainnya..."></textarea>
            </div>
        </div>

        <!-- Action Buttons -->
        <div style="display: flex; justify-content: center; gap: 16px; padding-top: 24px; border-top: 1px solid #334155;">
            <button type="button" style="padding: 12px 24px; background: #ef4444; color: white; border: none; border-radius: 8px; cursor: pointer;">🔄 Reset Form</button>
            <button type="button" style="padding: 12px 24px; background: #6366f1; color: white; border: none; border-radius: 8px; cursor: pointer;">👁️ Preview</button>
            <button type="submit" style="padding: 12px 24px; background: #10b981; color: white; border: none; border-radius: 8px; cursor: pointer;">✅ Simpan Transaksi</button>
        </div>
    </form>
</div>

                <!-- Inventory Page -->
<div id="inventory" class="page-content">
    <div class="page-header">
        <h1 class="page-title">Inventaris Produk</h1>
        <p class="page-subtitle">Kelola stok produk dan detailnya</p>
    </div>

<!-- GANTI BAGIAN INI -->
<div class="modern-inventory-tabs">
    <div class="modern-tabs-grid">
        <button class="modern-tab active" onclick="switchInventoryTab('master')" id="inventoryTab-master">Master Produk</button>
        <button class="modern-tab" onclick="switchInventoryTab('movement')" id="inventoryTab-movement">Stock Movement</button>
        <button class="modern-tab" onclick="switchInventoryTab('report')" id="inventoryTab-report">Laporan</button>
        <button class="modern-tab" onclick="switchInventoryTab('analytics')" id="inventoryTab-analytics">Analytics</button>
    </div>
</div>

    <!-- Master Produk tab content -->
    <div id="inventoryTabContent-master">
        

        <div class="card">
            <div style="display: flex; justify-content: space-between; align-items: center; padding: 20px 24px; border-bottom: 1px solid #334155;">
    <h3 style="color: #e2e8f0; font-size: 18px; font-weight: 600;">Daftar Produk</h3>
    <div style="display: flex; gap: 12px; align-items: center;">
        <button onclick="openProductModal()" class="btn btn-primary">+ Tambah Produk</button>
        <input type="text" id="searchInventory" class="form-control" placeholder="Cari produk..." style="width: 250px;">
    </div>
</div>
            <div style="overflow-x: auto; border-radius: 12px; border: 1px solid #334155;">
                <table style="width: 100%; border-collapse: collapse; background: #1e293b;">
                    <thead>
                        <tr style="background: #334155; border-bottom: 1px solid #475569;">
                            <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px;">SKU</th>
                            <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px;">NAMA BARANG</th>
                            <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px;">STOK AWAL</th>
                            <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px;">HPP</th>
                            <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px;">HARGA JUAL</th>
                            <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px;">ACTION</th>
                        </tr>
                    </thead>
                    <tbody id="inventoryList">
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Stock Movement tab content -->
    <div id="inventoryTabContent-movement" style="display:none;">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Pergerakan Stok</h3>
                <div style="display: flex; gap: 12px;">
                    <button class="btn btn-secondary" onclick="refreshStockMovement()">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 6px;">
                            <path d="M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z"/>
                        </svg>
                        Refresh
                    </button>
                    <button class="btn btn-primary" onclick="openStockMovementModal()">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 6px;">
                            <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                        </svg>
                        Tambah Movement
                    </button>
                </div>
            </div>
            <div style="overflow-x: auto; border-radius: 12px; border: 1px solid #334155;">
                <table style="width: 100%; border-collapse: collapse; background: #1e293b;">
                    <thead>
                        <tr style="background: #334155; border-bottom: 1px solid #475569;">
                            <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px;">TANGGAL</th>
                            <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px;">SKU</th>
                            <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px;">NAMA PRODUK</th>
                            <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px;">TYPE</th>
                            <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px;">QTY</th>
                            <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px;">NOTES</th>
                            <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px;">ACTION</th>
                        </tr>
                    </thead>
                    <tbody id="stockMovementList">
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Report tab content -->
    <div id="inventoryTabContent-report" style="display:none;">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Laporan Stock</h3>
                <div style="display: flex; gap: 12px;">
                    <button class="btn btn-secondary" onclick="refreshReport()">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 6px;">
                            <path d="M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z"/>
                        </svg>
                        Refresh
                    </button>
                    <button class="btn btn-primary" onclick="exportReport()">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 6px;">
                            <path d="M19 12v7H5v-7H3v7c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zm-6 .67l2.59-2.58L17 11.5l-5 5-5-5 1.41-1.41L11 12.67V3h2z"/>
                        </svg>
                        Export
                    </button>
                </div>
            </div>
            <div style="overflow-x: auto; border-radius: 12px; border: 1px solid #334155;">
                <table style="width: 100%; border-collapse: collapse; background: #1e293b;">
                    <thead>
                        <tr style="background: #334155; border-bottom: 1px solid #475569;">
                            <th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px; white-space: nowrap;">KODE</th>
<th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px; white-space: nowrap;">NAMA BARANG</th>
<th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px; white-space: nowrap;">UNIT</th>
<th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px; white-space: nowrap;">STOK AWAL</th>
<th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px; white-space: nowrap;">BARANG MASUK</th>
<th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px; white-space: nowrap;">BARANG KELUAR</th>
<th style="padding: 16px 20px; text-align: left; color: #e2e8f0; font-weight: 600; font-size: 14px; white-space: nowrap;">STOK AKHIR</th>
                        </tr>
                    </thead>
                    <tbody id="inventoryReportContent">
                    </tbody>
                </table>
            </div>
        </div>
    </div>

   <!-- Analytics tab content -->
    <div id="inventoryTabContent-analytics" style="display:none;">
        <div style="display: grid; grid-template-columns: 1fr 1fr; grid-template-rows: 1fr 1fr; gap: 20px; margin-bottom: 30px;">
            <!-- Total Produk -->
            <div style="background: linear-gradient(135deg, #1e293b 0%, #334155 100%); padding: 24px; border-radius: 16px; border: 1px solid #334155;">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
                    <div style="font-size: 14px; color: #94a3b8; text-transform: uppercase; letter-spacing: 0.5px; font-weight: 600;">TOTAL PRODUK</div>
                    <div style="width: 40px; height: 40px; background: rgba(16, 185, 129, 0.2); border-radius: 10px; display: flex; align-items: center; justify-content: center; color: #10b981;">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M20 6h-2c0-2.21-1.79-4-4-4S10 3.79 10 6H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zM14 6c0-1.1-.9-2-2-2s-2 .9-2 2h4z"/>
                        </svg>
                    </div>
                </div>
                <div style="font-size: 32px; font-weight: 700; margin-bottom: 8px; line-height: 1; color: #10b981;" id="totalProductCount">0</div>
                <div style="color: #94a3b8; font-size: 13px;">Produk dalam inventory</div>
            </div>

            <!-- Low Stock -->
            <div style="background: linear-gradient(135deg, #1e293b 0%, #334155 100%); padding: 24px; border-radius: 16px; border: 1px solid #334155;">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
                    <div style="font-size: 14px; color: #94a3b8; text-transform: uppercase; letter-spacing: 0.5px; font-weight: 600;">LOW STOCK</div>
                    <div style="width: 40px; height: 40px; background: rgba(239, 68, 68, 0.2); border-radius: 10px; display: flex; align-items: center; justify-content: center; color: #ef4444;">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 2L1 21h22M12 6l7.53 13H4.47M11 10v4h2v-4M11 16v2h2v-2"/>
                        </svg>
                    </div>
                </div>
                <div style="font-size: 32px; font-weight: 700; margin-bottom: 8px; line-height: 1; color: #ef4444;" id="lowStockCount">0</div>
                <div style="color: #94a3b8; font-size: 13px;">Produk perlu restock</div>
            </div>

            <!-- Total Value -->
            <div style="background: linear-gradient(135deg, #1e293b 0%, #334155 100%); padding: 24px; border-radius: 16px; border: 1px solid #334155;">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
                    <div style="font-size: 14px; color: #94a3b8; text-transform: uppercase; letter-spacing: 0.5px; font-weight: 600;">TOTAL VALUE</div>
                    <div style="width: 40px; height: 40px; background: rgba(59, 130, 246, 0.2); border-radius: 10px; display: flex; align-items: center; justify-content: center; color: #3b82f6;">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm.31-8.86c-1.77-.45-2.34-.94-2.34-1.67 0-.84.79-1.43 2.1-1.43 1.38 0 1.9.66 1.94 1.64h1.71c-.05-1.34-.87-2.57-2.49-2.97V5H11.5v1.69c-1.51.32-2.72 1.3-2.72 2.81 0 1.79 1.49 2.69 3.66 3.21 1.95.46 2.34 1.15 2.34 1.87 0 .53-.39 1.39-2.1 1.39-1.6 0-2.23-.72-2.32-1.64H8.65c.09 1.71 1.36 2.66 2.85 2.97V19h1.33v-1.68c1.52-.29 2.72-1.16 2.73-2.77-.01-2.2-1.9-2.96-3.25-3.41z"/>
                        </svg>
                    </div>
                </div>
                <div style="font-size: 32px; font-weight: 700; margin-bottom: 8px; line-height: 1; color: #3b82f6;" id="totalInventoryValue">Rp 0</div>
                <div style="color: #94a3b8; font-size: 13px;">Nilai inventory saat ini</div>
            </div>

            <!-- Movement -->
            <div style="background: linear-gradient(135deg, #1e293b 0%, #334155 100%); padding: 24px; border-radius: 16px; border: 1px solid #334155;">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
                    <div style="font-size: 14px; color: #94a3b8; text-transform: uppercase; letter-spacing: 0.5px; font-weight: 600;">MOVEMENT</div>
                    <div style="width: 40px; height: 40px; background: rgba(245, 158, 11, 0.2); border-radius: 10px; display: flex; align-items: center; justify-content: center; color: #f59e0b;">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8z"/>
                        </svg>
                    </div>
                </div>
                <div style="font-size: 32px; font-weight: 700; margin-bottom: 8px; line-height: 1; color: #f59e0b;" id="monthlyMovement">0</div>
                <div style="color: #94a3b8; font-size: 13px;">Movement bulan ini</div>
            </div>
        </div>

        <!-- Bottom Cards -->
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 32px;">
            <!-- Fast Moving Items -->
            <div style="background: #1e293b; border-radius: 16px; border: 1px solid #334155; padding: 24px;">
                <div style="display: flex; align-items: center; gap: 12px; margin-bottom: 16px;">
                    <div style="width: 36px; height: 36px; background: rgba(245, 158, 11, 0.2); border-radius: 8px; display: flex; align-items: center; justify-content: center; color: #f59e0b;">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                        </svg>
                    </div>
                    <div style="font-size: 16px; font-weight: 600; color: #e2e8f0;">Fast Moving Items</div>
                </div>
                <div id="fastMovingItems" style="color: #94a3b8; line-height: 1.6;">
    <!-- Data akan dirender oleh JavaScript -->
</div>
            </div>

            <!-- Low Stock Alert -->
            <div style="background: #1e293b; border-radius: 16px; border: 1px solid #334155; padding: 24px;">
                <div style="display: flex; align-items: center; gap: 12px; margin-bottom: 16px;">
                    <div style="width: 36px; height: 36px; background: rgba(239, 68, 68, 0.2); border-radius: 8px; display: flex; align-items: center; justify-content: center; color: #ef4444;">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 2L1 21h22M12 6l7.53 13H4.47M11 10v4h2v-4M11 16v2h2v-2"/>
                        </svg>
                    </div>
                    <div style="font-size: 16px; font-weight: 600; color: #e2e8f0;">Low Stock Alert</div>
                </div>
                <div id="lowStockAlert" style="color: #94a3b8; line-height: 1.6;">
                    Produk yang perlu diisi ulang
                </div>
            </div>
        </div>

 <!-- Chart Grid - sama seperti Analytics -->
<div class="chart-grid">
    <div class="chart-card">
        <div class="chart-header">
            <h3 class="chart-title">Stock Distribution</h3>
            <span style="color: #94a3b8; font-size: 14px;">Per Produk</span>
        </div>
        <div class="chart-canvas">
            <canvas id="stockDistributionChart"></canvas>
        </div>
    </div>

    <div class="chart-card">
        <div class="chart-header">
            <h3 class="chart-title">Stok Sekarang vs Batas Aman</h3>
<span style="color: #94a3b8; font-size: 14px;">Status Ketersediaan</span>
        </div>
        <div class="chart-canvas">
            <canvas id="stockComparisonChart"></canvas>
        </div>
    </div>
</div>

<div class="chart-container">
    <div style="width: 100%;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
            <h3 style="color: #e2e8f0; font-size: 18px; font-weight: 600;">Stock Movement Timeline</h3>
            <span style="color: #94a3b8; font-size: 14px;">30 Hari Terakhir</span>
        </div>
        <canvas id="stockMovementChart" style="max-height: 350px;"></canvas>
    </div>
</div>

                <!-- Debt Page -->
                <div id="debt" class="page-content">
                    <div class="page-header">
                        <h1 class="page-title">Manajemen Utang & Cicilan</h1>
                        <p class="page-subtitle">Kelola dan pantau semua utang bisnis & cicilan pribadi</p>
                    </div>

                    <!-- Debt Stats -->
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-header">
                                <div class="stat-title">Sisa Utang</div>
                                <div class="stat-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-5.5-2.5l7.51-3.49L17.5 6.5 9.99 9.99 6.5 17.5zm5.5-6.6c.61 0 1.1.49 1.1 1.1s-.49 1.1-1.1 1.1-1.1-.49-1.1-1.1.49-1.1 1.1-1.1z"/>
                                    </svg>
                                </div>
                            </div>
                            <div id="remainingDebt" class="stat-value stat-negative">Rp 0</div>
                            <div class="stat-change">
                                <span>Belum terbayar</span>
                            </div>
                        </div>

                        <div class="stat-card">
                            <div class="stat-header">
                                <div class="stat-title">Total Utang</div>
                                <div class="stat-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M11.8 10.9c-2.27-.59-3-1.2-3-2.15 0-1.09 1.01-1.85 2.7-1.85 1.78 0 2.44.85 2.5 2.1h2.21c-.07-1.72-1.12-3.3-3.21-3.81V3h-3v2.16c-1.94.42-3.5 1.68-3.5 3.61 0 2.31 1.91 3.46 4.7 4.13 2.5.6 3 1.48 3 2.41 0 .69-.49 1.79-2.7 1.79-2.06 0-2.87-.92-2.98-2.1h-2.2c.12 2.19 1.76 3.42 3.68 3.83V21h3v-2.15c1.95-.37 3.5-1.5 3.5-3.55 0-2.84-2.43-3.81-4.7-4.4z"/>
                                    </svg>
                                </div>
                            </div>
                            <div id="totalOriginalDebt" class="stat-value stat-neutral">Rp 0</div>
                            <div class="stat-change">
                                <span>Utang awal</span>
                            </div>
                        </div>

                        <div class="stat-card">
                            <div class="stat-header">
                                <div class="stat-title">Sudah Dibayar</div>
                                <div class="stat-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                                    </svg>
                                </div>
                            </div>
                            <div id="totalPaidAmount" class="stat-value stat-positive">Rp 0</div>
                            <div class="stat-change">
                                <span id="paymentProgress">0% lunas</span>
                            </div>
                        </div>

                        <div class="stat-card">
                            <div class="stat-header">
                                <div class="stat-title">Utang Aktif</div>
                                <div class="stat-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/>
                                    </svg>
                                </div>
                            </div>
                            <div id="activeDebtCount" class="stat-value stat-neutral">0</div>
                            <div class="stat-change">
                                <span id="overdueCount">0 jatuh tempo</span>
                            </div>
                        </div>
                    </div>

                    <!-- Import Cicilan Section -->
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Import Jadwal Cicilan</h3>
                        </div>
                        <div class="card-content">
                            <div class="import-section" id="importSection">
                                <svg width="48" height="48" viewBox="0 0 24 24" fill="currentColor" style="color: #3b82f6; margin-bottom: 12px;">
                                    <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
                                </svg>
                                <h4 style="color: #e2e8f0; margin-bottom: 8px;">Upload File CSV Cicilan</h4>
                                <p style="color: #94a3b8; margin-bottom: 16px;">
                                    Drag & drop file CSV atau klik untuk browse.<br>
                                    <small>Format: Tanggal Jatuh Tempo, Nominal Cicilan, Keterangan</small>
                                </p>
                                <input type="file" id="cicilanFileInput" class="file-input" accept=".csv" onchange="handleCicilanImport(event)">
                                <button class="import-btn" onclick="document.getElementById('cicilanFileInput').click()">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M9 16h6v-6h4l-7-7-7 7h4zm-4 2h14v2H5z"/>
                                    </svg>
                                    Pilih File CSV
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Manual Debt Form -->
                    <div class="form-card collapsed" id="debtFormCard">
                        <button class="toggle-form-btn" onclick="toggleDebtForm()">
                            <div>
                                <div class="btn-text">Tambah Utang Manual</div>
                                <p style="color: #94a3b8; font-size: 14px; margin: 4px 0 0 0;">Klik untuk menambah utang individual</p>
                            </div>
                            <svg class="toggle-icon" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M7 10l5 5 5-5z"/>
                            </svg>
                        </button>
                        <div class="card-content">
                            <form id="debtForm">
                                <div class="form-grid">
                                    <div class="form-group">
                                        <label class="form-label">Jumlah per Cicilan (Rp)</label>
                                        <input type="number" id="debtAmount" class="form-control" required min="0" step="0.01" placeholder="0">
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Kepada</label>
                                        <input type="text" id="debtTo" class="form-control" required placeholder="Nama kreditor">
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Tanggal Mulai</label>
                                        <input type="date" id="debtDueDate" class="form-control">
                                    </div>
                                </div>
                                
                                <!-- Recurring Options -->
                                <div class="form-group">
                                    <label class="form-label" style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
                                        <input type="checkbox" id="isRecurring" class="form-checkbox" onchange="toggleRecurringOptions()">
                                        Cicilan Berulang
                                    </label>
                                </div>

                                <div id="recurringOptions" style="display: none;">
                                    <div class="form-grid">
                                        <div class="form-group">
                                            <label class="form-label">Jumlah Cicilan</label>
                                            <select id="cicilanCount" class="form-control">
                                                <option value="2">2x Cicilan</option>
                                                <option value="3">3x Cicilan</option>
                                                <option value="6">6x Cicilan</option>
                                                <option value="12" selected>12x Cicilan</option>
                                                <option value="24">24x Cicilan</option>
                                                <option value="36">36x Cicilan</option>
                                                <option value="custom">Custom...</option>
                                            </select>
                                        </div>
                                        <div class="form-group" id="customCountGroup" style="display: none;">
                                            <label class="form-label">Jumlah Custom</label>
                                            <input type="number" id="customCount" class="form-control" min="1" max="120" placeholder="Masukkan jumlah">
                                        </div>
                                        <div class="form-group">
                                            <label class="form-label">Interval</label>
                                            <select id="cicilanInterval" class="form-control">
                                                <option value="weekly">Mingguan</option>
                                                <option value="monthly" selected>Bulanan</option>
                                                <option value="quarterly">3 Bulanan</option>
                                            </select>
                                        </div>
                                    </div>
                                    
                                    <div class="preview-box">
                                        <div class="preview-title">Preview Cicilan:</div>
                                        <div id="cicilanPreview" class="preview-content">
                                            12x cicilan bulanan mulai dari tanggal yang dipilih
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label class="form-label">Deskripsi</label>
                                    <textarea id="debtDescription" class="form-control" rows="3" placeholder="Deskripsi utang..."></textarea>
                                </div>
                                <div style="display: flex; gap: 12px;">
                                    <button type="submit" class="btn btn-primary">
                                        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                            <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                                        </svg>
                                        <span id="submitButtonText">Tambah Utang</span>
                                    </button>
                                    <button type="button" class="btn btn-secondary" onclick="toggleDebtForm()">
                                        Batal
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>

                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Daftar Utang & Cicilan</h3>
                            <div class="view-toggle">
                                <button class="view-toggle-btn active" onclick="switchDebtView('list')" id="listViewBtn">
                                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 6px;">
                                        <path d="M3 13h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm4 4h14v-2H7v2zm0 4h14v-2H7v2zM7 7v2h14V7H7z"/>
                                    </svg>
                                    List View
                                </button>
                                <button class="view-toggle-btn" onclick="switchDebtView('calendar')" id="calendarViewBtn">
                                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 6px;">
                                        <path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/>
                                    </svg>
                                    Calendar View
                                </button>
                            </div>
                        </div>
                        <div class="card-content">
                            <div id="debtListView">
                                <div id="debtsList"></div>
                            </div>
                            <div id="debtCalendarView" style="display: none;">
                                <div class="calendar-view" id="debtCalendar"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Analytics Page -->
                <div id="analytics" class="page-content">
                    <div class="page-header">
                        <h1 class="page-title">Business Analytics</h1>
                        <p class="page-subtitle">Insight mendalam untuk pengambilan keputusan bisnis</p>
                    </div>

                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-header">
                                <div class="stat-title">Profit Margin</div>
                                <div class="stat-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M16 6l2.29 2.29-4.88 4.88-4-4L2 16.59 3.41 18l6-6 4 4 6.3-6.29L22 12V6z"/>
                                    </svg>
                                </div>
                            </div>
                            <div id="profitMargin" class="stat-value stat-positive">0%</div>
                            <div class="stat-change">
                                <span>Margin keuntungan</span>
                            </div>
                        </div>

                        <div class="stat-card">
                            <div class="stat-header">
                                <div class="stat-title">Avg Transaksi/Hari</div>
                                <div class="stat-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/>
                                    </svg>
                                </div>
                            </div>
                            <div id="avgTransactions" class="stat-value stat-neutral">0</div>
                            <div class="stat-change">
                                <span>Rata-rata harian</span>
                            </div>
                        </div>

                        <div class="stat-card">
                            <div class="stat-header">
                                <div class="stat-title">Top Kategori Pengeluaran</div>
                                <div class="stat-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                                    </svg>
                                </div>
                            </div>
                            <div id="topCategory" class="stat-value stat-neutral">-</div>
                            <div class="stat-change">
                                <span id="topCategoryAmount">Rp 0</span>
                            </div>
                        </div>

                        <div class="stat-card">
                            <div class="stat-header">
                                <div class="stat-title">Burn Rate</div>
                                <div class="stat-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M13.5.67s.74 2.65.74 4.8c0 2.06-1.35 3.73-3.41 3.73-2.07 0-3.63-1.67-3.63-3.73l.03-.36C5.21 7.51 4 10.62 4 14c0 4.42 3.58 8 8 8s8-3.58 8-8C20 8.61 17.41 3.8 13.5.67zM11.71 19c-1.78 0-3.22-1.4-3.22-3.14 0-1.62 1.05-2.76 2.81-3.12 1.77-.36 3.6-1.21 4.62-2.58.39 1.29.28 2.16.28 2.16-.5 2.5-2.3 4.68-4.49 6.68z"/>
                                    </svg>
                                </div>
                            </div>
                            <div id="burnRate" class="stat-value stat-negative">Rp 0</div>
                            <div class="stat-change">
                                <span>Per bulan</span>
                            </div>
                        </div>
                    </div>

                    <div class="chart-grid">
                        <div class="chart-card">
                            <div class="chart-header">
                                <h3 class="chart-title">Breakdown Pengeluaran</h3>
                                <span style="color: #94a3b8; font-size: 14px;">Per Kategori</span>
                            </div>
                            <div class="chart-canvas">
                                <canvas id="categoryChart"></canvas>
                            </div>
                        </div>

                        <div class="chart-card">
                            <div class="chart-header">
                                <h3 class="chart-title">Trend Bulanan</h3>
                                <span style="color: #94a3b8; font-size: 14px;">Pendapatan vs Pengeluaran</span>
                            </div>
                            <div class="chart-canvas">
                                <canvas id="trendChart"></canvas>
                            </div>
                        </div>
                    </div>

                    <div class="chart-container">
                        <div style="width: 100%;">
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                                <h3 style="color: #e2e8f0; font-size: 18px; font-weight: 600;">Perbandingan Income vs Expense</h3>
                                <span style="color: #94a3b8; font-size: 14px;">6 Bulan Terakhir</span>
                            </div>
                            <canvas id="comparisonChart" style="max-height: 350px;"></canvas>
                        </div>
                    </div>

                    <div class="insights-grid">
                        <div class="insight-card">
                            <div class="insight-header">
                                <div class="insight-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M9 11H7v6h2v-6zm4 0h-2v6h2v-6zm4 0h-2v6h2v-6zM4 21h16c.55 0 1-.45 1-1s-.45-1-1-1H4c-.55 0-1 .45-1 1s.45 1 1 1zM4 3v2h16V3c0-.55-.45-1-1-1H5c-.55 0-1 .45-1 1z"/>
                                    </svg>
                                </div>
                                <div class="insight-title">Tren Pengeluaran</div>
                            </div>
                            <div class="insight-content">
                                <p id="expenseTrend">Analisis tren pengeluaran akan muncul setelah ada data transaksi.</p>
                                <div class="progress-bar">
                                    <div class="progress-fill" id="expenseTrendProgress" style="width: 0%"></div>
                                </div>
                            </div>
                        </div>

                        <div class="insight-card">
                            <div class="insight-header">
                                <div class="insight-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                                    </svg>
                                </div>
                                <div class="insight-title">Rekomendasi</div>
                            </div>
                            <div class="insight-content">
                                <div id="recommendations">
                                    <p>• Mulai catat transaksi untuk mendapatkan insight</p>
                                    <p>• Set budget bulanan untuk kontrol pengeluaran</p>
                                    <p>• Monitor cash flow secara regular</p>
                                </div>
                            </div>
                        </div>

                        <div class="insight-card">
                            <div class="insight-header">
                                <div class="insight-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                                    </svg>
                                </div>
                                <div class="insight-title">Health Score</div>
                            </div>
                            <div class="insight-content">
                                <div class="stat-value stat-neutral" id="healthScore">-</div>
                                <p id="healthScoreDesc">Skor kesehatan finansial bisnis Anda</p>
                                <div class="progress-bar">
                                    <div class="progress-fill" id="healthScoreProgress" style="width: 0%"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Categories Page -->
                <div id="categories" class="page-content">
                    <div class="page-header">
                        <h1 class="page-title">Kelola Kategori</h1>
                        <p class="page-subtitle">Atur kategori pengeluaran sesuai kebutuhan bisnis</p>
                    </div>

                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Tambah Kategori Baru</h3>
                        </div>
                        <div class="card-content">
                            <form id="categoryForm">
                                <div class="form-group">
                                    <label class="form-label">Nama Kategori</label>
                                    <input type="text" id="categoryName" class="form-control" required placeholder="Contoh: Bubble Wrap, Lakban Bening">
                                </div>
                                <button type="submit" class="btn btn-success">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                                    </svg>
                                    Tambah Kategori
                                </button>
                            </form>
                        </div>
                    </div>

                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Daftar Kategori</h3>
                        </div>
                        <div class="card-content">
                            <div class="category-grid" id="categoriesList"></div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>
    
    <!-- Modern Preview Modal -->
<div id="previewModal" class="preview-modal">
    <div class="preview-backdrop" onclick="closePreviewModal()"></div>
    <div class="preview-card">
        <div class="preview-header">
            <h2>🧾 Preview Transaksi</h2>
            <button onclick="closePreviewModal()" class="preview-close">✕</button>
        </div>
        
        <div class="preview-content">
            <!-- Customer Info -->
            <div class="preview-section">
                <h3>👤 Customer</h3>
                <div class="preview-grid">
                    <div><strong>Nama:</strong> <span id="previewCustomerName">-</span></div>
                    <div><strong>Telepon:</strong> <span id="previewCustomerPhone">-</span></div>
                    <div><strong>Alamat:</strong> <span id="previewCustomerAddress">-</span></div>
                </div>
            </div>

            <!-- Order Info -->
            <div class="preview-section">
                <h3>📋 Detail Pesanan</h3>
                <div class="preview-grid">
                    <div><strong>Platform:</strong> <span id="previewPlatform">-</span></div>
                    <div><strong>No Pesanan:</strong> <span id="previewOrderNumber">-</span></div>
                    <div><strong>Expedisi:</strong> <span id="previewExpedisi">-</span></div>
                    <div><strong>No Resi:</strong> <span id="previewTrackingNumber">-</span></div>
                </div>
            </div>

            <!-- Products -->
            <div class="preview-section">
                <h3>🛒 Produk</h3>
                <div id="previewProducts"></div>
            </div>

            <!-- Payment Summary -->
            <div class="preview-section">
                <h3>💰 Ringkasan Pembayaran</h3>
                <div class="preview-summary">
                    <div class="summary-row">
                        <span>Subtotal:</span>
                        <span id="previewSubtotal">Rp 0</span>
                    </div>
                    <div class="summary-row">
                        <span>Estimasi Profit:</span>
                        <span id="previewProfit" style="color: #f59e0b;">Rp 0</span>
                    </div>
                    <div class="summary-row total">
                        <span>Total:</span>
                        <span id="previewTotal">Rp 0</span>
                    </div>
                </div>
            </div>

            <!-- Payment Method -->
            <div class="preview-section">
                <h3>💳 Pembayaran</h3>
                <div class="preview-grid">
                    <div><strong>Metode:</strong> <span id="previewPaymentMethod">-</span></div>
                    <div><strong>Status:</strong> <span id="previewPaymentStatus">-</span></div>
                </div>
            </div>
        </div>

        <div class="preview-footer">
            <button onclick="closePreviewModal()" class="btn-secondary">Tutup</button>
            <button onclick="editTransaction()" class="btn-primary">✏️ Edit</button>
            <button onclick="confirmTransaction()" class="btn-success">✅ Konfirmasi</button>
        </div>
    </div>
</div>
    
    <!-- Modal Tambah Produk -->
<div id="productModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); z-index: 2000; align-items: center; justify-content: center;">
    <div style="background: #1e293b; border-radius: 16px; padding: 32px; width: 90%; max-width: 700px; border: 1px solid #334155; position: relative; max-height: 90vh; overflow-y: auto;">
        
        <!-- Header -->
        <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 32px;">
            <div style="display: flex; align-items: center; gap: 12px;">
                <div style="width: 24px; height: 24px; background: #3b82f6; border-radius: 6px; display: flex; align-items: center; justify-content: center;">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="white">
                        <path d="M20 6h-2c0-2.21-1.79-4-4-4S10 3.79 10 6H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zM14 6c0-1.1-.9-2-2-2s-2 .9-2 2h4z"/>
                    </svg>
                </div>
                <h3 style="color: #e2e8f0; font-size: 20px; font-weight: 600; margin: 0;">Tambah Produk Baru</h3>
            </div>
            <button onclick="closeProductModal()" style="background: none; border: none; color: #94a3b8; cursor: pointer; font-size: 24px; width: 32px; height: 32px; display: flex; align-items: center; justify-content: center; border-radius: 6px;" onmouseover="this.style.background='#374151'" onmouseout="this.style.background='none'">&times;</button>
        </div>

        <!-- Form -->
        <form id="productModalForm" onsubmit="handleProductSubmit(event)">
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px;">
                
                <!-- SKU -->
                <div>
                    <label style="display: block; color: #e2e8f0; font-weight: 500; margin-bottom: 8px;">SKU <span style="color: #ef4444;">*</span></label>
<input type="text" id="modalSKU" style="width: 100%; padding: 12px 16px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;" required placeholder="Ketik SKU sendiri, contoh: GLS420-001">                </div>

                <!-- Nama Barang -->
                <div>
                    <label style="display: block; color: #e2e8f0; font-weight: 500; margin-bottom: 8px;">Nama Barang <span style="color: #ef4444;">*</span></label>
                    <input type="text" id="modalNama" style="width: 100%; padding: 12px 16px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;" required placeholder="Gelas 420ml Tutup Kayu">
                </div>

                <!-- Unit -->
                <div>
                    <label style="display: block; color: #e2e8f0; font-weight: 500; margin-bottom: 8px;">Unit</label>
                    <select id="modalUnit" style="width: 100%; padding: 12px 16px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;">
                        <option value="pcs">pcs</option>
                        <option value="box">box</option>
                        <option value="pack">pack</option>
                        <option value="kg">kg</option>
                        <option value="ltr">ltr</option>
                    </select>
                </div>

                <!-- Stok Awal -->
                <div>
                    <label style="display: block; color: #e2e8f0; font-weight: 500; margin-bottom: 8px;">Stok Awal</label>
                    <input type="number" id="modalStok" style="width: 100%; padding: 12px 16px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;" min="0" placeholder="0">
                </div>

                <!-- Harga Modal -->
                <div>
                    <label style="display: block; color: #e2e8f0; font-weight: 500; margin-bottom: 8px;">Harga Modal (Rp)</label>
                    <input type="number" id="modalHargaModal" style="width: 100%; padding: 12px 16px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;" min="0" placeholder="0">
                </div>

                <!-- Harga Jual -->
                <div>
                    <label style="display: block; color: #e2e8f0; font-weight: 500; margin-bottom: 8px;">Harga Jual (Rp)</label>
                    <input type="number" id="modalHargaJual" style="width: 100%; padding: 12px 16px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;" min="0" placeholder="0">
                </div>
            </div>

            <!-- Min Stock Alert -->
            <div style="margin-bottom: 32px;">
                <label style="display: block; color: #e2e8f0; font-weight: 500; margin-bottom: 8px;">Min Stock Alert</label>
                <input type="number" id="modalMinStock" style="width: 100%; padding: 12px 16px; background: #334155; border: 1px solid #475569; border-radius: 8px; color: #e2e8f0;" min="0" placeholder="5">
            </div>

            <!-- Buttons -->
            <div style="display: flex; gap: 12px;">
                <button type="submit" style="flex: 1; padding: 14px 24px; background: #3b82f6; color: white; border: none; border-radius: 8px; font-weight: 600; cursor: pointer; display: flex; align-items: center; justify-content: center; gap: 8px;" onmouseover="this.style.background='#2563eb'" onmouseout="this.style.background='#3b82f6'">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                    </svg>
                    Simpan Produk
                </button>
                <button type="button" onclick="closeProductModal()" style="flex: 1; padding: 14px 24px; background: #475569; color: white; border: none; border-radius: 8px; font-weight: 600; cursor: pointer;" onmouseover="this.style.background='#64748b'" onmouseout="this.style.background='#475569'">Batal</button>
            </div>
        </form>
    </div>
</div>

<!-- Modal Tambah Stock Movement - Responsif -->
<div id="stockMovementModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); z-index: 2000; align-items: center; justify-content: center;">
    <div style="background: #1e293b; border-radius: 16px; padding: 24px; width: 90%; max-width: 500px; border: 1px solid #334155; position: relative; max-height: 95vh; display: flex; flex-direction: column;">
        
        <!-- Header -->
        <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 24px; flex-shrink: 0;">
            <h3 style="color: #e2e8f0; font-size: 18px; font-weight: 600; margin: 0;">Tambah Stock Movement</h3>
            <button onclick="closeStockMovementModal()" style="background: none; border: none; color: #94a3b8; cursor: pointer; font-size: 20px; width: 28px; height: 28px; display: flex; align-items: center; justify-content: center; border-radius: 4px;" onmouseover="this.style.background='#374151'" onmouseout="this.style.background='none'">&times;</button>
        </div>

        <!-- Form - Scrollable Content -->
        <form id="stockMovementForm" onsubmit="handleStockMovementSubmit(event)" style="flex: 1; display: flex; flex-direction: column;">
            
            <!-- Form Fields -->
            <div style="flex: 1; overflow-y: auto; margin-bottom: 20px;">
                
                <!-- Pilih Produk -->
                <div style="margin-bottom: 16px;">
                    <label style="display: block; color: #e2e8f0; font-weight: 500; margin-bottom: 6px; font-size: 14px;">Pilih Produk</label>
                    <input type="text" id="productSearch" style="width: 100%; padding: 10px 12px; background: #334155; border: 1px solid #475569; border-radius: 6px; color: #e2e8f0; font-size: 14px;" placeholder="Ketik SKU atau nama produk..." required>
                </div>

                <!-- Jenis Movement -->
                <div style="margin-bottom: 16px;">
                    <label style="display: block; color: #e2e8f0; font-weight: 500; margin-bottom: 6px; font-size: 14px;">Jenis Movement</label>
                    <select id="movementType" style="width: 100%; padding: 10px 12px; background: #334155; border: 1px solid #475569; border-radius: 6px; color: #e2e8f0; font-size: 14px;" required>
                        <option value="">-- Pilih Jenis --</option>
                        <option value="in">Stock In (Masuk)</option>
                        <option value="out">Stock Out (Keluar)</option>
                    </select>
                </div>

                <!-- Jumlah -->
                <div style="margin-bottom: 16px;">
                    <label style="display: block; color: #e2e8f0; font-weight: 500; margin-bottom: 6px; font-size: 14px;">Jumlah</label>
                    <input type="number" id="movementQty" style="width: 100%; padding: 10px 12px; background: #334155; border: 1px solid #475569; border-radius: 6px; color: #e2e8f0; font-size: 14px;" min="1" required placeholder="0">
                </div>

                <!-- Keterangan -->
                <div style="margin-bottom: 16px;">
                    <label style="display: block; color: #e2e8f0; font-weight: 500; margin-bottom: 6px; font-size: 14px;">Keterangan</label>
                    <select id="movementReason" style="width: 100%; padding: 10px 12px; background: #334155; border: 1px solid #475569; border-radius: 6px; color: #e2e8f0; font-size: 14px;" required>
                        <option value="">-- Pilih Keterangan --</option>
                        <option value="Restock">Restock</option>
                        <option value="Penjualan">Penjualan</option>
                        <option value="Return">Return</option>
                        <option value="Rusak">Rusak/Hilang</option>
                        <option value="Adjustment">Stock Adjustment</option>
                        <option value="Initial Stock">Initial Stock</option>
                    </select>
                </div>

                <!-- Catatan Tambahan -->
                <div style="margin-bottom: 0;">
                    <label style="display: block; color: #e2e8f0; font-weight: 500; margin-bottom: 6px; font-size: 14px;">Catatan Tambahan</label>
                    <textarea id="movementNotes" style="width: 100%; padding: 10px 12px; background: #334155; border: 1px solid #475569; border-radius: 6px; color: #e2e8f0; height: 60px; resize: none; font-size: 14px;" placeholder="Catatan optional..."></textarea>
                </div>
                
            </div>

            <!-- Buttons - Fixed Bottom -->
            <div style="display: flex; gap: 10px; flex-shrink: 0;">
                <button type="button" onclick="closeStockMovementModal()" style="flex: 1; padding: 12px 20px; background: #475569; color: white; border: none; border-radius: 6px; font-weight: 500; cursor: pointer; font-size: 14px;" onmouseover="this.style.background='#64748b'" onmouseout="this.style.background='#475569'">
                    Batal
                </button>
                <button type="submit" style="flex: 1; padding: 12px 20px; background: #3b82f6; color: white; border: none; border-radius: 6px; font-weight: 500; cursor: pointer; display: flex; align-items: center; justify-content: center; gap: 6px; font-size: 14px;" onmouseover="this.style.background='#2563eb'" onmouseout="this.style.background='#3b82f6'">
                    <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                    </svg>
                    Simpan Movement
                </button>
            </div>
        </form>
    </div>
</div>



    <!-- Payment Modal -->
    <div id="paymentModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Bayar Utang</h3>
                <button class="close-modal" onclick="closePaymentModal()">&times;</button>
            </div>
            
            <!-- Debt Info Display -->
            <div class="debt-info-card">
                <div class="debt-info-title" id="paymentDebtInfo">
                    Utang ke: -
                </div>
                <div class="debt-info-details" id="paymentDebtDetails">
                    Sisa utang: Rp 0
                </div>
            </div>

            <!-- Payment Options -->
            <div class="payment-options">
                <button type="button" class="payment-option-btn" id="partialPayBtn" onclick="setPaymentType('partial')">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                    </svg>
                    Bayar Sebagian
                </button>
                <button type="button" class="payment-option-btn" id="fullPayBtn" onclick="setPaymentType('full')">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                    </svg>
                    Bayar Lunas
                </button>
            </div>

            <form id="paymentForm">
                <input type="hidden" id="paymentDebtId">
                <input type="hidden" id="paymentType" value="partial">
                
                <div class="form-group">
                    <label class="form-label">Jumlah Pembayaran (Rp)</label>
                    <input type="number" id="paymentAmount" class="form-control" required min="0" step="0.01" placeholder="Masukkan nominal">
                    <small class="input-helper" id="paymentHelper">
                        Masukkan nominal yang ingin dibayar
                    </small>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Tanggal Pembayaran</label>
                    <input type="date" id="paymentDate" class="form-control" required>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Catatan</label>
                    <textarea id="paymentNote" class="form-control" rows="2" placeholder="Catatan pembayaran (opsional)"></textarea>
                </div>
                
                <!-- Payment Summary -->
                <div class="payment-summary" id="paymentSummary">
                    <div class="summary-row">
                        <span class="summary-label">Jumlah Bayar:</span>
                        <span class="summary-value" style="color: #e2e8f0;" id="summaryAmount">Rp 0</span>
                    </div>
                    <div class="summary-row">
                        <span class="summary-label">Sisa Setelah Bayar:</span>
                        <span class="summary-value" style="color: #ef4444;" id="summaryRemaining">Rp 0</span>
                    </div>
                    <div class="summary-row" id="statusRow">
                        <span class="summary-label">Status:</span>
                        <span class="summary-value" id="summaryStatus">Masih Berhutang</span>
                    </div>
                </div>

                <div style="display: flex; gap: 12px; margin-top: 20px;">
                    <button type="submit" class="btn btn-success" style="flex: 1;">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                        </svg>
                        <span id="submitPaymentText">Konfirmasi Bayar</span>
                    </button>
                    <button type="button" class="btn btn-secondary" onclick="closePaymentModal()">
                        Batal
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script>
        // Global functions - define immediately for HTML onclick handlers
        window.toggleDebtForm = function() {
            const formCard = document.getElementById('debtFormCard');
            formCard.classList.toggle('collapsed');
        };

        window.toggleTransactionForm = function() {
            const formCard = document.getElementById('transactionFormCard');
            formCard.classList.toggle('collapsed');
        };

        window.toggleRecurringOptions = function() {
            const checkbox = document.getElementById('isRecurring');
            const options = document.getElementById('recurringOptions');
            const submitButton = document.getElementById('submitButtonText');
            
            if (checkbox.checked) {
                options.style.display = 'block';
                submitButton.textContent = 'Buat Cicilan';
                window.updateCicilanPreview();
            } else {
                options.style.display = 'none';
                submitButton.textContent = 'Tambah Utang';
            }
        };

        window.updateCicilanPreview = function() {
            const count = document.getElementById('cicilanCount').value;
            const customCount = document.getElementById('customCount').value;
            const interval = document.getElementById('cicilanInterval').value;
            const startDate = document.getElementById('debtDueDate').value;
            const amount = document.getElementById('debtAmount').value;
            
            let finalCount = count === 'custom' ? (customCount || 1) : count;
            
            const intervalText = {
                'weekly': 'mingguan',
                'monthly': 'bulanan', 
                'quarterly': '3 bulanan'
            };
            
            let previewText = `${finalCount}x cicilan ${intervalText[interval]}`;
            
            if (startDate) {
                const start = new Date(startDate);
                previewText += ` mulai ${start.toLocaleDateString('id-ID', { 
                    day: 'numeric', 
                    month: 'short', 
                    year: 'numeric' 
                })}`;
            }
            
            if (amount) {
                const totalAmount = parseFloat(amount) * finalCount;
                const formattedAmount = new Intl.NumberFormat('id-ID', {
                    style: 'currency',
                    currency: 'IDR',
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                }).format(totalAmount);
                previewText += `<br><strong>Total: ${formattedAmount}</strong>`;
            }
            
            document.getElementById('cicilanPreview').innerHTML = previewText;
        };

        // Other global functions that might be called from HTML
        window.navigateTo = function(page) {
            // This will be defined later
        };

        window.toggleSidebar = function() {
            // This will be defined later
        };

        window.switchDebtView = function(view) {
            // This will be defined later
        };

        window.handleCicilanImport = function(event) {
            const file = event.target.files[0];
            if (file) {
                handleCicilanFile(file);
            }
        };

        window.openPaymentModal = function(debtId) {
            const debt = debts.find(d => d.id === debtId);
            
            // Set debt info
            document.getElementById('paymentDebtId').value = debtId;
            document.getElementById('paymentDebtInfo').textContent = `Utang ke: ${debt.to}`;
            document.getElementById('paymentDebtDetails').innerHTML = `
                <strong>Sisa utang: ${formatCurrency(debt.remainingAmount)}</strong><br>
                ${debt.description || 'Tanpa deskripsi'} ${debt.dueDate ? '• Jatuh tempo: ' + new Date(debt.dueDate).toLocaleDateString('id-ID') : ''}
            `;
            
            // Reset form and set partial payment as default
            document.getElementById('paymentForm').reset();
            document.getElementById('paymentDate').value = new Date().toISOString().split('T')[0];
            setPaymentType('partial');
            
            // Store debt data for calculations
            window.currentDebt = debt;
            
            document.getElementById('paymentModal').classList.add('active');
        };

        window.closePaymentModal = function() {
            document.getElementById('paymentModal').classList.remove('active');
            document.getElementById('paymentForm').reset();
            window.currentDebt = null;
        };

        // Set payment type (partial or full)
        window.setPaymentType = function(type) {
            const partialBtn = document.getElementById('partialPayBtn');
            const fullBtn = document.getElementById('fullPayBtn');
            const amountInput = document.getElementById('paymentAmount');
            const helper = document.getElementById('paymentHelper');
            const submitBtn = document.getElementById('submitPaymentText');
            
            document.getElementById('paymentType').value = type;
            
            if (type === 'partial') {
                // Partial payment style
                partialBtn.className = 'payment-option-btn active';
                fullBtn.className = 'payment-option-btn';
                
                amountInput.placeholder = 'Masukkan nominal';
                amountInput.value = '';
                amountInput.readOnly = false;
                helper.textContent = 'Masukkan nominal yang ingin dibayar';
                submitBtn.textContent = 'Bayar Sebagian';
                
            } else {
                // Full payment style
                partialBtn.className = 'payment-option-btn';
                fullBtn.className = 'payment-option-btn success';
                
                if (window.currentDebt) {
                    amountInput.value = window.currentDebt.remainingAmount;
                    amountInput.readOnly = true;
                    helper.innerHTML = `<strong>Bayar penuh sisa utang: ${formatCurrency(window.currentDebt.remainingAmount)}</strong>`;
                    submitBtn.textContent = 'Bayar Lunas';
                }
            }
            
            updatePaymentSummary();
        };
        
        // Array untuk nyimpan produk yang dipilih
let selectedProducts = [];
let isAddingProduct = false;

function addProductToList() {
    if (isAddingProduct) {
        // Kalau udah terbuka, tutup
        closeProductSelector();
        return;
    }
    
    // Buka product selector inline
    openProductSelector();
}

function openProductSelector() {
    isAddingProduct = true;
    
    const container = document.getElementById('selectedProductsList');
    container.innerHTML = `
        <div style="border: 2px dashed #3b82f6; border-radius: 8px; padding: 20px; background: rgba(59, 130, 246, 0.05);">
            <div style="display: grid; grid-template-columns: 2fr 1fr 1fr auto; gap: 16px; align-items: end;">
                <div>
                    <label style="display: block; color: #e2e8f0; margin-bottom: 8px; font-size: 14px;">Pilih Produk</label>
                    <select id="tempProductSelect" style="width: 100%; padding: 10px; background: #334155; border: 1px solid #475569; border-radius: 6px; color: #e2e8f0;">
                        <option value="">-- Pilih Produk --</option>
                        ${inventories.map(p => `<option value="${p.id}">${p.name} - ${p.sku}</option>`).join('')}
                    </select>
                </div>
                <div>
                    <label style="display: block; color: #e2e8f0; margin-bottom: 8px; font-size: 14px;">Qty</label>
                    <input type="number" id="tempQty" style="width: 100%; padding: 10px; background: #334155; border: 1px solid #475569; border-radius: 6px; color: #e2e8f0;" min="1" value="1">
                </div>
                <div>
                    <label style="display: block; color: #e2e8f0; margin-bottom: 8px; font-size: 14px;">Harga</label>
                    <input type="text" id="tempPrice" style="width: 100%; padding: 10px; background: #475569; border: 1px solid #64748b; border-radius: 6px; color: #94a3b8;" readonly placeholder="Rp 0">
                </div>
                <div style="display: flex; gap: 8px;">
                    <button onclick="confirmAddProduct()" style="padding: 10px 16px; background: #10b981; color: white; border: none; border-radius: 6px; cursor: pointer;">✓</button>
                    <button onclick="closeProductSelector()" style="padding: 10px 16px; background: #ef4444; color: white; border: none; border-radius: 6px; cursor: pointer;">✕</button>
                </div>
            </div>
        </div>
    `;
    
    // Update button text
    const btn = document.querySelector('button[onclick="addProductToList()"]');
    btn.innerHTML = '<span>✕</span> Batal';
    btn.style.background = '#ef4444';
    
    // Add event listener for product selection
    document.getElementById('tempProductSelect').addEventListener('change', updateTempPrice);
}

function updateTempPrice() {
    const productId = document.getElementById('tempProductSelect').value;
    const product = inventories.find(p => p.id === productId);
    
    if (product) {
        document.getElementById('tempPrice').value = formatCurrency(product.salePrice);
    } else {
        document.getElementById('tempPrice').value = '';
    }
}

function confirmAddProduct() {
    const productId = document.getElementById('tempProductSelect').value;
    const quantity = parseInt(document.getElementById('tempQty').value);
    
    if (!productId || !quantity) {
        alert('Pilih produk dan isi quantity!');
        return;
    }
    
    const product = inventories.find(p => p.id === productId);
    selectedProducts.push({
        id: product.id,
        name: product.name,
        sku: product.sku,
        qty: quantity,
        salePrice: product.salePrice,
        purchasePrice: product.purchasePrice,
        total: product.salePrice * quantity
    });
    
    closeProductSelector();
    renderSelectedProducts();
}

function closeProductSelector() {
    isAddingProduct = false;
    
    // Reset button
    const btn = document.querySelector('button[onclick="addProductToList()"]');
    btn.innerHTML = '<span>+</span> Tambah Produk';
    btn.style.background = '#3b82f6';
    
    renderSelectedProducts();
}

function renderSelectedProducts() {
    const container = document.getElementById('selectedProductsList');
    
    if (selectedProducts.length === 0) {
        container.innerHTML = '<p style="color: #94a3b8; text-align: center; margin: 0;">Belum ada produk dipilih</p>';
        return;
    }
    
    const html = selectedProducts.map((product, index) => `
        <div style="background: #1e293b; padding: 16px; border-radius: 8px; margin-bottom: 12px; display: flex; justify-content: space-between; align-items: center;">
            <div>
                <div style="color: #e2e8f0; font-weight: 600;">${product.sku} - ${product.name}</div>
                <div style="color: #94a3b8; font-size: 14px;">Qty: ${product.qty} x ${formatCurrency(product.salePrice)} = ${formatCurrency(product.total)}</div>
                <div style="color: #f59e0b; font-size: 12px;">HPP: ${formatCurrency(product.purchasePrice)} | Profit: ${formatCurrency((product.salePrice - product.purchasePrice) * product.qty)}</div>
            </div>
            <button onclick="removeProduct(${index})" style="background: #ef4444; color: white; border: none; padding: 8px 12px; border-radius: 4px; font-size: 12px;">Hapus</button>
        </div>
    `).join('');
    
    // Tambah total summary
    const grandTotal = selectedProducts.reduce((sum, p) => sum + p.total, 0);
    const totalProfit = selectedProducts.reduce((sum, p) => sum + ((p.salePrice - p.purchasePrice) * p.qty), 0);
    
    container.innerHTML = html + `
        <div style="border-top: 1px solid #475569; padding-top: 16px; margin-top: 16px;">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <div style="color: #94a3b8;">Total Transaksi:</div>
                <div style="color: #10b981; font-weight: 700; font-size: 20px;">${formatCurrency(grandTotal)}</div>
            </div>
            <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 8px;">
                <div style="color: #94a3b8;">Est. Profit:</div>
                <div style="color: #f59e0b; font-weight: 600;">${formatCurrency(totalProfit)}</div>
            </div>
        </div>
    `;
}

function removeProduct(index) {
    selectedProducts.splice(index, 1);
    renderSelectedProducts();
}
        
        // Populate product dropdown from inventory
function populateProductDropdown() {
    const select = document.getElementById('productSelect');
    if (!select) return;
    
    select.innerHTML = '<option value="">-- Pilih Produk --</option>';
    inventories.forEach(product => {
        select.innerHTML += `<option value="${product.id}">${product.name} - ${product.sku}</option>`;
    });
}

// Update product info when selected
function updateProductInfo() {
    const select = document.getElementById('productSelect');
    const selectedId = select.value;
    const product = inventories.find(p => p.id === selectedId);
    
    if (product) {
        document.getElementById('productPrice').value = formatCurrency(product.salePrice);
        calculateTotal();
    } else {
        document.getElementById('productPrice').value = '';
        document.getElementById('totalPrice').textContent = 'Rp 0';
    }
}

// Calculate total
function calculateTotal() {
    const select = document.getElementById('productSelect');
    const qty = parseInt(document.getElementById('productQty').value) || 0;
    const selectedId = select.value;
    const product = inventories.find(p => p.id === selectedId);
    
    if (product && qty > 0) {
        const total = product.salePrice * qty;
        document.getElementById('totalPrice').textContent = formatCurrency(total);
    } else {
        document.getElementById('totalPrice').textContent = 'Rp 0';
    }
}

// Call populate when navigating to sales
window.navigateTo = function(page) {
    // ... existing navigation code ...
    if (page === 'sales') {
        populateProductDropdown();
    }
    // ... rest of navigation code ...
};
        
        


// Buka modal
window.openProductModal = function() {
    document.getElementById('productModal').style.display = 'flex';
};

// Tutup modal
window.closeProductModal = function() {
    document.getElementById('productModal').style.display = 'none';
    document.getElementById('productModalForm').reset();
};

// Handle form submit
window.handleProductSubmit = function(e) {
    e.preventDefault();
    
    const data = {
        id: Date.now().toString(),
        sku: document.getElementById('modalSKU').value,
        name: document.getElementById('modalNama').value,
        unit: document.getElementById('modalUnit').value,
        stock: parseInt(document.getElementById('modalStok').value) || 0,
        purchasePrice: parseFloat(document.getElementById('modalHargaModal').value) || 0,
        salePrice: parseFloat(document.getElementById('modalHargaJual').value) || 0,
        minStock: parseInt(document.getElementById('modalMinStock').value) || 5
    };
    
    // Tambah ke inventories array
    inventories.unshift(data);
    saveInventory();
    
    // Record stock movement
    if (data.stock > 0) {
        recordStockMovement(data.name, 'increase', data.stock);
    }
    
    // Update UI
    updateInventoryBadge();
    renderInventory();
    
    // Tutup modal dan show success
    closeProductModal();
    showAlert('Produk berhasil ditambahkan!', 'success');
};

// Tutup modal kalau klik di luar
document.addEventListener('click', function(e) {
    const modal = document.getElementById('productModal');
    if (e.target === modal) {
        closeProductModal();
    }
});

        // Update payment summary real-time
        function updatePaymentSummary() {
            if (!window.currentDebt) return;
            
            const amount = parseFloat(document.getElementById('paymentAmount').value) || 0;
            const remaining = Math.max(0, window.currentDebt.remainingAmount - amount);
            const isFullyPaid = remaining === 0;
            
            // Update summary display
            document.getElementById('summaryAmount').textContent = formatCurrency(amount);
            document.getElementById('summaryRemaining').textContent = formatCurrency(remaining);
            
            const statusElement = document.getElementById('summaryStatus');
            if (isFullyPaid) {
                statusElement.textContent = 'LUNAS';
                statusElement.style.color = '#10b981';
            } else {
                statusElement.textContent = 'Masih Berhutang';
                statusElement.style.color = '#ef4444';
            }
            
            // Validate amount
            const submitBtn = document.querySelector('#paymentForm button[type="submit"]');
            if (amount > window.currentDebt.remainingAmount) {
                document.getElementById('summaryRemaining').innerHTML = `
                    <span style="color: #ef4444;">⚠️ Melebihi sisa utang!</span>
                `;
                submitBtn.disabled = true;
                submitBtn.style.opacity = '0.5';
            } else if (amount <= 0) {
                submitBtn.disabled = true;
                submitBtn.style.opacity = '0.5';
            } else {
                submitBtn.disabled = false;
                submitBtn.style.opacity = '1';
            }
        }

        window.deleteDebt = function(debtId) {
            if (confirm('Hapus utang ini?')) {
                debts = debts.filter(d => d.id !== debtId);
                updateAllData();
                renderDebts();
                showAlert('Utang berhasil dihapus!', 'success');
            }
        };

        window.deleteCategory = function(categoryName) {
            if (confirm(`Hapus kategori "${categoryName}"?`)) {
                categories = categories.filter(c => c !== categoryName);
                updateCategoryOptions();
                renderCategories();
                showAlert('Kategori berhasil dihapus!', 'success');
            }
        };

        window.toggleDebtGroup = function(creditor) {
            const groupId = creditor.replace(/[^a-zA-Z0-9]/g, '');
            const groupItems = document.getElementById(`group-${groupId}`);
            
            if (groupItems.style.display === 'none') {
                groupItems.style.display = 'block';
            } else {
                groupItems.style.display = 'none';
            }
        };

        // Data storage
        let transactions = [];
        let debts = [];
        let categories = [
            'Bubble Wrap', 'Lakban Bening', 'Lakban Merah', 'Thermal', 'Plastik Polymailer',
            'Kardus', 'Kertas Label', 'Tinta Printer', 'Marketing & Promosi', 'Hosting & Domain',
            'Fee Marketplace', 'Transport', 'Listrik & Internet', 'Lainnya'
        ];

        // Data arrays for penjualan (sales) and inventory
        let sales = [];
        let inventories = [];
        // Array to store stock movement logs for inventory
        let stockMovements = [];

        // ------------------------------------------------------------------------
        // Inventory tab functions and utilities
        //
        // These functions handle loading, saving, and rendering of stock movement
        // logs, report summaries, analytics charts, and tab switching for the
        // inventory module. They are defined early so they can be referenced in
        // other parts of the app.

        /**
         * Load stock movement entries from localStorage into the stockMovements array.
         * If no data exists or parsing fails, the array will be reset to empty.
         */
        function loadStockMovements() {
            try {
                stockMovements = JSON.parse(localStorage.getItem('stockMovements')) || [];
            } catch (err) {
                stockMovements = [];
            }
        }

        /**
         * Persist the current stockMovements array to localStorage.
         */
        function saveStockMovements() {
            localStorage.setItem('stockMovements', JSON.stringify(stockMovements));
        }

        /**
         * Record a single stock movement.
         * @param {string} productName - The name of the product affected.
         * @param {string} type - Either 'increase' or 'decrease'.
         * @param {number} quantity - How much stock was added or removed.
         */
        function recordStockMovement(productName, type, quantity, customReason = null) {
    let notes = customReason;
    let displayType = type; // default type
    
    // Auto detect kalau ga ada custom reason
    if (!notes) {
        if (type === 'increase') {
            // Cek apakah ini produk baru (belum pernah ada movement)
            const existingMovements = stockMovements.filter(m => m.product === productName);
            if (existingMovements.length === 0) {
                notes = 'Stok Awal';
                displayType = 'INITIAL'; // Type khusus untuk stok awal
            } else {
                notes = 'Stock In';
                displayType = 'IN';
            }
        } else {
            notes = 'Stock Out';
            displayType = 'OUT';
        }
    }
    
    const entry = {
        id: Date.now().toString() + Math.random().toString(16).slice(2),
        product: productName,
        type: type, // untuk logic
        displayType: displayType, // untuk tampilan
        quantity: quantity,
        date: new Date().toISOString(),
        notes: notes
    };
    stockMovements.unshift(entry);
    saveStockMovements();
}

        /**
         * Render the stock movement list into the movement tab. If there are no
         * entries, show a friendly message. Each entry displays the product name,
         * change type and quantity, and the timestamp in Indonesian locale.
         */
         
         function renderStockMovementChart() {
    destroyChart('stockMovementChart');
    
    if (stockMovements.length === 0) {
        const ctx = document.getElementById('stockMovementChart').getContext('2d');
        ctx.fillStyle = '#64748b';
        ctx.font = '16px Inter';
        ctx.textAlign = 'center';
        ctx.fillText('Belum ada movement', ctx.canvas.width / 2, ctx.canvas.height / 2);
        return;
    }

    // Get last 30 days data
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
    
    const recentMovements = stockMovements.filter(m => 
        new Date(m.date) >= thirtyDaysAgo
    ).sort((a, b) => new Date(a.date) - new Date(b.date));

    const dates = [...new Set(recentMovements.map(m => 
        new Date(m.date).toLocaleDateString('id-ID', { month: 'short', day: 'numeric' })
    ))];

    const inData = dates.map(date => {
        return recentMovements.filter(m => {
            const moveDate = new Date(m.date).toLocaleDateString('id-ID', { month: 'short', day: 'numeric' });
            return moveDate === date && m.type === 'increase';
        }).reduce((sum, m) => sum + m.quantity, 0);
    });

    const outData = dates.map(date => {
        return recentMovements.filter(m => {
            const moveDate = new Date(m.date).toLocaleDateString('id-ID', { month: 'short', day: 'numeric' });
            return moveDate === date && m.type === 'decrease';
        }).reduce((sum, m) => sum + m.quantity, 0);
    });

    const data = {
        labels: dates,
        datasets: [
            {
                label: 'Barang Masuk',
                data: inData,
                borderColor: '#10b981',
                backgroundColor: 'rgba(16, 185, 129, 0.1)',
                fill: true,
                tension: 0.4
            },
            {
                label: 'Barang Keluar', 
                data: outData,
                borderColor: '#ef4444',
                backgroundColor: 'rgba(239, 68, 68, 0.1)',
                fill: true,
                tension: 0.4
            }
        ]
    };

    const ctx = document.getElementById('stockMovementChart').getContext('2d');
    charts['stockMovementChart'] = new Chart(ctx, {
        type: 'line',
        data: data,
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: { color: '#94a3b8', font: { size: 12 } },
                    grid: { color: '#374151', drawBorder: false }
                },
                x: {
                    ticks: { color: '#94a3b8', font: { size: 12 } },
                    grid: { color: '#374151', drawBorder: false }
                }
            },
            plugins: {
                legend: {
                    labels: { color: '#e2e8f0', font: { size: 12 } }
                },
                tooltip: {
                    backgroundColor: '#1e293b',
                    titleColor: '#e2e8f0',
                    bodyColor: '#e2e8f0',
                    borderColor: '#374151',
                    borderWidth: 1
                }
            }
        }
    });
}
         
         function renderStockComparisonChart() {
    destroyChart('stockComparisonChart');
    
    if (inventories.length === 0) {
        const ctx = document.getElementById('stockComparisonChart').getContext('2d');
        ctx.fillStyle = '#64748b';
        ctx.font = '16px Inter';
        ctx.textAlign = 'center';
        ctx.fillText('Belum ada data produk', ctx.canvas.width / 2, ctx.canvas.height / 2);
        return;
    }

    const data = {
        labels: inventories.map(item => item.name),
        datasets: [
            {
                label: 'Stok Sekarang',
                data: inventories.map(item => item.stock || 0),
                backgroundColor: '#3b82f6',
                borderColor: '#3b82f6',
                borderWidth: 1
            },
            {
                label: 'Batas Aman',
                data: inventories.map(item => item.minStock || 5),
                backgroundColor: '#ef4444',
                borderColor: '#ef4444',
                borderWidth: 1
            }
        ]
    };

    const ctx = document.getElementById('stockComparisonChart').getContext('2d');
    charts['stockComparisonChart'] = new Chart(ctx, {
        type: 'bar',
        data: data,
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: { color: '#94a3b8', font: { size: 12 } },
                    grid: { color: '#374151', drawBorder: false }
                },
                x: {
                    ticks: { color: '#94a3b8', font: { size: 12 } },
                    grid: { color: '#374151', drawBorder: false }
                }
            },
            plugins: {
                legend: {
                    labels: { color: '#e2e8f0', font: { size: 12 } }
                },
                tooltip: {
                    backgroundColor: '#1e293b',
                    titleColor: '#e2e8f0',
                    bodyColor: '#e2e8f0',
                    borderColor: '#374151',
                    borderWidth: 1
                }
            }
        }
    });
}
         
function renderStockDistributionChart() {
    destroyChart('stockDistributionChart');
    
    if (inventories.length === 0) {
        const ctx = document.getElementById('stockDistributionChart').getContext('2d');
        ctx.fillStyle = '#64748b';
        ctx.font = '16px Inter';
        ctx.textAlign = 'center';
        ctx.fillText('Belum ada data stock', ctx.canvas.width / 2, ctx.canvas.height / 2);
        return;
    }
    
    // Filter produk yang ada stocknya
    const stockData = inventories.filter(item => (item.stock || 0) > 0);
    
    if (stockData.length === 0) {
        const ctx = document.getElementById('stockDistributionChart').getContext('2d');
        ctx.fillStyle = '#64748b';
        ctx.font = '16px Inter';
        ctx.textAlign = 'center';
        ctx.fillText('Semua produk stock 0', ctx.canvas.width / 2, ctx.canvas.height / 2);
        return;
    }

    const data = {
        labels: stockData.map(item => item.name),
        datasets: [{
            data: stockData.map(item => item.stock || 0),
            backgroundColor: chartColors.slice(0, stockData.length),
            borderColor: '#1e293b',
            borderWidth: 2,
            hoverBorderWidth: 3
        }]
    };

    const ctx = document.getElementById('stockDistributionChart').getContext('2d');
    charts['stockDistributionChart'] = new Chart(ctx, {
        type: 'doughnut',
        data: data,
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom',
                    labels: {
                        color: '#e2e8f0',
                        font: { size: 12 },
                        usePointStyle: true,
                        padding: 20
                    }
                },
                tooltip: {
                    backgroundColor: '#1e293b',
                    titleColor: '#e2e8f0',
                    bodyColor: '#e2e8f0',
                    borderColor: '#374151',
                    borderWidth: 1,
                    callbacks: {
                        label: function(context) {
                            const total = context.dataset.data.reduce((a, b) => a + b, 0);
                            const percentage = ((context.raw / total) * 100).toFixed(1);
                            return `${context.label}: ${context.raw} unit (${percentage}%)`;
                        }
                    }
                }
            }
        }
    });
}      
         
       function renderStockMovements() {
    const list = document.getElementById('stockMovementList');
    if (!list) return;
    
    if (stockMovements.length === 0) {
        list.innerHTML = '<tr><td colspan="7" style="padding: 20px; text-align: center; color: #94a3b8;">Belum ada pergerakan stok.</td></tr>';
        return;
    }
    
    list.innerHTML = '';
    stockMovements.forEach(entry => {
        const dateString = new Date(entry.date).toLocaleDateString('id-ID', {
            day: '2-digit',
            month: '2-digit', 
            year: 'numeric'
        });
        
        // Cari SKU dari inventory berdasarkan nama produk
        const product = inventories.find(item => item.name === entry.product);
        const sku = product ? product.sku : '-';
        
        const typeLabel = entry.displayType === 'INITIAL' ? 'STOK AWAL' : 
                 entry.displayType === 'IN' ? 'IN' : 'OUT';
const typeColor = entry.displayType === 'OUT' ? '#ef4444' : '#10b981';
        
        const row = document.createElement('tr');
        row.style.borderBottom = '1px solid #334155';
        row.innerHTML = `
            <td style="padding: 16px 20px; color: #e2e8f0;">${dateString}</td>
            <td style="padding: 16px 20px; color: #10b981; font-weight: bold;">${sku}</td>
            <td style="padding: 16px 20px; color: #e2e8f0;">${entry.product}</td>
            <td style="padding: 16px 20px; color: ${typeColor}; font-weight: bold;">${typeLabel}</td>
            <td style="padding: 16px 20px; color: #3b82f6;">${entry.quantity}</td>
            <td style="padding: 16px 20px; color: #94a3b8;">${entry.notes}</td>
            <td style="padding: 16px 20px;">
                <button onclick="deleteStockMovement('${entry.id}')" style="background: #ef4444; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 12px;">Hapus</button>
            </td>
        `;
        list.appendChild(row);
    });
}

        /**
         * Render a simple inventory report summarizing the number of products,
         * total stock quantity, total purchase value, and potential revenue.
         * The report uses the report-grid/report-card classes defined in the CSS.
         */
       function renderInventoryReport() {
    const container = document.getElementById('inventoryReportContent');
    if (!container) return;
    
    if (inventories.length === 0) {
        container.innerHTML = '<tr><td colspan="7" style="padding: 20px; text-align: center; color: #94a3b8;">Belum ada data produk.</td></tr>';
        return;
    }
    
    container.innerHTML = '';
    
    inventories.forEach(item => {
        // Calculate stock movements untuk item ini
        const movements = stockMovements.filter(m => m.product === item.name);
        const barangMasuk = movements.filter(m => m.type === 'increase' && m.displayType !== 'INITIAL').reduce((sum, m) => sum + m.quantity, 0);
        const barangKeluar = movements.filter(m => m.type === 'decrease').reduce((sum, m) => sum + m.quantity, 0);
        
        // Rumus: Stok Akhir = Stok Awal + Barang Masuk - Barang Keluar  
        const stokAwal = item.stock || 0;
        const stokAkhir = stokAwal + barangMasuk - barangKeluar;
        
        // Color coding untuk stok akhir
        let stokColor = '#ef4444'; // merah (low/habis)
        if (stokAkhir > 20) stokColor = '#10b981'; // hijau (high)
        else if (stokAkhir > 10) stokColor = '#f59e0b'; // kuning (medium)
        
        const row = document.createElement('tr');
        row.style.borderBottom = '1px solid #334155';
        row.innerHTML = `
            <td style="padding: 16px 20px; color: #10b981; font-weight: bold;">${item.sku || '-'}</td>
            <td style="padding: 16px 20px; color: #e2e8f0;">${item.name}</td>
            <td style="padding: 16px 20px; color: #94a3b8;">pcs</td>
            <td style="padding: 16px 20px; color: #3b82f6; text-align: center;">${stokAwal}</td>
            <td style="padding: 16px 20px; color: #10b981; text-align: center;">${barangMasuk}</td>
            <td style="padding: 16px 20px; color: #ef4444; text-align: center;">${barangKeluar}</td>
            <td style="padding: 16px 20px; color: ${stokColor}; font-weight: bold; text-align: center; background: rgba(${stokColor === '#10b981' ? '16,185,129' : stokColor === '#f59e0b' ? '245,158,11' : '239,68,68'}, 0.1);">${stokAkhir}</td>
        `;
        container.appendChild(row);
    });
}

        /**
         * Render an inventory analytics chart showing the stock distribution
         * across products. Utilizes Chart.js if available. If there is no data,
         * display a friendly message instead.
         */
        function renderInventoryAnalytics() {
            const container = document.getElementById('inventoryAnalyticsContent');
            if (!container) return;
            if (inventories.length === 0) {
                container.innerHTML = '<p style="color:#94a3b8; text-align:center; padding:20px;">Belum ada data produk.</p>';
                return;
            }
            const labels = inventories.map(item => item.name);
            const data = inventories.map(item => item.stock || 0);
            // Insert canvas for chart
            container.innerHTML = '<canvas id="inventoryStockChart" height="300"></canvas>';
            // Destroy existing chart if exists
            if (typeof destroyChart === 'function') {
                destroyChart('inventoryStockChart');
            }
            const ctx = document.getElementById('inventoryStockChart').getContext('2d');
            charts['inventoryStockChart'] = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Stok Produk',
                            data: data,
                            backgroundColor: '#3b82f6',
                            borderColor: '#3b82f6',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                color: '#94a3b8',
                                font: { size: 12 }
                            },
                            grid: {
                                color: '#374151',
                                drawBorder: false
                            }
                        },
                        x: {
                            ticks: {
                                color: '#94a3b8',
                                font: { size: 12 }
                            },
                            grid: {
                                color: '#374151',
                                drawBorder: false
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            backgroundColor: '#1e293b',
                            titleColor: '#e2e8f0',
                            bodyColor: '#e2e8f0',
                            borderColor: '#374151',
                            borderWidth: 1
                        }
                    }
                }
            });
        }
        
function updateInventoryAnalytics() {
    // Update total produk
    const totalProducts = inventories.length;
    document.getElementById('totalProductCount').textContent = totalProducts;
    
    // Update low stock
    const lowStockItems = inventories.filter(item => (item.stock || 0) <= (item.minStock || 5));
    document.getElementById('lowStockCount').textContent = lowStockItems.length;
    
    // Update total value (HPP * stock)
    const totalValue = inventories.reduce((sum, item) => {
        return sum + ((item.purchasePrice || 0) * (item.stock || 0));
    }, 0);
    document.getElementById('totalInventoryValue').textContent = formatCurrency(totalValue);
    
    // Update monthly movement
    const currentMonth = new Date().getMonth();
    const currentYear = new Date().getFullYear();
    const monthlyMovements = stockMovements.filter(movement => {
        const moveDate = new Date(movement.date);
        return moveDate.getMonth() === currentMonth && moveDate.getFullYear() === currentYear;
    }).length;
    document.getElementById('monthlyMovement').textContent = monthlyMovements;
    
    // Update Fast Moving Items dengan desain card
const fastMoving = stockMovements
    .filter(m => m.type === 'decrease')
    .reduce((acc, m) => {
        acc[m.product] = (acc[m.product] || 0) + m.quantity;
        return acc;
    }, {});
const topProducts = Object.entries(fastMoving)
    .sort((a, b) => b[1] - a[1])
    .slice(0, 5);
if (topProducts.length > 0) {
    const fastMovingCards = topProducts.map(([productName, qty], index) => {
        // Cari data produk untuk SKU dan harga
        const product = inventories.find(item => item.name === productName);
        const sku = product ? product.sku : 'N/A';
        const revenue = product ? (product.salePrice * qty) : 0;
        
return `
    <div style="background: #1e293b; padding: 20px; border-radius: 12px; margin-bottom: 16px; border: 1px solid #334155;">
        <div style="display: flex; align-items: center; gap: 16px; margin-bottom: 16px;">
            <div style="background: ${index === 0 ? '#f59e0b' : '#64748b'}; color: #1e293b; font-weight: bold; padding: 12px 16px; border-radius: 8px; font-size: 16px;">
                #${index + 1}
            </div>
            <div>
                <div style="color: #e2e8f0; font-weight: 700; font-size: 20px; margin-bottom: 4px;">${sku}</div>
                <div style="color: #94a3b8; font-size: 14px;">${productName}</div>
            </div>
        </div>
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div style="text-align: center;">
                <div style="color: #94a3b8; font-size: 12px; text-transform: uppercase; margin-bottom: 4px;">QUANTITY</div>
                <div style="color: #60a5fa; font-weight: 700; font-size: 18px;">${qty} terjual</div>
            </div>
            <div style="text-align: center;">
                <div style="color: #94a3b8; font-size: 12px; text-transform: uppercase; margin-bottom: 4px;">REVENUE</div>
                <div style="color: #10b981; font-weight: 700; font-size: 18px;">${formatCurrency(revenue)}</div>
            </div>
        </div>
    </div>
`;
    }).join('');
    document.getElementById('fastMovingItems').innerHTML = fastMovingCards;
} else {
    document.getElementById('fastMovingItems').innerHTML = '<div style="text-align: center; color: #94a3b8; padding: 20px;">Belum ada data penjualan</div>';
}

    // Update Low Stock Alert
    const lowStockProducts = inventories.filter(item => 
        (item.stock || 0) <= (item.minStock || 5)
    );

    if (lowStockProducts.length > 0) {
        const lowStockText = lowStockProducts.map(item => 
            `• ${item.name}: ${item.stock || 0} tersisa`).join('<br>');
        document.getElementById('lowStockAlert').innerHTML = lowStockText;
    } else {
        document.getElementById('lowStockAlert').innerHTML = 'Semua produk stok aman ✅';
    }
    
    // Render charts
    renderStockDistributionChart();
    renderStockComparisonChart();
    renderStockMovementChart();
}

        /**
         * Switch the active inventory tab. This function hides all tab content,
         * activates the selected tab button, and invokes the appropriate render
         * function when switching to movement, report, or analytics tabs.
         * @param {string} tab - The tab identifier ('master', 'movement', 'report', 'analytics').
         */
       window.switchInventoryTab = function(tab) {
    // Remove active state from all tabs
    document.querySelectorAll('.modern-tab').forEach(t => t.classList.remove('active'));
    // Hide all tab contents
    document.querySelectorAll('[id^="inventoryTabContent-"]').forEach(el => {
        el.style.display = 'none';
    });
    // Activate selected tab and show content
    const selectedTab = document.getElementById('inventoryTab-' + tab);
    if (selectedTab) selectedTab.classList.add('active');
    const content = document.getElementById('inventoryTabContent-' + tab);
    if (content) content.style.display = '';
    // Render additional views as needed
    if (tab === 'movement') renderStockMovements();
    if (tab === 'report') renderInventoryReport();
    if (tab === 'analytics') {
    renderInventoryAnalytics();
    updateInventoryAnalytics();
}
    
};

        let currentPage = 'dashboard';
        let lastMonthData = { income: 0, expense: 0 };
        let charts = {}; // Store chart instances
        let currentDebtView = 'list'; // 'list' or 'calendar'

        // Chart color palette
        const chartColors = [
            '#3b82f6', '#ef4444', '#10b981', '#f59e0b', '#8b5cf6',
            '#06b6d4', '#84cc16', '#ec4899', '#6366f1', '#14b8a6',
            '#f97316', '#eab308', '#22c55e', '#a855f7'
        ];



        // Initialize app
        function init() {
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('transactionDate').value = today;
            document.getElementById('paymentDate').value = today;
            
            updateCategoryOptions();
            updateAllData();
            renderRecentTransactions();
            setupDragAndDrop();
            setupRecurringEventListeners();

            // Load sales, inventory, and stock movement data from storage
            if (typeof loadSales === 'function') loadSales();
            if (typeof loadInventory === 'function') loadInventory();
            if (typeof loadStockMovements === 'function') loadStockMovements();

            // Set default date for sales form and default platform
            const saleDateInput = document.getElementById('saleDate');
            if (saleDateInput) {
                saleDateInput.value = today;
            }
            const salePlatformInput = document.getElementById('salePlatform');
            if (salePlatformInput) {
                salePlatformInput.value = 'tiktokshop';
            }

            // Update badges and render sales/inventory lists
            if (typeof updateSalesBadge === 'function') updateSalesBadge();
            if (typeof updateInventoryBadge === 'function') updateInventoryBadge();
            if (typeof renderSales === 'function') renderSales();
            if (typeof renderInventory === 'function') renderInventory();
            // Pre-render stock movement list and report/analytics so that tabs have content on first view
            if (typeof renderStockMovements === 'function') renderStockMovements();
            if (typeof renderInventoryReport === 'function') renderInventoryReport();
            if (typeof renderInventoryAnalytics === 'function') renderInventoryAnalytics();
        }

        // Setup event listeners for recurring form
        function setupRecurringEventListeners() {
            // Wait for DOM elements to be ready
            setTimeout(() => {
                const cicilanCount = document.getElementById('cicilanCount');
                const cicilanInterval = document.getElementById('cicilanInterval');
                const debtDueDate = document.getElementById('debtDueDate');
                const debtAmount = document.getElementById('debtAmount');
                const customCount = document.getElementById('customCount');

                if (cicilanCount) {
                    cicilanCount.addEventListener('change', function() {
                        const customGroup = document.getElementById('customCountGroup');
                        if (this.value === 'custom') {
                            customGroup.style.display = 'block';
                        } else {
                            customGroup.style.display = 'none';
                        }
                        window.updateCicilanPreview();
                    });
                }

                if (cicilanInterval) cicilanInterval.addEventListener('change', window.updateCicilanPreview);
                if (debtDueDate) debtDueDate.addEventListener('change', window.updateCicilanPreview);
                if (debtAmount) debtAmount.addEventListener('input', window.updateCicilanPreview);
                if (customCount) customCount.addEventListener('input', window.updateCicilanPreview);
            }, 100);
        }

        // Setup drag and drop for file import
        function setupDragAndDrop() {
            const importSection = document.getElementById('importSection');
            
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                importSection.addEventListener(eventName, preventDefaults, false);
            });

            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }

            ['dragenter', 'dragover'].forEach(eventName => {
                importSection.addEventListener(eventName, highlight, false);
            });

            ['dragleave', 'drop'].forEach(eventName => {
                importSection.addEventListener(eventName, unhighlight, false);
            });

            function highlight() {
                importSection.classList.add('dragover');
            }

            function unhighlight() {
                importSection.classList.remove('dragover');
            }

            importSection.addEventListener('drop', handleDrop, false);

            function handleDrop(e) {
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    handleCicilanFile(files[0]);
                }
            }
        }

        // Process cicilan file
        async function handleCicilanFile(file) {
            if (!file.name.endsWith('.csv')) {
                showAlert('Please upload a CSV file!', 'error');
                return;
            }

            try {
                const text = await file.text();
                
                // Parse CSV using simple parsing
                const lines = text.split('\n').filter(line => line.trim());
                const headers = lines[0].split(',').map(h => h.trim().replace(/"/g, ''));
                
                if (!headers.includes('Tanggal Jatuh Tempo') || !headers.includes('Nominal Cicilan') || !headers.includes('Keterangan')) {
                    showAlert('Format CSV salah! Pastikan ada kolom: Tanggal Jatuh Tempo, Nominal Cicilan, Keterangan', 'error');
                    return;
                }

                const cicilanData = [];
                
                for (let i = 1; i < lines.length; i++) {
                    const values = lines[i].split(',').map(v => v.trim().replace(/"/g, ''));
                    
                    if (values.length >= 3) {
                        const tanggal = values[0];
                        let nominal = values[1];
                        const keterangan = values[2];
                        
                        // Convert nominal to number
                        if (typeof nominal === 'string') {
                            nominal = parseFloat(nominal.replace(/[^\d]/g, ''));
                        }
                        
                        // Convert date from DD-MM-YYYY to YYYY-MM-DD
                        const dateParts = tanggal.split('-');
                        if (dateParts.length === 3) {
                            const dueDate = `${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`;
                            
                            cicilanData.push({
                                dueDate,
                                amount: nominal,
                                description: keterangan
                            });
                        }
                    }
                }

                if (cicilanData.length === 0) {
                    showAlert('Tidak ada data cicilan yang valid ditemukan!', 'error');
                    return;
                }

                // Group by description (keterangan)
                const groupedCicilan = {};
                cicilanData.forEach(cicilan => {
                    if (!groupedCicilan[cicilan.description]) {
                        groupedCicilan[cicilan.description] = [];
                    }
                    groupedCicilan[cicilan.description].push(cicilan);
                });

                // Create debt entries for each group
                Object.entries(groupedCicilan).forEach(([keterangan, cicilans]) => {
                    cicilans.forEach(cicilan => {
                        const debt = {
                            id: Date.now() + Math.random(),
                            amount: cicilan.amount,
                            remainingAmount: cicilan.amount,
                            to: keterangan,
                            dueDate: cicilan.dueDate,
                            description: `Cicilan ${keterangan}`,
                            status: 'unpaid',
                            payments: [],
                            createdAt: new Date(),
                            type: 'cicilan' // Mark as imported cicilan
                        };
                        
                        debts.push(debt);
                    });
                });

                // Reset file input
                document.getElementById('cicilanFileInput').value = '';

                updateAllData();
                renderDebts();
                showAlert(`Berhasil import ${cicilanData.length} cicilan!`, 'success');
                
            } catch (error) {
                console.error('Error parsing CSV:', error);
                showAlert('Error parsing CSV file!', 'error');
            }
        }

        // Switch debt view
        window.switchDebtView = function(view) {
            currentDebtView = view;
            
            // Update button states
            document.getElementById('listViewBtn').classList.toggle('active', view === 'list');
            document.getElementById('calendarViewBtn').classList.toggle('active', view === 'calendar');
            
            // Show/hide views
            document.getElementById('debtListView').style.display = view === 'list' ? 'block' : 'none';
            document.getElementById('debtCalendarView').style.display = view === 'calendar' ? 'block' : 'none';
            
            if (view === 'calendar') {
                renderDebtCalendar();
            } else {
                renderDebts();
            }
        };

        // Toggle recurring options
        function toggleRecurringOptions() {
            const checkbox = document.getElementById('isRecurring');
            const options = document.getElementById('recurringOptions');
            const submitButton = document.getElementById('submitButtonText');
            
            if (checkbox.checked) {
                options.style.display = 'block';
                submitButton.textContent = 'Buat Cicilan';
                updateCicilanPreview();
            } else {
                options.style.display = 'none';
                submitButton.textContent = 'Tambah Utang';
            }
        }

        // Update cicilan preview
        function updateCicilanPreview() {
            const count = document.getElementById('cicilanCount').value;
            const customCount = document.getElementById('customCount').value;
            const interval = document.getElementById('cicilanInterval').value;
            const startDate = document.getElementById('debtDueDate').value;
            const amount = document.getElementById('debtAmount').value;
            
            let finalCount = count === 'custom' ? (customCount || 1) : count;
            
            const intervalText = {
                'weekly': 'mingguan',
                'monthly': 'bulanan', 
                'quarterly': '3 bulanan'
            };
            
            let previewText = `${finalCount}x cicilan ${intervalText[interval]}`;
            
            if (startDate) {
                const start = new Date(startDate);
                previewText += ` mulai ${start.toLocaleDateString('id-ID', { 
                    day: 'numeric', 
                    month: 'short', 
                    year: 'numeric' 
                })}`;
            }
            
            if (amount) {
                const totalAmount = parseFloat(amount) * finalCount;
                previewText += `<br><strong>Total: ${formatCurrency(totalAmount)}</strong>`;
            }
            
            document.getElementById('cicilanPreview').innerHTML = previewText;
        }



        // Toggle transaction form
        function toggleTransactionForm() {
            const formCard = document.getElementById('transactionFormCard');
            formCard.classList.toggle('collapsed');
        }

        // Navigation
        window.navigateTo = function(page) {
            // Update active menu item
            document.querySelectorAll('.menu-item').forEach(item => item.classList.remove('active'));
            event.target.classList.add('active');
            
            // Update page content
            document.querySelectorAll('.page-content').forEach(content => content.classList.remove('active'));
            document.getElementById(page).classList.add('active');
            
            // Update page title
            const pageTitles = {
                'dashboard': 'Dashboard',
                'transactions': 'Transaksi',
                'sales': 'Penjualan',
                'inventory': 'Inventory',
                'debt': 'Utang',
                'analytics': 'Analytics',
                'categories': 'Kategori'
            };
            
            document.getElementById('currentPageTitle').textContent = pageTitles[page];
            currentPage = page;
            
            // Render specific page content
            if (page === 'transactions') renderTransactions();
            if (page === 'sales') {
                renderSales();
                updateSalesBadge();
                populateProductDropdown();
            }
            if (page === 'inventory') {
                renderInventory();
                updateInventoryBadge();
                // Reset to master tab when navigating to inventory page
                if (typeof switchInventoryTab === 'function') {
                    switchInventoryTab('master');
                }
            }
            if (page === 'debt') {
                updateDebtStats(); // Ensure debt stats are up to date
                if (currentDebtView === 'calendar') {
                    renderDebtCalendar();
                } else {
                    renderDebts();
                }
            }
            if (page === 'analytics') updateAnalytics();
            if (page === 'categories') renderCategories();
        };

        // Sidebar toggle
        window.toggleSidebar = function() {
            const sidebar = document.getElementById('sidebar');
            if (window.innerWidth <= 768) {
                sidebar.classList.toggle('mobile-open');
            } else {
                sidebar.classList.toggle('collapsed');
            }
        };

        // Show alerts
        function showAlert(message, type) {
            const alertContainer = document.getElementById('alertContainer');
            alertContainer.innerHTML = `
                <div class="alert alert-${type}">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                        ${type === 'success' ? 
                            '<path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>' :
                            '<path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>'
                        }
                    </svg>
                    ${message}
                </div>
            `;
            
            setTimeout(() => {
                alertContainer.innerHTML = '';
            }, 4000);
        }

        // Format currency
        function formatCurrency(amount) {
            return new Intl.NumberFormat('id-ID', {
                style: 'currency',
                currency: 'IDR',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
            }).format(amount);
        }

        // Toggle category field
        function toggleCategoryField() {
            const type = document.getElementById('transactionType').value;
            const categoryGroup = document.getElementById('categoryGroup');
            categoryGroup.style.display = type === 'expense' ? 'block' : 'none';
        }

        // Update category options
        function updateCategoryOptions() {
            const categorySelect = document.getElementById('transactionCategory');
            const filterCategory = document.getElementById('filterCategory');
            
            categorySelect.innerHTML = '<option value="">Pilih kategori...</option>';
            if (filterCategory) {
                filterCategory.innerHTML = '<option value="">Semua Kategori</option>';
            }
            
            categories.forEach(category => {
                categorySelect.innerHTML += `<option value="${category}">${category}</option>`;
                if (filterCategory) {
                    filterCategory.innerHTML += `<option value="${category}">${category}</option>`;
                }
            });
        }

        // Update all data
        function updateAllData() {
            updateDashboard();
            updateDebtStats();
            updateBadges();
            updateBalance();
        }

        // Update debt statistics
        function updateDebtStats() {
            // Calculate debt statistics
            const allDebts = debts; // Include both paid and unpaid
            const unpaidDebts = debts.filter(d => d.status === 'unpaid');
            
            // Total original debt amount
            const totalOriginal = allDebts.reduce((sum, debt) => sum + debt.amount, 0);
            
            // Remaining debt amount
            const remainingDebt = unpaidDebts.reduce((sum, debt) => sum + debt.remainingAmount, 0);
            
            // Total paid amount
            const totalPaid = allDebts.reduce((sum, debt) => {
                return sum + debt.payments.reduce((paidSum, payment) => paidSum + payment.amount, 0);
            }, 0);
            
            // Active debt count
            const activeCount = unpaidDebts.length;
            
            // Overdue count
            const overdueCount = unpaidDebts.filter(debt => 
                debt.dueDate && new Date(debt.dueDate) < new Date()
            ).length;
            
            // Payment progress percentage
            const paymentProgress = totalOriginal > 0 ? 
                ((totalPaid / totalOriginal) * 100).toFixed(1) : 0;

            // Update UI elements
            if (document.getElementById('remainingDebt')) {
                document.getElementById('remainingDebt').textContent = formatCurrency(remainingDebt);
                document.getElementById('totalOriginalDebt').textContent = formatCurrency(totalOriginal);
                document.getElementById('totalPaidAmount').textContent = formatCurrency(totalPaid);
                document.getElementById('activeDebtCount').textContent = activeCount;
                document.getElementById('paymentProgress').textContent = `${paymentProgress}% lunas`;
                document.getElementById('overdueCount').textContent = `${overdueCount} jatuh tempo`;
            }
        }

        // Update dashboard
        function updateDashboard() {
            const currentMonth = new Date().getMonth();
            const currentYear = new Date().getFullYear();
            const lastMonth = new Date().getMonth() - 1;
            
            // Calculate totals
            const totalIncome = transactions
                .filter(t => t.type === 'income')
                .reduce((sum, t) => sum + t.amount, 0);
                
            const totalExpense = transactions
                .filter(t => t.type === 'expense')
                .reduce((sum, t) => sum + t.amount, 0);
                
            const totalDebt = debts
                .filter(d => d.status === 'unpaid')
                .reduce((sum, d) => sum + d.remainingAmount, 0);
            
            // Monthly data
            const monthlyIncome = transactions
                .filter(t => {
                    const tDate = new Date(t.date);
                    return t.type === 'income' && 
                           tDate.getMonth() === currentMonth && 
                           tDate.getFullYear() === currentYear;
                })
                .reduce((sum, t) => sum + t.amount, 0);
                
            const monthlyExpense = transactions
                .filter(t => {
                    const tDate = new Date(t.date);
                    return t.type === 'expense' && 
                           tDate.getMonth() === currentMonth && 
                           tDate.getFullYear() === currentYear;
                })
                .reduce((sum, t) => sum + t.amount, 0);

            // Last month data for comparison
            const lastMonthIncome = transactions
                .filter(t => {
                    const tDate = new Date(t.date);
                    return t.type === 'income' && 
                           tDate.getMonth() === lastMonth && 
                           tDate.getFullYear() === currentYear;
                })
                .reduce((sum, t) => sum + t.amount, 0);

            const lastMonthExpense = transactions
                .filter(t => {
                    const tDate = new Date(t.date);
                    return t.type === 'expense' && 
                           tDate.getMonth() === lastMonth && 
                           tDate.getFullYear() === currentYear;
                })
                .reduce((sum, t) => sum + t.amount, 0);

            // Calculate changes
            const incomeChange = lastMonthIncome > 0 ? 
                ((monthlyIncome - lastMonthIncome) / lastMonthIncome * 100).toFixed(1) : 0;
            const expenseChange = lastMonthExpense > 0 ? 
                ((monthlyExpense - lastMonthExpense) / lastMonthExpense * 100).toFixed(1) : 0;

            const activeDebtsCount = debts.filter(d => d.status === 'unpaid').length;

            // Update UI
            document.getElementById('currentBalance').textContent = formatCurrency(totalIncome - totalExpense - totalDebt);
            document.getElementById('monthlyIncome').textContent = formatCurrency(monthlyIncome);
            document.getElementById('monthlyExpense').textContent = formatCurrency(monthlyExpense);
            document.getElementById('totalDebt').textContent = formatCurrency(totalDebt);
            document.getElementById('debtCount').textContent = `${activeDebtsCount} utang aktif`;

            // Update changes
            document.getElementById('incomeChange').textContent = `${incomeChange >= 0 ? '+' : ''}${incomeChange}%`;
            document.getElementById('expenseChange').textContent = `${expenseChange >= 0 ? '+' : ''}${expenseChange}%`;

            // Update change colors
            const incomeChangeEl = document.getElementById('incomeChange').parentElement;
            const expenseChangeEl = document.getElementById('expenseChange').parentElement;
            
            incomeChangeEl.className = incomeChange >= 0 ? 'stat-change change-positive' : 'stat-change change-negative';
            expenseChangeEl.className = expenseChange <= 0 ? 'stat-change change-positive' : 'stat-change change-negative';
        }

        // Update badges
        function updateBadges() {
            const currentMonth = new Date().getMonth();
            const currentYear = new Date().getFullYear();
            
            const monthlyTransactions = transactions.filter(t => {
                const tDate = new Date(t.date);
                return tDate.getMonth() === currentMonth && tDate.getFullYear() === currentYear;
            }).length;
            
            const activeDebts = debts.filter(d => d.status === 'unpaid').length;
            
            document.getElementById('transactionBadge').textContent = monthlyTransactions;
            document.getElementById('debtBadge').textContent = activeDebts;

            // Also update sales and inventory badges
            updateSalesBadge();
            updateInventoryBadge();
        }

        // Update balance display
        function updateBalance() {
            const totalIncome = transactions
                .filter(t => t.type === 'income')
                .reduce((sum, t) => sum + t.amount, 0);
                
            const totalExpense = transactions
                .filter(t => t.type === 'expense')
                .reduce((sum, t) => sum + t.amount, 0);
                
            const totalDebt = debts
                .filter(d => d.status === 'unpaid')
                .reduce((sum, d) => sum + d.remainingAmount, 0);
            
            const balance = totalIncome - totalExpense - totalDebt;
            document.getElementById('balanceDisplay').textContent = `Saldo: ${formatCurrency(balance)}`;
        }

        // Transaction form handler
        document.getElementById('transactionForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const type = document.getElementById('transactionType').value;
            const amount = parseFloat(document.getElementById('transactionAmount').value);
            const category = document.getElementById('transactionCategory').value;
            const date = document.getElementById('transactionDate').value;
            const description = document.getElementById('transactionDescription').value;

            if (type === 'expense' && !category) {
                showAlert('Pilih kategori untuk pengeluaran!', 'error');
                return;
            }

            const transaction = {
                id: Date.now(),
                type,
                amount,
                category: type === 'expense' ? category : 'Pendapatan',
                date,
                description,
                createdAt: new Date()
            };

            transactions.unshift(transaction);
            
            // Reset form
            this.reset();
            document.getElementById('transactionDate').value = new Date().toISOString().split('T')[0];
            toggleCategoryField();
            
            updateAllData();
            renderRecentTransactions();
            if (currentPage === 'transactions') renderTransactions();
            showAlert('Transaksi berhasil ditambahkan!', 'success');
            
            // Auto collapse form after successful submission
            document.getElementById('transactionFormCard').classList.add('collapsed');
        });

        // Render recent transactions
        function renderRecentTransactions() {
            const container = document.getElementById('recentTransactions');
            const recent = transactions.slice(0, 5);

            if (recent.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <svg viewBox="0 0 24 24" fill="currentColor">
                            <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/>
                        </svg>
                        <h3>Belum ada transaksi</h3>
                        <p>Transaksi terbaru akan muncul di sini</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = recent.map(transaction => `
                <div class="transaction-item">
                    <div class="transaction-info">
                        <h4>${transaction.description || transaction.category}</h4>
                        <p>${transaction.category} • ${new Date(transaction.date).toLocaleDateString('id-ID', {
                            weekday: 'short',
                            year: 'numeric',
                            month: 'short',
                            day: 'numeric'
                        })}</p>
                    </div>
                    <div class="transaction-amount ${transaction.type === 'income' ? 'amount-positive' : 'amount-negative'}">
                        ${transaction.type === 'income' ? '+' : '-'} ${formatCurrency(transaction.amount)}
                    </div>
                </div>
            `).join('');
        }

        // Render transactions
        function renderTransactions() {
            const container = document.getElementById('transactionsList');
            let filteredTransactions = [...transactions];

            // Apply filters
            const searchTerm = document.getElementById('searchTransaction').value.toLowerCase();
            const typeFilter = document.getElementById('filterType').value;
            const categoryFilter = document.getElementById('filterCategory').value;

            if (searchTerm) {
                filteredTransactions = filteredTransactions.filter(t => 
                    (t.description || '').toLowerCase().includes(searchTerm) ||
                    t.category.toLowerCase().includes(searchTerm)
                );
            }

            if (typeFilter) {
                filteredTransactions = filteredTransactions.filter(t => t.type === typeFilter);
            }

            if (categoryFilter) {
                filteredTransactions = filteredTransactions.filter(t => t.category === categoryFilter);
            }

            if (filteredTransactions.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <svg viewBox="0 0 24 24" fill="currentColor">
                            <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/>
                        </svg>
                        <h3>Tidak ada transaksi</h3>
                        <p>Coba ubah filter pencarian</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = filteredTransactions.map(transaction => `
                <div class="transaction-item">
                    <div class="transaction-info">
                        <h4>${transaction.description || transaction.category}</h4>
                        <p>${transaction.category} • ${new Date(transaction.date).toLocaleDateString('id-ID', {
                            weekday: 'short',
                            year: 'numeric',
                            month: 'short',
                            day: 'numeric'
                        })}</p>
                    </div>
                    <div class="transaction-amount ${transaction.type === 'income' ? 'amount-positive' : 'amount-negative'}">
                        ${transaction.type === 'income' ? '+' : '-'} ${formatCurrency(transaction.amount)}
                    </div>
                </div>
            `).join('');
        }

        // Add event listeners for filters
        document.getElementById('searchTransaction').addEventListener('input', () => {
            if (currentPage === 'transactions') renderTransactions();
        });
        document.getElementById('filterType').addEventListener('change', () => {
            if (currentPage === 'transactions') renderTransactions();
        });
        document.getElementById('filterCategory').addEventListener('change', () => {
            if (currentPage === 'transactions') renderTransactions();
        });

        // Category form handler
        document.getElementById('categoryForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const categoryName = document.getElementById('categoryName').value.trim();
            
            if (categories.includes(categoryName)) {
                showAlert('Kategori sudah ada!', 'error');
                return;
            }
            
            categories.push(categoryName);
            this.reset();
            
            updateCategoryOptions();
            renderCategories();
            showAlert('Kategori berhasil ditambahkan!', 'success');
        });

        // Render categories
        function renderCategories() {
            const container = document.getElementById('categoriesList');
            
            container.innerHTML = categories.map(category => `
                <div class="category-item">
                    <span>${category}</span>
                    <button class="delete-category" onclick="deleteCategory('${category}')">Hapus</button>
                </div>
            `).join('');
        }

        // Debt form handler
        document.getElementById('debtForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const amount = parseFloat(document.getElementById('debtAmount').value);
            const to = document.getElementById('debtTo').value.trim();
            const startDate = document.getElementById('debtDueDate').value;
            const description = document.getElementById('debtDescription').value;
            const isRecurring = document.getElementById('isRecurring').checked;

            if (isRecurring) {
                // Handle recurring cicilan
                const countSelect = document.getElementById('cicilanCount').value;
                const customCount = document.getElementById('customCount').value;
                const interval = document.getElementById('cicilanInterval').value;
                
                let finalCount = countSelect === 'custom' ? parseInt(customCount || 1) : parseInt(countSelect);
                
                if (!startDate) {
                    showAlert('Pilih tanggal mulai untuk cicilan berulang!', 'error');
                    return;
                }
                
                // Generate multiple debt entries
                const startDateObj = new Date(startDate);
                let createdCount = 0;
                
                for (let i = 0; i < finalCount; i++) {
                    let dueDate = new Date(startDateObj);
                    
                    // Calculate due date based on interval
                    switch (interval) {
                        case 'weekly':
                            dueDate.setDate(startDateObj.getDate() + (i * 7));
                            break;
                        case 'monthly':
                            dueDate.setMonth(startDateObj.getMonth() + i);
                            break;
                        case 'quarterly':
                            dueDate.setMonth(startDateObj.getMonth() + (i * 3));
                            break;
                    }
                    
                    const debt = {
                        id: Date.now() + Math.random() + i,
                        amount,
                        remainingAmount: amount,
                        to,
                        dueDate: dueDate.toISOString().split('T')[0],
                        description: `${description || 'Cicilan'} - ${i + 1}/${finalCount}`,
                        status: 'unpaid',
                        payments: [],
                        createdAt: new Date(),
                        type: 'recurring'
                    };
                    
                    debts.push(debt);
                    createdCount++;
                }
                
                showAlert(`Berhasil membuat ${createdCount} cicilan!`, 'success');
                
            } else {
                // Handle single debt
                const debt = {
                    id: Date.now(),
                    amount,
                    remainingAmount: amount,
                    to,
                    dueDate: startDate,
                    description,
                    status: 'unpaid',
                    payments: [],
                    createdAt: new Date(),
                    type: 'manual'
                };

                debts.unshift(debt);
                showAlert('Utang berhasil ditambahkan!', 'success');
            }
            
            // Reset form
            this.reset();
            document.getElementById('isRecurring').checked = false;
            toggleRecurringOptions();
            
            updateAllData();
            renderDebts();
            
            // Auto collapse form after successful submission
            document.getElementById('debtFormCard').classList.add('collapsed');
        });

        // Render debts
        function renderDebts() {
            const container = document.getElementById('debtsList');
            const activeDebts = debts.filter(d => d.status === 'unpaid');

            if (activeDebts.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <svg viewBox="0 0 24 24" fill="currentColor">
                            <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                        </svg>
                        <h3>Tidak ada utang aktif</h3>
                        <p>Import cicilan atau tambah utang manual</p>
                    </div>
                `;
                return;
            }

            // Group debts by 'to' field
            const groupedDebts = {};
            activeDebts.forEach(debt => {
                if (!groupedDebts[debt.to]) {
                    groupedDebts[debt.to] = [];
                }
                groupedDebts[debt.to].push(debt);
            });

            container.innerHTML = Object.entries(groupedDebts).map(([creditor, debtList]) => {
                const totalAmount = debtList.reduce((sum, debt) => sum + debt.remainingAmount, 0);
                const overdueCount = debtList.filter(debt => 
                    debt.dueDate && new Date(debt.dueDate) < new Date()
                ).length;

                return `
                    <div class="debt-group">
                        <div class="debt-group-header">
                            <div>
                                <div class="debt-group-title">${creditor}</div>
                                <div class="debt-group-summary">
                                    ${debtList.length} cicilan • ${formatCurrency(totalAmount)}
                                    ${overdueCount > 0 ? ` • <span style="color: #ef4444;">${overdueCount} jatuh tempo</span>` : ''}
                                </div>
                            </div>
                            <button class="btn btn-secondary btn-sm" onclick="toggleDebtGroup('${creditor.replace(/'/g, "\\'")}')">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M7 10l5 5 5-5z"/>
                                </svg>
                            </button>
                        </div>
                        <div class="debt-group-items" id="group-${creditor.replace(/[^a-zA-Z0-9]/g, '')}" style="display: none;">
                            ${debtList.sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate)).map(debt => {
                                const isOverdue = debt.dueDate && new Date(debt.dueDate) < new Date();
                                
                                return `
                                    <div class="debt-item ${isOverdue ? 'overdue' : ''}">
                                        <div class="debt-info">
                                            <h4>${formatCurrency(debt.remainingAmount)}</h4>
                                            <p>${debt.description || 'Tanpa deskripsi'} ${debt.dueDate ? '• Jatuh tempo: ' + new Date(debt.dueDate).toLocaleDateString('id-ID') : ''}</p>
                                            ${isOverdue ? '<p style="color: #ef4444; font-weight: bold;">⚠️ Jatuh tempo!</p>' : ''}
                                        </div>
                                        <div class="debt-actions">
                                            <button class="btn btn-success btn-sm" onclick="openPaymentModal(${debt.id})">Bayar</button>
                                            <button class="btn btn-danger btn-sm" onclick="deleteDebt(${debt.id})">Hapus</button>
                                        </div>
                                    </div>
                                `;
                            }).join('')}
                        </div>
                    </div>
                `;
            }).join('');
        }

        // Render debt calendar view
        function renderDebtCalendar() {
            const container = document.getElementById('debtCalendar');
            const activeDebts = debts.filter(d => d.status === 'unpaid' && d.dueDate);

            if (activeDebts.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <svg viewBox="0 0 24 24" fill="currentColor">
                            <path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/>
                        </svg>
                        <h3>Tidak ada jadwal cicilan</h3>
                        <p>Import cicilan untuk melihat calendar view</p>
                    </div>
                `;
                return;
            }

            // Group by month
            const groupedByMonth = {};
            activeDebts.forEach(debt => {
                const dueDate = new Date(debt.dueDate);
                const monthKey = `${dueDate.getFullYear()}-${(dueDate.getMonth() + 1).toString().padStart(2, '0')}`;
                
                if (!groupedByMonth[monthKey]) {
                    groupedByMonth[monthKey] = [];
                }
                groupedByMonth[monthKey].push(debt);
            });

            // Sort months
            const sortedMonths = Object.keys(groupedByMonth).sort();

            container.innerHTML = sortedMonths.map(monthKey => {
                const [year, month] = monthKey.split('-');
                const monthName = new Date(year, month - 1, 1).toLocaleDateString('id-ID', { 
                    month: 'long', 
                    year: 'numeric' 
                });

                const monthDebts = groupedByMonth[monthKey].sort((a, b) => 
                    new Date(a.dueDate) - new Date(b.dueDate)
                );

                const totalMonthAmount = monthDebts.reduce((sum, debt) => sum + debt.remainingAmount, 0);

                return `
                    <div class="calendar-month">
                        <div class="calendar-month-title">
                            ${monthName}
                            <span style="font-size: 14px; color: #94a3b8; font-weight: normal;">
                                ${monthDebts.length} cicilan • ${formatCurrency(totalMonthAmount)}
                            </span>
                        </div>
                        <div class="calendar-items">
                            ${monthDebts.map(debt => {
                                const dueDate = new Date(debt.dueDate);
                                const today = new Date();
                                const daysDiff = Math.ceil((dueDate - today) / (1000 * 60 * 60 * 24));
                                
                                let itemClass = 'calendar-item';
                                if (daysDiff < 0) itemClass += ' overdue';
                                else if (daysDiff <= 7) itemClass += ' due-soon';

                                return `
                                    <div class="${itemClass}">
                                        <div>
                                            <div class="calendar-date">
                                                ${dueDate.getDate()} ${dueDate.toLocaleDateString('id-ID', { month: 'short' })}
                                            </div>
                                            <div class="calendar-desc">${debt.to}</div>
                                        </div>
                                        <div class="calendar-amount">
                                            ${formatCurrency(debt.remainingAmount)}
                                        </div>
                                    </div>
                                `;
                            }).join('')}
                        </div>
                    </div>
                `;
            }).join('');
        }



        // Payment form handler
        document.getElementById('paymentForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const debtId = parseInt(document.getElementById('paymentDebtId').value);
            const amount = parseFloat(document.getElementById('paymentAmount').value);
            const date = document.getElementById('paymentDate').value;
            const note = document.getElementById('paymentNote').value;
            const paymentType = document.getElementById('paymentType').value;

            const debt = debts.find(d => d.id === debtId);
            
            // Validation
            if (amount > debt.remainingAmount) {
                showAlert('Jumlah pembayaran melebihi sisa utang!', 'error');
                return;
            }

            if (amount <= 0) {
                showAlert('Masukkan jumlah pembayaran yang valid!', 'error');
                return;
            }

            // Add payment record
            debt.payments.push({
                amount,
                date,
                note,
                payment_type: paymentType,
                timestamp: new Date()
            });

            // Update remaining amount
            const previousRemaining = debt.remainingAmount;
            debt.remainingAmount -= amount;
            
            // Mark as paid if fully paid
            if (debt.remainingAmount <= 0) {
                debt.status = 'paid';
                debt.paidAt = new Date();
            }

            // Add as expense transaction
            let transactionDescription = '';
            if (paymentType === 'full') {
                transactionDescription = `Pelunasan utang ke ${debt.to}`;
            } else {
                transactionDescription = `Bayar sebagian utang ke ${debt.to}`;
            }
            
            if (note) {
                transactionDescription += ` - ${note}`;
            }

            const transaction = {
                id: Date.now(),
                type: 'expense',
                amount,
                category: 'Pembayaran Utang',
                date,
                description: transactionDescription,
                createdAt: new Date()
            };

            transactions.unshift(transaction);

            // Success message based on payment type
            let successMessage = '';
            if (debt.status === 'paid') {
                successMessage = `Utang telah LUNAS! Berhasil bayar ${formatCurrency(amount)}`;
            } else {
                successMessage = `Berhasil bayar ${formatCurrency(amount)}. Sisa: ${formatCurrency(debt.remainingAmount)}`;
            }

            updateAllData();
            renderRecentTransactions();
            if (currentPage === 'transactions') renderTransactions();
            renderDebts();
            window.closePaymentModal();
            showAlert(successMessage, 'success');
        });

        // Setup payment amount input listener
        document.getElementById('paymentAmount').addEventListener('input', updatePaymentSummary);

        // Update analytics
        function updateAnalytics() {
            const totalIncome = transactions
                .filter(t => t.type === 'income')
                .reduce((sum, t) => sum + t.amount, 0);
                
            const totalExpense = transactions
                .filter(t => t.type === 'expense')
                .reduce((sum, t) => sum + t.amount, 0);

            // Profit margin
            const profitMargin = totalIncome > 0 ? ((totalIncome - totalExpense) / totalIncome * 100).toFixed(1) : 0;
            document.getElementById('profitMargin').textContent = `${profitMargin}%`;

            // Average transactions per day
            const daysSinceFirstTransaction = transactions.length > 0 ? 
                Math.max(1, Math.ceil((new Date() - new Date(transactions[transactions.length - 1].date)) / (1000 * 60 * 60 * 24))) : 1;
            const avgTransactions = (transactions.length / daysSinceFirstTransaction).toFixed(1);
            document.getElementById('avgTransactions').textContent = avgTransactions;

            // Top expense category
            const expensesByCategory = {};
            transactions.filter(t => t.type === 'expense').forEach(t => {
                expensesByCategory[t.category] = (expensesByCategory[t.category] || 0) + t.amount;
            });
            
            const topCategory = Object.entries(expensesByCategory).sort((a, b) => b[1] - a[1])[0];
            document.getElementById('topCategory').textContent = topCategory ? topCategory[0] : '-';
            document.getElementById('topCategoryAmount').textContent = topCategory ? formatCurrency(topCategory[1]) : 'Rp 0';

            // Burn rate (monthly expense average)
            const currentMonth = new Date().getMonth();
            const currentYear = new Date().getFullYear();
            const monthlyExpense = transactions
                .filter(t => {
                    const tDate = new Date(t.date);
                    return t.type === 'expense' && 
                           tDate.getMonth() === currentMonth && 
                           tDate.getFullYear() === currentYear;
                })
                .reduce((sum, t) => sum + t.amount, 0);
            
            document.getElementById('burnRate').textContent = formatCurrency(monthlyExpense);

            // Render charts
            renderCategoryChart();
            renderTrendChart();
            renderComparisonChart();

            // Update insights
            updateInsights();
        }

        // Destroy existing chart
        function destroyChart(chartId) {
            if (charts[chartId]) {
                charts[chartId].destroy();
                delete charts[chartId];
            }
        }

        // Render category breakdown chart
        function renderCategoryChart() {
            destroyChart('categoryChart');
            
            const expensesByCategory = {};
            transactions.filter(t => t.type === 'expense').forEach(t => {
                expensesByCategory[t.category] = (expensesByCategory[t.category] || 0) + t.amount;
            });

            const sortedCategories = Object.entries(expensesByCategory)
                .sort((a, b) => b[1] - a[1])
                .slice(0, 8); // Top 8 categories

            if (sortedCategories.length === 0) {
                const ctx = document.getElementById('categoryChart').getContext('2d');
                ctx.fillStyle = '#64748b';
                ctx.font = '16px Inter';
                ctx.textAlign = 'center';
                ctx.fillText('Belum ada data pengeluaran', ctx.canvas.width / 2, ctx.canvas.height / 2);
                return;
            }

            const data = {
                labels: sortedCategories.map(([category]) => category),
                datasets: [{
                    data: sortedCategories.map(([, amount]) => amount),
                    backgroundColor: chartColors.slice(0, sortedCategories.length),
                    borderColor: '#1e293b',
                    borderWidth: 2,
                    hoverBorderWidth: 3
                }]
            };

            const config = {
                type: 'doughnut',
                data: data,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                color: '#e2e8f0',
                                font: { size: 12 },
                                usePointStyle: true,
                                padding: 15
                            }
                        },
                        tooltip: {
                            backgroundColor: '#1e293b',
                            titleColor: '#e2e8f0',
                            bodyColor: '#e2e8f0',
                            borderColor: '#374151',
                            borderWidth: 1,
                            callbacks: {
                                label: function(context) {
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = ((context.raw / total) * 100).toFixed(1);
                                    return `${context.label}: ${formatCurrency(context.raw)} (${percentage}%)`;
                                }
                            }
                        }
                    },
                    elements: {
                        arc: {
                            borderWidth: 2
                        }
                    }
                }
            };

            const ctx = document.getElementById('categoryChart').getContext('2d');
            charts['categoryChart'] = new Chart(ctx, config);
        }

        // Render trend chart
        function renderTrendChart() {
            destroyChart('trendChart');
            
            // Get last 6 months data
            const monthsData = [];
            const now = new Date();
            
            for (let i = 5; i >= 0; i--) {
                const date = new Date(now.getFullYear(), now.getMonth() - i, 1);
                const monthName = date.toLocaleDateString('id-ID', { month: 'short' });
                
                const monthlyIncome = transactions.filter(t => {
                    const tDate = new Date(t.date);
                    return t.type === 'income' && 
                           tDate.getMonth() === date.getMonth() && 
                           tDate.getFullYear() === date.getFullYear();
                }).reduce((sum, t) => sum + t.amount, 0);

                const monthlyExpense = transactions.filter(t => {
                    const tDate = new Date(t.date);
                    return t.type === 'expense' && 
                           tDate.getMonth() === date.getMonth() && 
                           tDate.getFullYear() === date.getFullYear();
                }).reduce((sum, t) => sum + t.amount, 0);

                monthsData.push({
                    month: monthName,
                    income: monthlyIncome,
                    expense: monthlyExpense
                });
            }

            const data = {
                labels: monthsData.map(m => m.month),
                datasets: [
                    {
                        label: 'Pendapatan',
                        data: monthsData.map(m => m.income),
                        borderColor: '#10b981',
                        backgroundColor: 'rgba(16, 185, 129, 0.1)',
                        fill: true,
                        tension: 0.4,
                        pointBackgroundColor: '#10b981',
                        pointBorderColor: '#1e293b',
                        pointBorderWidth: 2
                    },
                    {
                        label: 'Pengeluaran',
                        data: monthsData.map(m => m.expense),
                        borderColor: '#ef4444',
                        backgroundColor: 'rgba(239, 68, 68, 0.1)',
                        fill: true,
                        tension: 0.4,
                        pointBackgroundColor: '#ef4444',
                        pointBorderColor: '#1e293b',
                        pointBorderWidth: 2
                    }
                ]
            };

            const config = {
                type: 'line',
                data: data,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                color: '#94a3b8',
                                font: { size: 12 },
                                callback: function(value) {
                                    return formatCurrency(value);
                                }
                            },
                            grid: {
                                color: '#374151',
                                drawBorder: false
                            }
                        },
                        x: {
                            ticks: {
                                color: '#94a3b8',
                                font: { size: 12 }
                            },
                            grid: {
                                color: '#374151',
                                drawBorder: false
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            labels: {
                                color: '#e2e8f0',
                                font: { size: 12 },
                                usePointStyle: true
                            }
                        },
                        tooltip: {
                            backgroundColor: '#1e293b',
                            titleColor: '#e2e8f0',
                            bodyColor: '#e2e8f0',
                            borderColor: '#374151',
                            borderWidth: 1,
                            callbacks: {
                                label: function(context) {
                                    return `${context.dataset.label}: ${formatCurrency(context.raw)}`;
                                }
                            }
                        }
                    }
                }
            };

            const ctx = document.getElementById('trendChart').getContext('2d');
            charts['trendChart'] = new Chart(ctx, config);
        }

        // Render comparison chart
        function renderComparisonChart() {
            destroyChart('comparisonChart');
            
            // Get last 6 months data
            const monthsData = [];
            const now = new Date();
            
            for (let i = 5; i >= 0; i--) {
                const date = new Date(now.getFullYear(), now.getMonth() - i, 1);
                const monthName = date.toLocaleDateString('id-ID', { month: 'short', year: '2-digit' });
                
                const monthlyIncome = transactions.filter(t => {
                    const tDate = new Date(t.date);
                    return t.type === 'income' && 
                           tDate.getMonth() === date.getMonth() && 
                           tDate.getFullYear() === date.getFullYear();
                }).reduce((sum, t) => sum + t.amount, 0);

                const monthlyExpense = transactions.filter(t => {
                    const tDate = new Date(t.date);
                    return t.type === 'expense' && 
                           tDate.getMonth() === date.getMonth() && 
                           tDate.getFullYear() === date.getFullYear();
                }).reduce((sum, t) => sum + t.amount, 0);

                monthsData.push({
                    month: monthName,
                    income: monthlyIncome,
                    expense: monthlyExpense,
                    profit: monthlyIncome - monthlyExpense
                });
            }

            const data = {
                labels: monthsData.map(m => m.month),
                datasets: [
                    {
                        label: 'Pendapatan',
                        data: monthsData.map(m => m.income),
                        backgroundColor: 'rgba(16, 185, 129, 0.8)',
                        borderColor: '#10b981',
                        borderWidth: 1
                    },
                    {
                        label: 'Pengeluaran',
                        data: monthsData.map(m => m.expense),
                        backgroundColor: 'rgba(239, 68, 68, 0.8)',
                        borderColor: '#ef4444',
                        borderWidth: 1
                    },
                    {
                        label: 'Profit',
                        data: monthsData.map(m => m.profit),
                        backgroundColor: 'rgba(59, 130, 246, 0.8)',
                        borderColor: '#3b82f6',
                        borderWidth: 1
                    }
                ]
            };

            const config = {
                type: 'bar',
                data: data,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                color: '#94a3b8',
                                font: { size: 12 },
                                callback: function(value) {
                                    return formatCurrency(value);
                                }
                            },
                            grid: {
                                color: '#374151',
                                drawBorder: false
                            }
                        },
                        x: {
                            ticks: {
                                color: '#94a3b8',
                                font: { size: 12 }
                            },
                            grid: {
                                color: '#374151',
                                drawBorder: false,
                                display: false
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            labels: {
                                color: '#e2e8f0',
                                font: { size: 12 },
                                usePointStyle: true
                            }
                        },
                        tooltip: {
                            backgroundColor: '#1e293b',
                            titleColor: '#e2e8f0',
                            bodyColor: '#e2e8f0',
                            borderColor: '#374151',
                            borderWidth: 1,
                            callbacks: {
                                label: function(context) {
                                    return `${context.dataset.label}: ${formatCurrency(context.raw)}`;
                                }
                            }
                        }
                    }
                }
            };

            const ctx = document.getElementById('comparisonChart').getContext('2d');
            charts['comparisonChart'] = new Chart(ctx, config);
        }

        // Update insights
        function updateInsights() {
            const currentMonth = new Date().getMonth();
            const currentYear = new Date().getFullYear();
            
            const monthlyExpense = transactions
                .filter(t => {
                    const tDate = new Date(t.date);
                    return t.type === 'expense' && 
                           tDate.getMonth() === currentMonth && 
                           tDate.getFullYear() === currentYear;
                })
                .reduce((sum, t) => sum + t.amount, 0);

            const monthlyIncome = transactions
                .filter(t => {
                    const tDate = new Date(t.date);
                    return t.type === 'income' && 
                           tDate.getMonth() === currentMonth && 
                           tDate.getFullYear() === currentYear;
                })
                .reduce((sum, t) => sum + t.amount, 0);

            // Expense trend
            let trendText = 'Mulai catat transaksi untuk melihat tren pengeluaran.';
            let trendProgress = 0;
            
            if (transactions.length > 0) {
                if (monthlyExpense > monthlyIncome * 0.8) {
                    trendText = '⚠️ Pengeluaran tinggi! Bulan ini pengeluaran sudah mencapai 80% dari pendapatan.';
                    trendProgress = 90;
                } else if (monthlyExpense > monthlyIncome * 0.6) {
                    trendText = '⚡ Perhatian! Pengeluaran bulan ini sudah 60% dari pendapatan.';
                    trendProgress = 70;
                } else {
                    trendText = '✅ Pengeluaran masih dalam kontrol yang baik.';
                    trendProgress = 40;
                }
            }
            
            document.getElementById('expenseTrend').textContent = trendText;
            document.getElementById('expenseTrendProgress').style.width = `${trendProgress}%`;

            // Health score
            let healthScore = 85; // Default
            let healthDesc = 'Kondisi keuangan stabil';
            let healthProgress = 85;
            
            if (transactions.length > 0) {
                const totalIncome = transactions.filter(t => t.type === 'income').reduce((sum, t) => sum + t.amount, 0);
                const totalExpense = transactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0);
                const totalDebt = debts.filter(d => d.status === 'unpaid').reduce((sum, d) => sum + d.remainingAmount, 0);
                
                const netWorth = totalIncome - totalExpense - totalDebt;
                const expenseRatio = totalIncome > 0 ? (totalExpense / totalIncome) : 1;
                
                if (netWorth < 0) {
                    healthScore = 25;
                    healthDesc = 'Perlu perhatian serius';
                    healthProgress = 25;
                } else if (expenseRatio > 0.9) {
                    healthScore = 45;
                    healthDesc = 'Kondisi berisiko tinggi';
                    healthProgress = 45;
                } else if (expenseRatio > 0.7) {
                    healthScore = 65;
                    healthDesc = 'Perlu optimisasi';
                    healthProgress = 65;
                } else {
                    healthScore = 90;
                    healthDesc = 'Kondisi sangat baik';
                    healthProgress = 90;
                }
            }
            
            document.getElementById('healthScore').textContent = healthScore + '/100';
            document.getElementById('healthScoreDesc').textContent = healthDesc;
            document.getElementById('healthScoreProgress').style.width = `${healthProgress}%`;

            // Recommendations
            const recommendations = [];
            
            if (transactions.length === 0) {
                recommendations.push('• Mulai catat semua transaksi untuk tracking yang akurat');
                recommendations.push('• Set target pendapatan dan budget pengeluaran bulanan');
                recommendations.push('• Buat kategori pengeluaran yang spesifik untuk bisnis');
            } else {
                const totalIncome = transactions.filter(t => t.type === 'income').reduce((sum, t) => sum + t.amount, 0);
                const totalExpense = transactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0);
                
                if (totalExpense > totalIncome * 0.8) {
                    recommendations.push('• Kurangi pengeluaran non-essential');
                    recommendations.push('• Review kategori pengeluaran tertinggi');
                    recommendations.push('• Cari cara untuk meningkatkan pendapatan');
                } else {
                    recommendations.push('• Pertahankan kontrol pengeluaran yang baik');
                    recommendations.push('• Pertimbangkan investasi untuk pertumbuhan');
                    recommendations.push('• Sisihkan dana darurat minimal 3 bulan operasional');
                }
                
                const overdueDebts = debts.filter(d => d.status === 'unpaid' && d.dueDate && new Date(d.dueDate) < new Date()).length;
                if (overdueDebts > 0) {
                    recommendations.push('• Prioritaskan pembayaran utang yang jatuh tempo');
                }
            }
            
            document.getElementById('recommendations').innerHTML = recommendations.join('<br>');
        }

        // =============================================
        //    Sales & Inventory Utilities
        //
        // These functions handle loading and saving data,
        // rendering lists, handling form submissions,
        // updating badges, and deletion for the Penjualan
        // (sales) and Inventory modules. They are kept
        // outside of other functions so they can be
        // referenced globally.

        // Load sales from localStorage
        function loadSales() {
            try {
                sales = JSON.parse(localStorage.getItem('sales')) || [];
            } catch (err) {
                sales = [];
            }
        }

        // Save sales to localStorage
        function saveSales() {
            localStorage.setItem('sales', JSON.stringify(sales));
        }

        // Load inventories from localStorage
        function loadInventory() {
            try {
                inventories = JSON.parse(localStorage.getItem('inventories')) || [];
            } catch (err) {
                inventories = [];
            }
        }

        // Save inventories to localStorage
        function saveInventory() {
            localStorage.setItem('inventories', JSON.stringify(inventories));
        }

        // Convert platform code to readable name
        function getPlatformName(code) {
            switch(code) {
                case 'tiktokshop': return 'TikTok Shop';
                case 'shopee': return 'Shopee';
                case 'tokopedia': return 'Tokopedia';
                default: return 'Marketplace Lain';
            }
        }

        // Toggle sale form visibility
        window.toggleSaleForm = function() {
            const formCard = document.getElementById('saleFormCard');
            if (formCard) formCard.classList.toggle('collapsed');
        };

        // Toggle inventory form visibility
        window.toggleInventoryForm = function() {
            const formCard = document.getElementById('inventoryFormCard');
            if (formCard) formCard.classList.toggle('collapsed');
        };

        // Render sales list
        function renderSales() {
            const list = document.getElementById('salesList');
            if (!list) return;
            const searchTerm = (document.getElementById('searchSale')?.value || '').toLowerCase();
            let filtered = sales.slice();
            if (searchTerm) {
                filtered = filtered.filter(sale => {
                    const desc = (sale.description || '').toLowerCase();
                    const platformName = getPlatformName(sale.platform).toLowerCase();
                    return desc.includes(searchTerm) || platformName.includes(searchTerm);
                });
            }
            if (filtered.length === 0) {
                list.innerHTML = '<p style="color:#94a3b8; text-align:center; padding:20px;">Belum ada data penjualan.</p>';
                return;
            }
            list.innerHTML = '';
            filtered.forEach(sale => {
                const dateString = new Date(sale.date).toLocaleDateString('id-ID', { day:'numeric', month:'short', year:'numeric' });
                const item = document.createElement('div');
                item.className = 'sale-item';
                item.innerHTML = `
                    <div class="sale-info">
                        <h4>${getPlatformName(sale.platform)}</h4>
                        <p>${dateString}${sale.description ? ' • ' + sale.description : ''}</p>
                    </div>
                    <div class="sale-amount">${formatCurrency(sale.amount)}</div>
                    <div class="sale-actions">
                        <a href="#" onclick="deleteSale('${sale.id}')" style="color:#ef4444;">Hapus</a>
                    </div>
                `;
                list.appendChild(item);
            });
        }

        // Render inventory list
        function renderInventory() {
    const list = document.getElementById('inventoryList');
    if (!list) return;
    
    if (inventories.length === 0) {
        list.innerHTML = '<tr><td colspan="6" style="padding: 20px; text-align: center; color: #94a3b8;">Belum ada data produk.</td></tr>';
        return;
    }
    
    list.innerHTML = '';
    inventories.forEach(item => {
        const row = document.createElement('tr');
        row.style.borderBottom = '1px solid #334155';
        row.innerHTML = `
            <td style="padding: 16px 20px; color: #e2e8f0;">${item.sku || '-'}</td>
            <td style="padding: 16px 20px; color: #e2e8f0;">${item.name}</td>
            <td style="padding: 16px 20px; color: #3b82f6;">${item.stock || 0}</td>
            <td style="padding: 16px 20px; color: #10b981;">${formatCurrency(item.purchasePrice || 0)}</td>
            <td style="padding: 16px 20px; color: #10b981;">${formatCurrency(item.salePrice || 0)}</td>
            <td style="padding: 16px 20px;">
                <button onclick="deleteInventory('${item.id}')" style="background: #ef4444; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 12px;">Hapus</button>
            </td>
        `;
        list.appendChild(row);
    });
}

        // Delete a sale entry
        window.deleteSale = function(id) {
            if (confirm('Apakah Anda yakin ingin menghapus penjualan ini?')) {
                sales = sales.filter(sale => String(sale.id) !== String(id));
                saveSales();
                updateSalesBadge();
                renderSales();
                showAlert('Penjualan berhasil dihapus!', 'success');
            }
        };

        // Delete an inventory entry
        window.deleteInventory = function(id) {
            if (confirm('Apakah Anda yakin ingin menghapus produk ini?')) {
                // Find the item to delete to log stock decrease
                const itemToDelete = inventories.find(item => String(item.id) === String(id));
                if (itemToDelete) {
                    // Record stock decrease movement before deletion  
if (typeof recordStockMovement === 'function') {
    recordStockMovement(itemToDelete.name, 'decrease', itemToDelete.stock || 0, 'Hapus Produk');
}
                }
                // Remove the item from inventories
                inventories = inventories.filter(item => String(item.id) !== String(id));
                saveInventory();
                updateInventoryBadge();
                renderInventory();
                // If we are currently on the movement or report or analytics tab, re-render
                if (currentPage === 'inventory') {
                    const activeTabEl = document.querySelector('.inventory-tab.active');
                    if (activeTabEl) {
                        const activeTab = activeTabEl.id.replace('inventoryTab-', '');
                        if (activeTab === 'movement' && typeof renderStockMovements === 'function') {
                            renderStockMovements();
                        }
                        if (activeTab === 'report' && typeof renderInventoryReport === 'function') {
                            renderInventoryReport();
                        }
                        if (activeTab === 'analytics' && typeof renderInventoryAnalytics === 'function') {
                            renderInventoryAnalytics();
                        }
                    }
                }
                showAlert('Produk berhasil dihapus!', 'success');
            }
        };
        
        
        window.deleteStockMovement = function(id) {
    if (confirm('Hapus movement ini?')) {
        stockMovements = stockMovements.filter(m => m.id !== id);
        saveStockMovements();
        renderStockMovements();
        showAlert('Movement berhasil dihapus!', 'success');
    }
};
        

        // Update sales badge for current month
        function updateSalesBadge() {
            const badge = document.getElementById('salesBadge');
            if (!badge) return;
            const now = new Date();
            const month = now.getMonth();
            const year = now.getFullYear();
            const count = sales.filter(sale => {
                const d = new Date(sale.date);
                return d.getMonth() === month && d.getFullYear() === year;
            }).length;
            badge.textContent = count;
        }

        // Update inventory badge (total items)
        function updateInventoryBadge() {
            const badge = document.getElementById('inventoryBadge');
            if (!badge) return;
            badge.textContent = inventories.length;
        }

        // Handle sales form submission
        const saleFormElement = document.getElementById('saleForm');
        if (saleFormElement) {
            saleFormElement.addEventListener('submit', function(e) {
                e.preventDefault();
                const amount = parseFloat(document.getElementById('saleAmount').value) || 0;
                const platform = document.getElementById('salePlatform').value;
                const date = document.getElementById('saleDate').value;
                const description = document.getElementById('saleDescription').value;
                if (!date) {
                    showAlert('Tanggal penjualan wajib diisi!', 'error');
                    return;
                }
                const sale = {
                    id: Date.now().toString() + Math.random().toString(16).slice(2),
                    amount,
                    platform,
                    date,
                    description
                };
                sales.unshift(sale);
                saveSales();
                updateSalesBadge();
                renderSales();
                this.reset();
                const todayStr = new Date().toISOString().split('T')[0];
                const saleDateEl = document.getElementById('saleDate');
                if (saleDateEl) saleDateEl.value = todayStr;
                const salePlatformEl = document.getElementById('salePlatform');
                if (salePlatformEl) salePlatformEl.value = 'tiktokshop';
                toggleSaleForm();
                showAlert('Penjualan berhasil ditambahkan!', 'success');
            });
        }

        // Handle inventory form submission
        const inventoryFormElement = document.getElementById('inventoryForm');
        if (inventoryFormElement) {
            inventoryFormElement.addEventListener('submit', function(e) {
                e.preventDefault();
                const name = document.getElementById('productName').value.trim();
                const stock = parseInt(document.getElementById('productStock').value) || 0;
                const purchasePrice = parseFloat(document.getElementById('purchasePrice').value) || 0;
                const salePrice = parseFloat(document.getElementById('salePrice').value) || 0;
                const description = document.getElementById('productDescription').value;
                if (!name) {
                    showAlert('Nama produk wajib diisi!', 'error');
                    return;
                }
                const item = {
                    id: Date.now().toString() + Math.random().toString(16).slice(2),
                    name,
                    stock,
                    purchasePrice,
                    salePrice,
                    description
                };
                inventories.unshift(item);
                saveInventory();
                updateInventoryBadge();
                renderInventory();
                // Record initial stock increase
                if (typeof recordStockMovement === 'function' && stock > 0) {
                    recordStockMovement(name, 'increase', stock);
                }
                this.reset();
                toggleInventoryForm();
                showAlert('Produk berhasil ditambahkan!', 'success');
            });
        }

        // Search filters for sales and inventory
        const saleSearch = document.getElementById('searchSale');
        if (saleSearch) {
            saleSearch.addEventListener('input', () => {
                if (currentPage === 'sales') renderSales();
            });
        }
        const inventorySearch = document.getElementById('searchInventory');
        if (inventorySearch) {
            inventorySearch.addEventListener('input', () => {
                if (currentPage === 'inventory') renderInventory();
            });
        }

        // Buka Stock Movement Modal
window.openStockMovementModal = function() {
    document.getElementById('stockMovementModal').style.display = 'flex';
};

// Tutup Stock Movement Modal
window.closeStockMovementModal = function() {
    document.getElementById('stockMovementModal').style.display = 'none';
    document.getElementById('stockMovementForm').reset();
};

// Handle Stock Movement Submit
window.handleStockMovementSubmit = function(e) {
    e.preventDefault();
    
    const productSearch = document.getElementById('productSearch').value;
    const movementType = document.getElementById('movementType').value;
    const qty = parseInt(document.getElementById('movementQty').value);
    const reason = document.getElementById('movementReason').value;
    const notes = document.getElementById('movementNotes').value;
    
    // Find product by name or SKU
    const product = inventories.find(p => 
        p.name.toLowerCase().includes(productSearch.toLowerCase()) || 
        p.sku.toLowerCase().includes(productSearch.toLowerCase())
    );
    
    if (!product) {
        showAlert('Produk tidak ditemukan!', 'error');
        return;
    }
    
    // Update stock
    if (movementType === 'in') {
        product.stock += qty;
    } else {
        if (product.stock < qty) {
            showAlert('Stok tidak mencukupi!', 'error');
            return;
        }
        product.stock -= qty;
    }
    
    // Record movement
    recordStockMovement(product.name, movementType === 'in' ? 'increase' : 'decrease', qty, reason + (notes ? ' - ' + notes : ''));
    
    // Save and update
    saveInventory();
    renderStockMovements();
    renderInventory();
    
    closeStockMovementModal();
    showAlert('Stock movement berhasil ditambahkan!', 'success');
};
        
        
        // Initialize the app
        init();

        // Close sidebar on outside click (mobile)
        document.addEventListener('click', function(e) {
            const sidebar = document.getElementById('sidebar');
            const toggleBtn = document.querySelector('.toggle-sidebar');
            
            if (window.innerWidth <= 768 && 
                !sidebar.contains(e.target) && 
                !toggleBtn.contains(e.target) && 
                sidebar.classList.contains('mobile-open')) {
                sidebar.classList.remove('mobile-open');
            }
        });
    </script>
</body>
</html>
